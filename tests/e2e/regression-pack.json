{
	"info": {
		"_postman_id": "ccb24767-553d-438a-8556-042dbea9f5b2",
		"name": "Personal Demographics Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Framwork Setup",
			"item": [
				{
					"name": "createPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c071620-7e7f-4181-b3ef-94453eb6774e",
								"exec": [
									"/*CreatePatient Function*/",
									"",
									"var createPatient = () => {",
									"",
									"        /*create a random firstname*/",
									"        let given = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"        pm.variables.set(\"given\", given);",
									"        console.log(\"Random 'Given' name created is: \" + pm.variables.get(\"given\"));",
									"",
									"        /*create a random lastname*/",
									"        let family = pm.variables.replaceIn(\"{{$randomLastName}}\");",
									"        pm.variables.set(\"family\", family);",
									"        console.log(\"Random 'family' name created is: \" + pm.variables.get(\"family\"));",
									"",
									"        /*create a random houseNumber*/",
									"        let addressHouseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"        pm.variables.set(\"addressHouseNumber\", addressHouseNumber);",
									"        console.log(\"Random 'houseNumber' created is: \" + pm.variables.get(\"addressHouseNumber\"));",
									"",
									"        /*create a random Street*/",
									"        let addressStreet = pm.variables.replaceIn(\"{{$randomStreetName}}\");",
									"        pm.variables.set(\"addressStreet\", addressStreet);",
									"        console.log(\"Random 'addressStreet' created is: \" + pm.variables.get(\"addressStreet\"));",
									"",
									"        /*create a random District*/",
									"        let addressDistrict = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" District\";",
									"        pm.variables.set(\"addressDistrict\", addressDistrict);",
									"        console.log(\"Random 'addressDistrict' created is: \" + pm.variables.get(\"addressDistrict\"));",
									"",
									"        /*create a random City*/",
									"        let addressCity = pm.variables.replaceIn(\"{{$randomCity}}\");",
									"        pm.variables.set(\"addressCity\", addressCity);",
									"        console.log(\"Random 'addressCity' created is: \" + pm.variables.get(\"addressCity\"));",
									"",
									"        /*create a random County*/",
									"        let addressCounty = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" County\";",
									"        pm.variables.set(\"addressCounty\", addressCounty);",
									"        console.log(\"Random 'addressCounty' created is: \" + pm.variables.get(\"addressCounty\"));",
									"",
									"        /*create a random postCode*/",
									"        pm.variables.set(\"postCode\", \"PD12\" + _.random(1, 9) + \"PD\");",
									"        console.log(\"Random 'postCode' created is: \" + pm.variables.get(\"postCode\"));",
									"",
									"        /*create a random gender*/",
									"        pm.variables.set(\"gender\", _.random(1, 2));",
									"        console.log(\"Random 'gender' created is: \" + pm.variables.get(\"gender\"));",
									"",
									"        /*create a random birthDate*/",
									"        var moment = require('moment');",
									"        let randomYears = _.random(10, 50);",
									"        pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));",
									"        pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));",
									"        console.log(\"Random 'birthTime' created is: \" + pm.variables.get(\"birthTime\"));",
									"        console.log(\"Random 'birthDate' created is: \" + pm.variables.get(\"birthDate\"));",
									"      ",
									"};",
									"pm.globals.set(\"createPatient\", createPatient.toString());",
									"createPatient();",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ffc58d95-6c55-4aa4-9edc-db801bab05ce",
								"exec": [
									"eval(pm.globals.get(\"createPatient\"))();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "This function creates a patient made up of randomised variables, consiting of: \n\n- given name\n- family name\n- address lines (5 lines in total)\n- postcode\n- gender\n- birthdate\n\nit can be used to create a Patient using the Personal Demographics service - HL7 V3 API"
					},
					"response": []
				},
				{
					"name": "FHIR Error Reponse Validator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e7fffce-431c-49b1-bec8-c35951755cba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d95a914c-bee0-4408-ae01-32501654c4d2",
								"exec": [
									"// Error Message Validation: Provides tests to assert against FHIR error response",
									"",
									"pm.globals.set('errorMessage', function errorMessage() {",
									"    let response = pm.response.json();",
									"    let message = {};",
									"",
									"    message.assertCodeIs = (code) => {",
									"        pm.test(\"Returns the code \" + code, () => {",
									"            pm.expect(response.issue[0].details.coding[0].code).to.eql(code);",
									"        });",
									"    }",
									"",
									"    message.assertDisplayIs = (display) => {",
									"        pm.test(\"Returns the display message \" + display, () => {",
									"            pm.expect(response.issue[0].details.coding[0].display).to.eql(display);",
									"        });",
									"    }",
									"",
									"    message.assertSeverityIs = (severity) => {",
									"        pm.test(\"Returns the severity \" + severity, () => {",
									"            pm.expect(response.issue[0].severity).to.eql(severity);",
									"        });",
									"    }",
									"    ",
									"",
									"    message.assertSystemIs = (system) => {",
									"        pm.test(\"Returns the system message \" + system, () => {",
									"            pm.expect(response.issue[0].details.coding[0].system).to.eql(system);",
									"        });",
									"    }",
									"",
									"    return message;",
									"} + '; errorMessage();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "# Function: FHIR Error Response Validator\n___\n### Description\nThis function provides the capability to assert aspects of the generic FHIR based error response matches expectation.\n \n##### Example FHIR Error Response\n```\n{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}\n```\n\n### Usage\nUse eval to evaluate the function, which is stored as the global variable _errorMessage_\n```\neval(pm.globals.get(\"errorMessage\"));\n```\nCall the various different internal 'methods' to assert against key parts of the error message\n```\nerrorMessage().assertCodeIs(\"EXTRA_VALUE\");\nerrorMessage().assertDisplayIs(\"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\");\nerrorMessage().assertSeverityIs(\"error\");\nerrorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\n```\n\n### Output\n- PASS Returns the code EXTRA_VALUE\n- PASS Returns the display message Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\n- PASS Returns the severity error\n- PASS Returns the system message https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode"
					},
					"response": []
				},
				{
					"name": "Patient Validator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a421885a-c99b-41e1-91b9-0bfb3f472e61",
								"exec": [
									"// Patient Utility: Provides key patient response related functions",
									"pm.globals.set('patient', function patient() {",
									"    let response = pm.response.json();",
									"    let calls = {};",
									"",
									"    calls.getScores = () => {",
									"        var scores = [];",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            scores.push(response.entry[i].search.score);",
									"        }",
									"",
									"        return scores;",
									"    }",
									"",
									"    calls.getTotalNumberOfPatients = () => {",
									"        let response = JSON.parse(responseBody);",
									"        return response.total;",
									"    };",
									"    ",
									"    calls.containsPatientWithNhsNumber = function(nhsNumber) {",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            if(response.entry[i].resource.id === nhsNumber) {",
									"                return true;",
									"            }",
									"        }",
									"",
									"        return false;",
									"    };",
									"    ",
									"    calls.getScoreByNhsNumber = function(resp, nhsNumber) {",
									"        console.log(\"HERE: \" + resp);",
									"        for (i = 0; i < resp.entry.length; i++) {",
									"            if (resp.entry[i].resource.id === nhsNumber) {",
									"                return resp.entry[i].search.score;",
									"            }",
									"        }",
									"",
									"        return null;",
									"    };",
									"",
									"    return calls;",
									"} + '; patient();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Assertions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4a6c01b8-7b0a-448b-8465-58338759be04",
								"exec": [
									"// Assert utility: Tests for key aspects of the response",
									"pm.globals.set(\"assertThatUtil\", function assertThatUtil() {",
									"    let response = pm.response.json();",
									"    let util = {};",
									"",
									"    util.statusCodeIs = (code) => {",
									"        pm.test(\"Returns status code \" + code, () => {                    ",
									"            pm.response.to.have.status(code);            ",
									"        });",
									"",
									"    };",
									"",
									"    util.responseContainsHeader = (headerName, headerValue) => {",
									"        pm.test(\"Response contains header \" + headerName + \" with value \" + headerValue, () =>{",
									"            pm.response.to.have.header(headerName);",
									"            pm.expect(postman.getResponseHeader(headerName)).to.equal(headerValue);",
									"        });",
									"    };",
									"",
									"    return util;",
									"} + '; assertThatUtil();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61aaf159-c55c-46f8-8cfe-73231bce1d49",
								"exec": [
									"var BuildHL7Patient = () => {\r",
									"    let givenName = 'Testing';\r",
									"\r",
									"    let patientBuilder = pm.variables.get('PatientBuilder');\r",
									"    if(patientBuilder) {        \r",
									"        givenName = (patientBuilder.hasGivenName == true || patientBuilder.hasGivenName == undefined)  ? givenName : undefined;        \r",
									"    }\r",
									"\r",
									"    /*create a random guid for messageid*/\r",
									"    let messageGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7messageGUID\", messageGUID);\r",
									"\r",
									"    /*create a random guid for rootid*/\r",
									"    let rootGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7rootGUID\", rootGUID);\r",
									"\r",
									"    /*create a random lastname*/\r",
									"    let family = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"    pm.variables.set(\"family\", family);\r",
									"    console.log(pm.variables.get(\"family\"))\r",
									"\r",
									"    /*create a random postCode*/\r",
									"    pm.variables.set(\"postCode\", \"HL12\" + \" \" + _.random(1, 9) + \"HL\");\r",
									"    console.log(pm.variables.get(\"postCode\"))\r",
									"\r",
									"    /*create a random birthDate*/\r",
									"    var moment = require('moment');\r",
									"    let randomYears = _.random(10, 50);\r",
									"    pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));\r",
									"    pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));\r",
									"    console.log(pm.variables.get(\"birthDate\"))\r",
									"\r",
									"    pm.globals.set(\"HL7PatientMessage\", '----=_MIME-Boundary' + '\\n' + 'Content-Id: <8e68e6bb-2044-44f1-9427-271bccdad97a>' + '\\n' + 'Content-Type: text/xml' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><SOAP:Envelope xmlns:xsi=\"http://www.w3c.org/2001/XML-Schema-Instance\" xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:eb=\"http://www.oasis-open.org/committees/ebxml-msg/schema/msg-header-2_0.xsd\" xmlns:hl7ebxml=\"urn:hl7-org:transport/ebxml/DSTUv1.0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><SOAP:Header><eb:MessageHeader SOAP:mustUnderstand=\"1\" eb:version=\"2.0\"><eb:From><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">RHM-812580</eb:PartyId></eb:From><eb:To><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">YES-0000806</eb:PartyId></eb:To><eb:CPAId>S20002A000236</eb:CPAId><eb:ConversationId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:ConversationId><eb:Service>urn:nhs:names:services:pds</eb:Service><eb:Action>PRPA_IN000200UK03</eb:Action><eb:MessageData><eb:MessageId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:MessageId><eb:Timestamp>2020-05-12T08:23:49</eb:Timestamp></eb:MessageData><eb:DuplicateElimination/></eb:MessageHeader><eb:AckRequested eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"urn:oasis:names:tc:ebxml-msg:actor:toPartyMSH\" eb:signed=\"false\"/><eb:SyncReply eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"http://schemas.xmlsoap.org/soap/actor/next\"/></SOAP:Header><SOAP:Body><eb:Manifest eb:version=\"2.0\"><eb:Reference xlink:href=\"cid:31321d7e-d449-40f2-8362-6598c5b3ffae\"><eb:Schema eb:location=\"http://www.nhsia.nhs.uk/schemas/HL7-Message.xsd\" eb:version=\"1.0\"/><eb:Description xml:lang=\"en\">HL7 payload</eb:Description><hl7ebxml:Payload style=\"HL7\" encoding=\"XML\" version=\"3.0\"/></eb:Reference></eb:Manifest></SOAP:Body></SOAP:Envelope>' + '\\n\\n' + '----=_MIME-Boundary' + '\\n' + 'Content-Id: <31321d7e-d449-40f2-8362-6598c5b3ffae>' + '\\n' + 'Content-Type: application/xml; charset=UTF-8' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><PRPA_IN000200UK03 xmlns=\"urn:hl7-org:v3\"><id root=\"' + pm.variables.get(\"HL7rootGUID\") + '\"/><creationTime value=\"20200512082349\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"PRPA_IN000200UK03\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><subject>\t\t\t<PdsRegistrationRequest classCode=\"REG\" moodCode=\"RQO\"><author typeCode=\"AUT\"><registeringAuthority classCode=\"ASSIGNED\"><code code=\"c\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.20\" /><id root=\"1.2.826.0.1285.0.2.1.54\" extension=\"TEST\" /></registeringAuthority></author><subject typeCode=\"SBJ\"><patientRole classCode=\"PAT\"><addr use=\"H\"><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><postalCode>' + pm.variables.get(\"postCode\") + '</postalCode></addr><patientPerson classCode=\"PSN\" determinerCode=\"INSTANCE\"><administrativeGenderCode code=\"2\" /><birthTime value=\"' + pm.variables.get(\"birthTime\") + '\" /><name use=\"L\">' + getGivenName() + '<family>' + pm.variables.get(\"family\") + '</family><prefix>Mr</prefix><suffix>Bsc</suffix></name><languageCommunication><languageCode code=\"hy\" /><preferenceInd value=\"true\" /><proficiencyLevelCode code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.39\" /></languageCommunication></patientPerson><subjectOf5 typeCode=\"SBJ\"><previousNhsContact classCode=\"OBS\" moodCode=\"EVN\"><code code=\"17\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.35\" /><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.38\" /></previousNhsContact></subjectOf5></patientRole></subject></PdsRegistrationRequest></subject></ControlActEvent></PRPA_IN000200UK03>' + '\\n\\n' + '----=_MIME-Boundary--')\r",
									"\r",
									"\r",
									"\r",
									"function getGivenName() {\r",
									"    if(givenName) {\r",
									"        return '<given>' + givenName + '</given>';\r",
									"    }\r",
									"}\r",
									"\r",
									"};\r",
									"pm.globals.set(\"BuildHL7Patient\", BuildHL7Patient.toString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c28f5e23-0a53-4f80-8256-97571bc28812",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "{{nhsd-asid-header}}",
								"type": "text",
								"value": "{{from_asid}}"
							},
							{
								"key": "{{nhsd-session-urid-header}}",
								"type": "text",
								"value": "{{role_id}}"
							},
							{
								"key": "{{nhsd-identity-uuid-header}}",
								"type": "text",
								"value": "{{user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "Testing the correct url is returned on an error response"
					},
					"response": []
				},
				{
					"name": "PDS Search & Retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d96e3a9f-9414-4c9f-b2c9-cea557d39383",
								"exec": [
									"/*This function Sends a PDS Search request to obbtain the Patient nhs Id & patient record version Id\r",
									"====================================================================================================*/\r",
									"\r",
									"var SendPDSSearch = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"        let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient?family=\" + pm.variables.get(\"family\") + \"&gender=female&birthdate=\" + pm.variables.get(\"birthDate\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader, correlationIdHeader }\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Search returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"nhsID\", response.json().entry[0].resource.id);\r",
									"            pm.globals.set(\"metaVersionId\", 'W/\"' + response.json().entry[0].resource.meta.versionId + '\"')\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().entry[0].resource.meta.versionId));\r",
									"            pm.variables.set(\"name.id\", response.json().entry[0].resource.name[0].id);            \r",
									"            console.log(\"meta version id of Patient is: \" + pm.globals.get(\"metaVersionId\"))\r",
									"            console.log(\"nhs id of Patient is: \" + pm.globals.get(\"nhsID\"))\r",
									"        });\r",
									"    }, 3000);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"SendPDSSearch\", SendPDSSearch.toString());\r",
									"\r",
									"\r",
									"/*Send a PDS Retrieve request to obbtain the Patient patient record version Id.\r",
									"=============================================================================*/\r",
									"\r",
									"var SendPDSRetrieve = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"        let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient/\" + pm.globals.get(\"nhsID\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader, correlationIdHeader }\r",
									"\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Retrieve returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"            console.log(\"Patient record version is: \" + pm.variables.get(\"versionId\"));\r",
									"            console.log(\"Patient record version is: \" + pm.globals.get(\"metaVersionId\"));\r",
									"            pm.variables.set(\"pdsRetrieveResponse\", response.json())\r",
									"            pm.environment.set(\"pdsRetrieveCounter\", 2)\r",
									"            console.log(pm.environment.get(\"pdsRetrieveCounter\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendPDSRetrieve\", SendPDSRetrieve.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7RetreivePatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef0faca0-be31-4713-98c1-31ff332f22f9",
								"exec": [
									"/*This function builds and sends a HL7 Retrieve request and saves the response to a global variable: \"HL7RetrieveResponse\" for the purposes of asserting the payload\r",
									"====================================================================================================================================================================*/\r",
									"\r",
									"var SendHL7RetrievePatientMessage = () => {\r",
									"    setTimeout(function () {\r",
									"        pm.globals.set(\"HL7RetrievePatientMessage\", '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:hl7=\"urn:hl7-org:v3\"><SOAP-ENV:Header><wsa:MessageID>uuid:82CC8716-71B7-44F3-B885-B18DD08B31AE</wsa:MessageID><wsa:Action>urn:nhs:names:services:pdsquery/QUPA_IN000008UK05</wsa:Action><wsa:To>https://10.239.9.7/sync-service</wsa:To><wsa:From><wsa:Address>10.210.164.11</wsa:Address></wsa:From><hl7:communicationFunctionRcv><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"928942012545\"/></hl7:device></hl7:communicationFunctionRcv><hl7:communicationFunctionSnd><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"230705069519\"/></hl7:device></hl7:communicationFunctionSnd><wsa:ReplyTo><wsa:Address>10.210.164.11</wsa:Address></wsa:ReplyTo></SOAP-ENV:Header><SOAP-ENV:Body><QUPA_IN000008UK05 xmlns=\"urn:hl7-org:v3\"><id root=\"D3C68B29-9533-45D6-837C-3375CFFE07D1\"/><creationTime value=\"20200511140552\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"QUPA_IN000008UK05\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><query><historicDataIndicator><semanticsText>HistoricDataIndicator</semanticsText><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.36\"/></historicDataIndicator><person.id><semanticsText>Person.id</semanticsText><value root=\"2.16.840.1.113883.2.1.4.1\" extension=\"' + pm.globals.get(\"nhsID\") + '\"/></person.id><retrievalItem><semanticsText>person.allData</semanticsText></retrievalItem></query></ControlActEvent></QUPA_IN000008UK05></SOAP-ENV:Body></SOAP-ENV:Envelope>')\r",
									"\r",
									"        var Header = require('postman-collection').Header;\r",
									"\r",
									"        /*set message headers*/\r",
									"        let contentType = new Header({\r",
									"            key: 'Content-Type',\r",
									"            value: 'application/xml'\r",
									"        });\r",
									"        let SOAPAction = 'urn:nhs:names:services:pdsquery/QUPA_IN000008UK05'\r",
									"\r",
									"        /*set message body*/\r",
									"        var xmlBody = pm.globals.get(\"HL7RetrievePatientMessage\")\r",
									"\r",
									"        /*send request with pre-defined headers and body*/\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + '/reliablemessaging/reliablerequest',\r",
									"            method: 'POST',\r",
									"            header: { contentType, SOAPAction },\r",
									"            body: xmlBody\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check HL7 Retrieve Patient returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            var response = xml2Json(response.text());\r",
									"            pm.globals.set(\"HL7RetrieveResponse\", response)\r",
									"            console.log(pm.globals.get(\"HL7RetrieveResponse\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendHL7RetrievePatientMessage\", SendHL7RetrievePatientMessage.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "378ae092-0387-46a7-878f-d9cafe1095a1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "SOAPAction",
								"type": "text",
								"value": "urn:nhs:names:services:pdsquery/QUPA_IN000008UK05"
							}
						],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildMeAPatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "311a6e2c-aa3d-4a7e-ae59-66edbda8e3a6",
								"exec": [
									"/* this function builds patches for the purposes of using in PDS Update patch requests when needed.  Each patch gets saved to a variable that is then called by createMeAPatchRequest\r",
									"=====================================================================================================================================================*/\r",
									"\r",
									"\r",
									"\r",
									"pm.globals.set('BuildMeAPatch', function BuildMeAPatch() {\r",
									"\r",
									"       addDeathNotificationPatch = () => {\r",
									"               let addDeathNotificationPatch = '{ \"patches\": [\t{ \"op\": \"add\", \"path\": \"/deceasedDateTime\", \"value\": \"2020-01-01\" }, { \"op\": \"add\", \"path\": \"/extension/-\", \"value\": { \"extension\": [ { \"url\": \"deathNotificationStatus\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"1\", \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\", \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\", \"version\": \"1.0.0\" } ] } }, { \"url\": \"systemEffectiveDate\", \"valueDateTime\": \"2020-02-27T16:14:58+00:00\" } ], \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\" } } ] }'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addDeathNotificationPatch.toString());\r",
									"       }\r",
									"\r",
									"       addNPAndReplaceMASAndRemoveDDPatch = () => {\r",
									"              let addNPAndReplaceMASAndRemoveDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"replace\",\"path\":\"/extension/1\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"}}}},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndReplaceMASAndRemoveDDPatch.toString());\r",
									"        }\r",
									"\r",
									"\r",
									"       addNPAndReplaceMASPatch = () => {\r",
									"              let addNPAndReplaceMASPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"replace\",\"path\":\"/extension/1\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndReplaceMASPatch.toString());\r",
									"        }\r",
									"\r",
									"       replaceNPAndRemoveMAS = () => {\r",
									"              let replaceNPAndRemoveMAS = '{\"patches\":[{\"op\":\"replace\",\"path\":\"/extension/0\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FH845\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FH845\"}}}},{\"op\":\"test\",\"path\":\"/extension/1/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/1\"}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", replaceNPAndRemoveMAS.toString());\r",
									"        }\r",
									"\r",
									"        addMSAndDDPatch = () => {\r",
									"              let addMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndDDPatch = () => {\r",
									"                let addNPAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}}]}'\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMASPatch = () => {\r",
									"                let addNPAndMASPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}}]}'\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMSAndDDPatch = () => {\r",
									"            let addNPAndMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPPatch = () => {\r",
									"            let addNPPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeDDPatch = () => {\r",
									"            let removeDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", removeDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASPatch = () => {\r",
									"            let removeMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPPatch = () => {\r",
									"            let removeNPPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPAndMASPatch = () => {\r",
									"            let removeNPAndMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASAndDDPatch = () => {\r",
									"            let removeMASAndDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeContactPreferencesPatch = () => {\r",
									"            let removeContactPreferencesPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/1/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"},{\"op\":\"remove\",\"path\":\"/extension/1\"}]}'\r",
									"         pm.variables.set(\"pdsPatch\", removeContactPreferencesPatch.toString());\r",
									"        }\r",
									"\r",
									"        addPreferredContactTimesPatch = () => {\r",
									"            let addPreferredContactTimesPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/1/extension/-\",\"value\":{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"}}]}'\r",
									"         pm.variables.set(\"pdsPatch\", addPreferredContactTimesPatch.toString());\r",
									"        }\r",
									"\r",
									"        addPreferredWrittenCommunicationFormatPatch = () => {\r",
									"            let addPreferredWrittenCommunicationFormatPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/1/extension/-\",\"value\":{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}}]}'\r",
									"         pm.variables.set(\"pdsPatch\", addPreferredWrittenCommunicationFormatPatch.toString());\r",
									"        }\r",
									"\r",
									"        addAllContactPreferencesPatch = () => {\r",
									"            let addAllContactPreferencesPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}]}}]}'\r",
									"         pm.variables.set(\"pdsPatch\", addAllContactPreferencesPatch.toString());\r",
									"        }\r",
									"\r",
									"        addPreferredContactTimesAndContactMethodPatch = () => {\r",
									"            let addPreferredContactTimesAndContactMethodPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/1/extension/-\",\"value\":{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"5\",\"display\":\"Minicom (textphone)\",\"system\":\"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"}]}}},{\"op\":\"add\",\"path\":\"/extension/1/extension/-\",\"value\":{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"}}]}'\r",
									"         pm.variables.set(\"pdsPatch\", addPreferredContactTimesAndContactMethodPatch.toString());\r",
									"        }\r",
									"\r",
									"        removePreferredContactMethodPatch = () => {\r",
									"            let removePreferredContactMethodPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/1/extension/0/url\",\"value\":\"PreferredContactMethod\"},{\"op\":\"remove\",\"path\":\"/extension/1/extension/0\"}]}'\r",
									"         pm.variables.set(\"pdsPatch\", removePreferredContactMethodPatch.toString());\r",
									"        }\r",
									"\r",
									"        removePreferredWrittenCommunicationFormatPatch = () => {\r",
									"            let removePreferredWrittenCommunicationFormatPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/1/extension/2/url\",\"value\":\"PreferredWrittenCommunicationFormat\"},{\"op\":\"remove\",\"path\":\"/extension/1/extension/2\"}]}'\r",
									"         pm.variables.set(\"pdsPatch\", removePreferredWrittenCommunicationFormatPatch.toString());\r",
									"        }\r",
									"} + '; BuildMeAPatch();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateMeAPatchRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9167275c-e07c-487d-ad5b-7b4ecbaa9c8d",
								"exec": [
									"/* This function creates Patch requests to be used as pm.send requests for the purposes of pre-requisites.\r",
									"=========================================================================================================*/\r",
									"\r",
									"\r",
									"var createMeAPatchRequest = () => {\r",
									"\r",
									"    var Header = require('postman-collection').Header;\r",
									"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
									"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
									"    let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
									"    let pdsPatch = pm.variables.get(\"pdsPatch\");\r",
									"\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
									"        method: 'PATCH',\r",
									"        header: {\r",
									"            authorization,\r",
									"            asidHeader,\r",
									"            sessionURIDHeader,\r",
									"            identityUUIDHeader,\r",
									"            contentType,\r",
									"            correlationIdHeader,\r",
									"            ifMatch\r",
									"        },\r",
									"        body: pdsPatch\r",
									"\r",
									"    }, function (err, response) {\r",
									"        pm.test(\"Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(202);\r",
									"        });\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"pm.globals.set(\"createMeAPatchRequest\", createMeAPatchRequest.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "relatedPersonMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7ba325d4-7f99-447f-bde1-ddc6d33dae93",
								"exec": [
									"var relatedPersonMappings = () => {\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"relatedPersonGiven\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"relatedPersonFamily\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPrefix\")) {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"relatedPersonPrefix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonSuffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"relatedPersonSuffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'use' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"});\r",
									"\r",
									"/*Check Patient use has been populated properly*/\r",
									"pm.test(\"Patient has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.patient.type).to.eql(\"Patient\");\r",
									"   \r",
									"   if (pm.variables.get(\"relatedPersonPatientID\")) {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(\"https://beta.api.digital.nhs.uk/Patient/\" + pm.variables.get(\"relatedPersonPatientID\"));\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.system).to.eql(\"https://beta.api.digital.nhs.uk\");\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.value).to.eql(pm.variables.get(\"relatedPersonPatientID\"));\r",
									"   }\r",
									"   else {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(undefined);\r",
									"      pm.expect(response.entry[0].resource.patient.identifier).to.eql(undefined);\r",
									"   }\r",
									"});\r",
									"\r",
									"/*Check Period Start has been populated properly*/\r",
									"pm.test(\"Period Start has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check Period End has been populated properly*/\r",
									"pm.test(\"Period End has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPeriodEnd\")){\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(pm.variables.get(\"relatedPersonPeriodEnd\"));\r",
									"    }\r",
									"});\r",
									"\r",
									" \r",
									"/*Check Relationship has been populated properly*/\r",
									"pm.test(\"Relationship has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonRelationshipType\") == \"brother\") {\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"BRO\");\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"brother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"child\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"CHILD\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"child\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"partner\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"DOMPART\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"domestic partner\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"relative\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FAMMEMB\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"family member\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"father\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"father\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"mother\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"MTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"mother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"next of kin\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"N\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"Next-of-Kin\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"parent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"PRN\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"parent\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipType not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[0].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Agent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Agent\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Agent of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Guardian\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Guardian\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Guardian of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Personal relationship\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Personal\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Personal relationship with the patient\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipClass not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[1].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-AdditionalRelatedPersonRole\");\r",
									"    \r",
									"    if  (pm.variables.get(\"relatedPersonRelationshipNOKDisplay\")) {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].code).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKCode\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].display).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKDisplay\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    }\r",
									"   else \r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2]).to.eql(undefined);\r",
									"});\r",
									"\r",
									"/*Check resourceType has been populated properly*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"RelatedPerson\");\r",
									"});\r",
									"\r",
									"/*Check Telecom Use has been mapped correctly*/\r",
									"pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"    let telecomUse;\r",
									"    switch (pm.variables.get(\"relatedPersontelecomUse\").toLowerCase()) {\r",
									"        case 'home':\r",
									"        case 'answering machine':\r",
									"            telecomUse = \"home\";\r",
									"            break;\r",
									"        case 'work':\r",
									"        case 'mobile':\r",
									"            telecomUse = pm.variables.get(\"relatedPersontelecomUse\");\r",
									"            break;\r",
									"        case 'pager':\r",
									"            telecomUse = \"mobile\";\r",
									"            break;\r",
									"        case 'temporary':\r",
									"            telecomUse = \"temp\";\r",
									"            break;\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomUse\") == \"emergency\") {\r",
									"        console.log(\"here\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(undefined, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period).to.eql(undefined);\r",
									"    }\r",
									"\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"relatedPersontelecomPeriodStart\")));\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomValue\")) {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"relatedPersontelecomValue\")));\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql(undefined);\r",
									"    }       \r",
									"});\r",
									"\r",
									"/*Check Telecom System has been mapped correctly*/\r",
									"pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"    let telecomType;\r",
									"\r",
									"    switch (pm.variables.get(\"relatedPersontelecomType\").toLowerCase()) {\r",
									"        case 'telephone':\r",
									"            telecomType = \"phone\";\r",
									"            break;\r",
									"        case 'fax':\r",
									"        case 'email':\r",
									"            telecomType = pm.variables.get(\"relatedPersontelecomType\");\r",
									"            break;\r",
									"        case 'textphone':\r",
									"            telecomType = \"other\";\r",
									"            break;\r",
									"        default:\r",
									"            pm.expect.fail(\"telecomType mapping failure\");\r",
									"            break;\r",
									"    }\r",
									"    pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomType\").toLowerCase() == \"textphone\") {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"    }\r",
									"});\r",
									"\r",
									"//Check Address Related items\r",
									"pm.test(\"Address has been mapped correctly\", function () {\r",
									"      \r",
									"      if (pm.variables.get(\"relatedPersonAddressLine\")) {\r",
									"          pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"relatedPersonAddressLine\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"relatedPersonPostalCode\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"      }\r",
									"      else \r",
									"          pm.expect(response.entry[0].resource.address).to.eql(undefined);\r",
									"    });\r",
									"\r",
									"//Check CorrespondenceIndicator Related items\r",
									"pm.test(\"CorrespondenceIndicator has been mapped correctly\", function () {\r",
									"    var CorrespondenseIndicator = getCorrespondenseIndicator();\r",
									"    \r",
									"    if ((pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"no\") || (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") === undefined)) {\r",
									"        pm.expect(CorrespondenseIndicator).to.eql(undefined);\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"yes\") {\r",
									"        pm.expect(CorrespondenseIndicator.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\");\r",
									"        pm.expect(CorrespondenseIndicator.valueBoolean).to.eql(true);\r",
									"    }\r",
									"   else pm.expect.fail(\"Correspondence Indicator has not been mapped correctly\");\r",
									"});\r",
									"\r",
									"//Check Contact Preference \r",
									"pm.test(\"Contact Preferred Method has been mapped correctly\", function () {\r",
									"    var contactPreference = getContactPreference();\r",
									"    \r",
									"    if (contactPreference) {\r",
									"        pm.expect(contactPreference.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\");\r",
									"        pm.expect(contactPreference.extension[0].url).to.eql(\"PreferredContactMethod\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"email\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"4\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"E-mail\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"letter\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Letter\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"minicom\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"5\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Minicom (Textphone)\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"not telephone contact\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"8\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"No Telephone contact\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"sign language\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"7\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Sign Language\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"3\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone via proxy\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"6\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone contact via proxy\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"visit\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"2\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Visit\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact method has not been mapped correctly\");\r",
									"\r",
									"        pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Time has been mapped correctly\", function () {\r",
									"    var PreferredContactTimes = getContactPreferredTimes();\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes.url).to.eql(\"PreferredContactTimes\");\r",
									"        pm.expect(PreferredContactTimes.valueString).to.eql(pm.variables.get(\"relatedPersonPreferredContactTime\"));\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes).to.eql(undefined)\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Format has been mapped correctly\", function () {\r",
									"    var ContactPreferredCommsFormat = getContactPreferredCommsFormat();\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat.url).to.eql(\"PreferredWrittenCommunicationFormat\");\r",
									"        pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Large print\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"11\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Large print\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Braille\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"12\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Braille\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Audio tape\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"13\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Audio tape\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact format has not been mapped correctly\");\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat).to.eql(undefined)\r",
									"    }\r",
									"}); \r",
									"\r",
									"//Check language Related items\r",
									"pm.test(\"language Extention has been mapped correctly\", function () {\r",
									"    var languageExtension = getLanguageExtention(response.entry[0].resource.extension);\r",
									"    if (!pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"relatedPersonInterpreter\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"relatedPersonLanguage\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"relatedPersonLanguageDisplay\"));\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Rank Extention has been mapped correctly\", function () {\r",
									"    var ContactRankExtension = getContactRankExtension(response.entry[0].resource.extension);\r",
									"\r",
									"    \r",
									"    if (!(pm.variables.get(\"relatedPersonRank1\"))) {\r",
									"        pm.expect(ContactRankExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonRank\")) {\r",
									"        pm.expect(ContactRankExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\");\r",
									"        pm.expect(ContactRankExtension.valuePositiveInt).to.eql(pm.variables.get(\"relatedPersonRank1\"));\r",
									"    }\r",
									"    \r",
									"});\r",
									"\r",
									"function getContactRankExtension(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getCorrespondenseIndicator(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"        \t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\") {\r",
									"        \t\t\treturn extensions;\r",
									"        \t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"language\") {\r",
									"                        return extensions;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreference(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredTimes(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredContactTimes\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"            }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredCommsFormat(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredWrittenCommunicationFormat\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.variables.unset(\"relatedPersonPrefix\");\r",
									"pm.variables.unset(\"relatedPersonSuffix\");\r",
									"pm.variables.unset(\"relatedPersonLanguage\");\r",
									"pm.variables.unset(\"relatedPersonPreferredContactTime\");\r",
									"pm.variables.unset(\"relatedPersonLanguageDisplay\");    \r",
									"pm.variables.unset(\"relatedPersonInterpreter\");   \r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKCode\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKDisplay\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipType\");\r",
									"pm.variables.unset(\"relatedPersonAddressLine\");\r",
									"pm.variables.unset(\"relatedPersonPreferredWrittenCommsFormat\");\r",
									"pm.variables.unset(\"relatedPersonPatientID\");\r",
									"\r",
									"};\r",
									"\r",
									"\r",
									"pm.globals.set(\"relatedPersonMappings\", relatedPersonMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkSearchMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f900cadb-8534-4d6f-a7f1-a834fbb1466e",
								"exec": [
									"/*functions*/\r",
									"var checkSearchMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Meta version id mapping function\r",
									"pm.test(\"Meta 'versionId' has been mapped correctly\", function () {\r",
									"    console.log(\"expected metaVersionId = \" + (pm.variables.get(\"metaVersionId\")));\r",
									"    console.log(\"returned metaVersionId = \" + (response.entry[0].resource.meta.versionId));\r",
									"    pm.expect(response.entry[0].resource.meta.versionId).to.eql(pm.variables.get(\"metaVersionId\"));\r",
									"    }\r",
									");*/\r",
									"\r",
									"/*Check Name Related items*/\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"suffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"    pm.variables.unset(\"suffix\");\r",
									"}\r",
									"\r",
									");\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"// Check birth order is populated correctly\r",
									"pm.test(\"Birth Order is returned\", () => {\r",
									"    if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"        pm.expect(response.entry[0].resource.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"    }\r",
									"});\r",
									"pm.variables.unset(\"expectedBirthOrder\");\t\t\t\t\t\t\t\t\t\t   \r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.entry[0].resource.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"/*Check Address Related items*/\r",
									"\r",
									"/*address line mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('Address is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"addressLine\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*addressPeriodStart mapping function*/\r",
									"    pm.test(\"Address 'periodStart' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].period.start).to.eql((pm.variables.get(\"addressPeriodStart\")));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*addressPostCode mapping function*/\r",
									"    pm.test(\"Address 'PostCode' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*address.use mapping function*/\r",
									"    pm.test(\"Address 'Use' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"    }\r",
									"    );\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom or Contact is not displayed for Sensitive Patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.telecom).to.be.undefined;\r",
									"        pm.expect(response.entry[0].resource.contact).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \r",
									"    if (pm.variables.get(\"telecomType\")) {\r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\r",
									"\r",
									"\t   \r",
									"\r",
									"        /*telecom System mapping function*/\r",
									"\r",
									"        pm.test(\"Telecom 'System' has been mapped correctly\", function () {\r",
									"            let telecomType;\r",
									"             switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                case 'telephone':\r",
									"                    telecomType = \"phone\";\r",
									"                    break;\r",
									"                case 'fax':\r",
									"                case 'email':\r",
									"                    telecomType = pm.variables.get(\"telecomType\");\r",
									"                    break;\r",
									"                case 'textphone':\r",
									"                    telecomType = \"other\";\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect.fail(\"telecomType mapping failure\");\r",
									"                    break;\r",
									"            }\r",
									"            \r",
									"            if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.entry[0].resource.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"                }\r",
									"            \r",
									"            else {\r",
									"                pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r",
									"\t\t \r",
									"\t\t\t\t\t\t\t\t\t\r",
									"            }\r",
									"\t  \r",
									"\r",
									"            if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    \r",
									"        /*telecom use mapping function*/\r",
									"        pm.test(\"Telecom 'Use' has been mapped correctly\", function () {\r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                case 'emergency':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect.fail(\"telecomUse mapping failure\");\r",
									"                    break;\r",
									"            }\r",
									"            if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                pm.expect(response.entry[0].resource.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                pm.expect(response.entry[0].resource.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            }\r",
									"            else {\r",
									"                pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            }\r",
									"        });\r",
									"     }\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"  }\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"        console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"        console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"        var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"        if (!generalPractitionerValueExists) {\r",
									"            console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"        }\r",
									"        else if (generalPractitionerValueExists) {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"        }\r",
									"        pm.variables.unset(\"generalPractitionerValue\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"/*extention items*/\r",
									"\r",
									"/*DeathNotification Items*/\r",
									"\r",
									"/*DeathNotification ValueDateTime mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"DeathNotification is not displayed for a Sensitive patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.extension).to.equal(undefined);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"DeathNotification has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"deathNotificationValueDateTime\") !== \"\") {\r",
									"            pm.expect((response.entry[0].resource.extension[0].extension[1].valueDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deathNotificationValueDateTime\")));\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"deathNotificationValueDateTime\") === \"\") {\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.extension)).to.eql(undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"meta security object has been mapped correctly\", () => {\r",
									"    if (pm.variables.get('security.code')) {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal(pm.variables.get('security.code'));\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset('security.code');\r",
									"});\r",
									"\r",
									"};\r",
									"\r",
									"pm.globals.set(\"checkSearchMappings\", checkSearchMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkRetrieveMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "149ed972-232c-48a8-9ad1-aae4d7ccf5c4",
								"exec": [
									"var checkRetrieveMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    pm.expect(response.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    \r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"// Check birth order is populated correctly\r",
									"pm.test(\"Birth Order is returned\", () => {\r",
									"    if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"        pm.expect(response.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"    }\r",
									"});\r",
									"pm.variables.unset(\"expectedBirthOrder\");\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t\t \r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"prefix\")) {\r",
									"            pm.expect(response.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset(\"prefix\");\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"suffix\")) {\r",
									"        pm.expect(response.name[0].suffix).to.equal(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"// Check Meta.Security object is displayed for Sensitive Patients\r",
									"pm.test(\"Security object has been mapped correctly\", () => {\r",
									"    let securityCode = pm.variables.get(\"securityCode\");\r",
									"\r",
									"    if (securityCode) {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('R');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check deathNotificationExtension\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"deathNotificationStatus extension has been mapped correctly -  Only checked for a Sensitive Patient\", () => {\r",
									"        pm.expect(response.extension[0].extension[0].url).to.equal('deathNotificationStatus');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.equal('1', 'invalid code');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.equal(pm.variables.get(\"deathNotificationStatus.display\"));\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus', 'invalid system');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.equal('1.0.0', 'invalid version');\r",
									"        pm.expect(response.extension[0].url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus', 'invalid extension.url');\r",
									"    });\r",
									"}\r",
									"\r",
									"/*Check Address Related items*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Address for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        let expectedValue;\r",
									"        switch (pm.variables.get(\"addressType\")) {\r",
									"            case 'usual':\r",
									"                expectedValue = 'home';\r",
									"                break;\r",
									"            case 'work':\r",
									"                expectedValue = 'work';\r",
									"                break;\r",
									"            case 'correspondence':\r",
									"                expectedValue = 'billing';\r",
									"                break;\r",
									"            case 'temporary':\r",
									"                expectedValue = 'temp';\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"addressType mapped incorrectly\");\r",
									"        }\r",
									"\r",
									"        pm.expect(response.address[0].use).to.eql(expectedValue, \"invalid addressType\");\r",
									"        pm.expect(JSON.stringify(response.address[0].line)).to.eql(pm.variables.get(\"addressLine\"), \"invalud addressLine\");\r",
									"        pm.expect(response.address[0].period.start).to.eql(pm.variables.get(\"addressPeriodStart\"), \"invalid addressPeriodStart\");\r",
									"        pm.expect(response.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"), \"invalid postalCode\");\r",
									"\r",
									"        let addressPeriodEnd = pm.variables.get(\"addressPeriodEnd\") === undefined ? undefined : pm.variables.get(\"addressPeriodEnd\");\r",
									"        pm.expect(response.address[0].period.end).to.eql(addressPeriodEnd, \"invalid addressPeriodEnd\");\r",
									"\r",
									"        if (response.address[0].extension !== undefined) {\r",
									"            let paf = response.address[0].extension[0].extension[0];\r",
									"\r",
									"            pm.test(\"Address PAF Key extension has been mapped correctly\", () => {\r",
									"                pm.expect(paf.url).to.equal('type', 'invalid url');\r",
									"                pm.expect(paf.valueCoding.code).to.equal('PAF', 'invalud valueCoding.code');\r",
									"                pm.expect(paf.valueCoding.system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType', 'invalid valueCoding.system');\r",
									"                pm.expect(response.address[0].extension[0].url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey', 'invalid extension.url');\r",
									"            })\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.variables.unset(\"addressPeriodEnd\");\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom or Contact for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.telecom).to.be.undefined;\r",
									"        pm.expect(response.contact).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    if (pm.variables.get(\"telecomType\")) {\r",
									"        pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"            let telecomType;\r",
									"\r",
									"                switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                    case 'telephone':\r",
									"                        telecomType = \"phone\";\r",
									"                        break;\r",
									"                    case 'fax':\r",
									"                    case 'email':\r",
									"                        telecomType = pm.variables.get(\"telecomType\");\r",
									"                        break;\r",
									"                    case 'textphone':\r",
									"                        telecomType = \"other\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomType mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"                }\r",
									"\r",
									"                else {\r",
									"                pm.expect(response.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                    pm.expect(response.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"                }\r",
									"        });\r",
									"        pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"            }\r",
									"            if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                pm.expect(response.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                pm.expect(response.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            }\r",
									"            else {\r",
									"                pm.expect(response.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                pm.expect(response.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            } \r",
									"        });\r",
									"    }\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"  }\r",
									"\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"    if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"        console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"        pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"    } else {\r",
									"        console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(response.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"generalPractitionerValue\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"});\r",
									"\r",
									"/*nominatedPharmacy mapping function*/\r",
									"pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"    let nominatedPharmacyExists = (pm.variables.get(\"nominatedPharmacy\"));\r",
									"    let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"    if (!nominatedPharmacyExists) {\r",
									"        pm.expect(nominatedPharmacyExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"nominatedPharmacy has been set for the patient so nominatedPharmacy should be returned\");\r",
									"        pm.expect(nominatedPharmacyExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"nominatedPharmacy\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\",\"invalid system\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"nominatedPharmacy\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"nominatedPharmacy\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodStart\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodEnd\");\r",
									"});\r",
									"\r",
									"\r",
									"/*dispensingDoctor mapping function*/\r",
									"pm.test(\"dispensingDoctor has been mapped correctly\", function () {\r",
									"    let dispensingDoctorExtension = response.extension === undefined ? undefined : getDispensingDoctor(response.extension);\r",
									"    let dispensingDoctorExists = pm.variables.get(\"dispensingDoctor\");\r",
									"\r",
									"    if (!dispensingDoctorExists) {\r",
									"        pm.expect(dispensingDoctorExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"dispensingDoctor has been set for the patient so dispensingDoctor should be returned\");\r",
									"        pm.expect(dispensingDoctorExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"dispensingDoctor\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"dispensingDoctor\")));\r",
									"    }\r",
									"    pm.variables.unset(\"dispensingDoctor\");\r",
									"    pm.variables.unset(\"dispensingDoctorPeriodStart\");\r",
									"});\r",
									"\r",
									"/*medicalApplianceSupplier mapping function*/\r",
									"pm.test(\"medicalApplianceSupplier has been mapped correctly\", function () {\r",
									"    let medicalApplianceSupplierExtension = response.extension === undefined ? undefined : getMedicalApplianceSupplier(response.extension);\r",
									"    let medicalApplianceSupplierExists = pm.variables.get(\"medicalApplianceSupplier\");\r",
									"\r",
									"    if (!medicalApplianceSupplierExists) {\r",
									"        pm.expect(medicalApplianceSupplierExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"medicalApplianceSupplier has been set for the patient so medicalApplianceSupplier should be returned\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"medicalApplianceSupplier\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"medicalApplianceSupplier\")));\r",
									"    }\r",
									"    pm.variables.unset(\"medicalApplianceSupplier\");\r",
									"    pm.variables.unset(\"medicalApplianceSupplierPeriodStart\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"language Extention has been mapped correctly\", () => {\r",
									"    let languageExtension = response.extension === undefined ? undefined : getLanguageExtention(response.extension);\r",
									"    let language = pm.variables.get(\"language\");\r",
									"\r",
									"    if (!language) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"language\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"languageDisplay\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"interpreter\"));\r",
									"        pm.expect(languageExtension.url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSCommunication', 'invalid url');\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"language\");\r",
									"    pm.variables.unset(\"languageDisplay\");\r",
									"    pm.variables.unset(\"interpreter\");\r",
									"\r",
									"});\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    for (let extensions of response.extension) {\r",
									"        try {\r",
									"                for (let e of extensions.extension) {\r",
									"                    if (e.url == \"language\") {\r",
									"                    console.log(e);\r",
									"                    return extensions;\r",
									"                    }       \r",
									"                 }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"}\r",
									"\r",
									"\r",
									"function getDispensingDoctor(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"\t\t\t\t\t\tconsole.log(\"dispensingDoctorExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getNominatedPharmacy(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"\t\t\t\t\t\tconsole.log(\"nominatedPharmacyExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getMedicalApplianceSupplier(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t    console.log(extensions)\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"\t\t\t\t\t\tconsole.log(\"medicalApplianceSupplierExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"};       \r",
									"\r",
									"pm.variables.set(\"s-flagged\",false);\r",
									"pm.globals.set(\"checkRetrieveMappings\", checkRetrieveMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HL7RetrieveResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2e23c8a-46a4-4fa8-bfd0-ba72eee0be2e",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('HL7ResponseValidator', function HL7ResponseValidator() {\r",
									"\r",
									"    let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
									"    let message = {};\r",
									"    \r",
									"    /*check GeneralPractice has been populated correctly*/\r",
									"        message.assertHL7GeneralPracticeIs = (gp) => {\r",
									"        pm.test(\"Check HL7 Response General Practice = \" + gp, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code).to.eql(gp);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralPracticeCodeIs = (gpValue) => {\r",
									"        pm.test(\"Check HL7 Response General Practice Code = \" + gpValue, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(gpValue);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralstartDateIs = (startDate) => {\r",
									"        pm.test(\"Check HL7 Response General Practice startDate = \" + startDate, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.effectiveTime.low.$.value).to.eql(startDate);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertHL7GenderIs = (Gender) => {\r",
									"        pm.test(\"Check HL7 Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000209UK01.PartAdminGenderCode\"].partPerson.administrativeGenderCode.$.code).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertHL7DateOfBirthIs = (DOB) => {\r",
									"        pm.test(\"Check HL7 Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000210UK01.PartBirthTime\"].partPerson.birthTime.$.value).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertHL7DateOfDeathIs = (DOD) => {\r",
									"        pm.test(\"Check HL7 Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].partPerson.deceasedTime.$.value).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification Date has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationDateIs = (DND) => {\r",
									"        pm.test(\"Check HL7 Response Death Death Notification Date = \" + DND, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].subjectOf.notificationTime.value.$.value).to.eql(DND)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationIs = (DN) => {\r",
									"        pm.test(\"Check HL7 Response Death Notification  = \" + DN, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.subjectOf2.deathNotification.code.$.code).to.eql(DN)\r",
									"        });\r",
									"    }\r",
									"    return message;\r",
									"\r",
									"} + '; HL7ResponseValidator();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b31183c-2f91-4a15-89e5-8958b569a50b",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('PDSUpdateResponseValidator', function PDSUpdateResponseValidator() {\r",
									"\r",
									"    var response = pm.variables.get(\"pdsUpdateResponse\");\r",
									"    let message = {};\r",
									"   \r",
									"        /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the PoB has been populated correcty*/\r",
									"    message.assertPlaceOfBirthHasBeenUpdated = (POB) => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"        pm.test(\"Check PDS Update Response for Place of Birth\", () => {\r",
									"            // Check there are no duplications\r",
									"            pm.expect(actualBirthPlaceInfo.length).to.eq(1);\r",
									"\r",
									"            // Check the actual value is the same as the expected value\r",
									"            pm.expect(JSON.stringify(actualBirthPlaceInfo[0])).to.eq(JSON.stringify(POB));;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // Check place of birth has been remmoved\r",
									"    message.assertPlaceOfBirthHasBeenRemoved = () => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"    \r",
									"        pm.test(\"PDS Place of Birth has been removed\", () => {\r",
									"            pm.expect(actualBirthPlaceInfo[0]).to.eq(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"   // check the General Practice has been populated correctly\r",
									"    message.assertGeneralPracticeIs = (gpValue) => {\r",
									"        pm.test(\"PDS Update Response General Practice has been updated \" + gpValue, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.value).to.eql(gpValue);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertGeneralPracticeStartDate = (StartDate) => {\r",
									"        pm.test(\"PDS Update Response General Practice Start Date \" + StartDate, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql(StartDate);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertGenderHasBeenUpdated = (Gender) => {\r",
									"        pm.test(\"PDS Update Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response.gender).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertDateOfDeathHasBeenUpdated = (DOD) => {\r",
									"        pm.test(\"PDS Update Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response.deceasedDateTime.substr(0, 10)).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertDeathNotificationHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update Death Notification has been updated\", () => {\r",
									"            pm.expect(response.extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"            pm.expect(response.extension[0].extension[1].valueDateTime.substr(0, 10)).to.eql(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10));\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Meta Version Id has been populated correcty*/\r",
									"    message.assertVersionIdHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update VersionId has been updated\", () => {\r",
									"            let versionId = pm.globals.get(\"versionId\") + 1;\r",
									"            pm.expect(response.meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"        });\r",
									"    }\r",
									"\r",
									"        /*check the NominatedPharmacy has been populated correcty*/\r",
									"    let nominatedPharmacy = getNominatedPharmacy(response.extension);\r",
									"\r",
									"\r",
									"    message.assertNominatedPharmacyHasBeenUpdated = (expectedResponseNP) => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy is correct\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(expectedResponseNP);\r",
									"        });\r",
									"    }\r",
									"   \r",
									"    message.assertNominatedPharmacyHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy has been removd\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getNominatedPharmacy(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"                            console.log(\"nominatedPharmacyExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"    \r",
									"   /*check the MedicalApplianceSupplier has been populated correcty*/\r",
									"    let MedicalApplianceSupplier = getMedicalApplianceSupplier(response.extension);\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenUpdated = (expectedResponseMAS) => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier is correct\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(expectedResponseMAS);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier has been removd\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getMedicalApplianceSupplier(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"                            console.log(\"MedicalApplianceSupplierExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"   /*check the DispensingDoctor has been populated correcty*/\r",
									"    let DispensingDoctor = getDispensingDoctor(response.extension);\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenUpdated = (expectedResponseDD) => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor is correct\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(expectedResponseDD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor has been removd\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getDispensingDoctor(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"                            console.log(\"DispensingDoctorExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"    /*check the ContactPreferences has been populated correcty*/\r",
									"    let returnedContactPreferences = getContactPreference(response.extension);\r",
									"\r",
									"        message.assertContactPreferencesHaveBeenUpdated = (expectedContactPreferences) => {\r",
									"        pm.test(\"Check PDS Update Response Contact Preferences have been updated\", () => {\r",
									"            pm.expect(JSON.stringify(returnedContactPreferences)).to.eql(JSON.stringify(expectedContactPreferences));\r",
									"        });\r",
									"    }\r",
									"\r",
									"        message.assertContactPreferencesHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response ContactPreferences has been removd\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getContactPreference(extensions) {\r",
									"    \r",
									"        for (let extensions of response.extension) {\r",
									"            try {\r",
									"                if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\") {\r",
									"                    return extensions;\r",
									"                }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"\r",
									"\r",
									"    return message;\r",
									"\r",
									"} + '; PDSUpdateResponseValidator();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateMessageRetrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dff72997-dd06-46df-94f7-69276bde9d31",
								"exec": [
									"/*This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests*/\r",
									"\r",
									"/* This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests */\r",
									"\r",
									"pm.globals.set('PDSUpdateMessageRetrieve', function updateResponse() {\r",
									"    let methods = {};\r",
									"\r",
									"    // need to remove verifyErrorMsg param as it's no longer required\r",
									"    methods.retrieveMessage = (response, expectedErrorResponse) => {\r",
									"        let contentLocation = response.headers.get('Content-Location');\r",
									"\r",
									"        setTimeout(() => {\r",
									"            var Header = require('postman-collection').Header;\r",
									"            let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"            let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"            let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"            let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"            let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
									"\r",
									"            pm.sendRequest({\r",
									"                url: pm.environment.get(\"environment\") + contentLocation,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    authorization,\r",
									"                    asidHeader,\r",
									"                    sessionURIDHeader,\r",
									"                    identityUUIDHeader,\r",
									"                    correlationIdHeader\r",
									"                },\r",
									"\r",
									"            }, function (err, response) {\r",
									"                if (err) {\r",
									"                    console.warn('UpdateMessageRetrieve', err)\r",
									"                    throw new Error(\"An error occurred calling the polling endpoint\");\r",
									"                }\r",
									"\r",
									"                expectedErrorResponse ? validatePollingErrorResponse(response) : validatePollingMessage(response);\r",
									"            });\r",
									"        }, 1000);\r",
									"    }\r",
									"    return methods;\r",
									"\r",
									"    function validatePollingErrorResponse(response) {\r",
									"        pm.test(\"Check Polling Message Service does not Return Status code 200 for Error Response\", function () {\r",
									"            pm.expect(response.code).not.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateErrorResponse\", response.json())\r",
									"            pm.variables.set(\"pdsUpdateErrorResponseCode\", response.code)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function validatePollingMessage(response) {\r",
									"        pm.test(\"Check Polling Message Service Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateResponse\", response.json())\r",
									"            console.log(\"update Response set\")\r",
									"            console.log(pm.variables.get(\"pdsUpdateResponse\"))\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check PDS Update VersionId has been updated\", function () {\r",
									"            let versionId = pm.variables.get(\"versionId\") + 1;\r",
									"            console.log(\"calculated version id =\" + versionId)\r",
									"            console.log(\"returned version id =\" + response.json().meta.versionId)\r",
									"            pm.expect(response.json().meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"        })\r",
									"    }\r",
									"} + '; updateResponse();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Simple Search",
							"item": [
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "70776bd4-9aa5-4abe-8b22-163a512eb3aa",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													"pm.variables.set(\"expectedBirthOrder\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "839c4f32-f788-49e0-aea3-3d4dc931cba5",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1df5b6f4-1c39-4b15-aaa2-4e5f996a1bab",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Alias\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"1990-10-10\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Dr\");",
													"pm.variables.set(\"nameType\", \"alias\");",
													"pm.variables.set(\"addressType\", \"work\");",
													"pm.variables.set(\"telecomType\", \"fax\");",
													"pm.variables.set(\"telecomUse\", \"work\");",
													"pm.variables.set(\"given\", [\"John\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"bt Global services\",\"1 sovereign Street\",\"leeds\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"postalCode\", \"LS14BT\");",
													"pm.variables.set(\"patientId\", \"5900007820\");",
													"pm.variables.set(\"metaVersionId\", \"21\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"2342424234\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e27f1e0f-b395-4c44-9e3d-5c6e5c79abfe",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a71262f2-c137-4c85-b479-6eddc8e8736f",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Unknown\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2001-02-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lady\");",
													"pm.variables.set(\"nameType\", \"preferred\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"textphone\");",
													"pm.variables.set(\"telecomUse\", \"pager\");",
													"pm.variables.set(\"given\", [\"person\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"postalCode\", undefined);",
													"pm.variables.set(\"patientId\", \"5900007073\");",
													"pm.variables.set(\"metaVersionId\", \"4\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe74f3ce-1893-44ef-b6be-db93a1751140",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee67a802-319a-49a3-a3f7-fdc9463a7bde",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "15162e90-8e1e-482d-99ba-7282891fa88b",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"previous\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2008-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lord\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"email\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"someone\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"15 westwood ave\",\"eccleshill\",\"Bradford\",\"west yorkshire\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900019241\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb646229-cb44-44d9-9849-dbf3df13a521",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be2faa42-ab16-4492-b9c6-f4221d13a325",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"temporary\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2004-03-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Miss\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"mobile\");",
													"pm.variables.set(\"given\", [\"ned\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900008290\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09000000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6f2fd7b-7d71-4009-92a6-3870e4e29716",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "139b3539-b07f-4d58-8216-b093cdd0f886",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mister\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"2009-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mr\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"temporary\");",
													"",
													"pm.variables.set(\"given\", [\"Any\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900005798\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33af45c7-ff0c-40be-bd5e-723af86be370",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "217e627c-fda2-406f-b433-bbabc24d8791",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Answermachine\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2007-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mrs\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
													"",
													"pm.variables.set(\"given\", [\"another\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900000605\");",
													"pm.variables.set(\"metaVersionId\", \"5\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09234567\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Answering Machine\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4971d64-8818-4c97-a223-644f8c9d97a1",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "069a4e5a-d182-4bee-98c2-36a64c6e1b7a",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Emergency\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2004-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Emergency\");",
													"",
													"pm.variables.set(\"given\", [\"Emma\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900013863\");",
													"pm.variables.set(\"metaVersionId\", \"2\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000001\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & DOD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "14910a9a-09b4-4537-aaf0-0f2632232252",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad699a91-819c-44eb-b840-52f2638fcc3d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family, DOD & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "410b59e7-8a40-426f-90e8-f80cd911849a",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "325711d2-8e80-4fa3-8212-881c788b412d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b5810282-a44d-4b0f-b97f-3a538624fa78",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c7fe3b50-34c9-4014-be89-0cd8739997e6",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - Postcode Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bc37772a-18d9-4acd-9d77-04c96c1145e0",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P2'",
													"    },",
													"    {",
													"        test: 'Correct Postcode & GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode & Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P1&general-practitioner=Y00007'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51443f78-e9e8-4cd6-876d-857497592674",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\n\nValidate that simple search takes into account address-postcode, when performing a search so that;\n- Simple search which includes postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes postcode where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from postcode matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - GP Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f2363def-de41-4fb8-ae1c-5c85f74d229e",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00001'",
													"    },",
													"    {",
													"        test: 'Incorrect GP & correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00001'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55c45655-67ba-481e-a6bc-5b987dfa4b19",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\nValidate that simple search takes into account general-practitioner, when performing a search so that;  \n- Simple search which includes general-practitioner where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from general-practitioner matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - Sensitive Patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "311a87bf-5b25-409a-8b9d-c560fcc520c2",
												"exec": [
													"/*set variables for test*/",
													"pm.variables.set(\"s-flagged\", true);",
													"",
													"pm.variables.set(\"family\", \"Middleton\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2000-01-01\");",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"pm.variables.set(\"prefix\", \"Baroness\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Cynthia\",\"Cindy\"]);",
													"pm.variables.set(\"suffix\", [\"Brnss\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-31\");",
													"pm.variables.set(\"patientId\", \"5900018512\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"deceasedDateTime\", \"2009-05-01\");",
													"pm.variables.set(\"security.code\", \"R\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2242f84e-5564-446f-beb3-d73060a5a5e6",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"pm.variables.set(\"s-flagged\", false);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Historic Search",
							"item": [
								{
									"name": "Historic Search - search with wildcarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "485b92f1-034c-4564-92bb-e97f4944da92",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\",  undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1c9f5157-e9a5-4a2c-b535-5718924b7a3d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'family' name will return the patient with current name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6fe1d774-3e48-4c5a-9580-fa27a18a4e5f",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a577330e-a7e5-4251-9c12-2b43fbfce1e1",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{family}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{family}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given and historic name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c5150d08-9642-44bc-b88b-021c256a9984",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50c38fa0-2933-410e-b17c-2dbed5eebefa",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' and 'family' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ac77d3ee-3022-454f-b2ae-cd963f67177a",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "590097cf-8b0d-4fb3-a5dd-1d05ef360a2d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'family' name will return the patient with current 'family' name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3b718019-9783-44dd-b824-61063ac62a15",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "94c9fec5-5ba2-4c0d-bd1e-57c275d75b2b",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&given={{historicGiven}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "given",
													"value": "{{historicGiven}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildcarded Historic given and family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a2314cae-7f11-4cf8-b3e9-56f7f193fd1b",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34f7459e-3f0f-4c86-a0d6-8fc271e185dc",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Advanced Search",
							"item": [
								{
									"name": "date range tests",
									"item": [
										{
											"name": "DOD Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOD between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "48d8b808-547c-4bda-ad95-20752d95840a",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d3109b5b-03fc-4120-a374-73bfff11ab28",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOD falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d958b41e-8df8-4d55-bc5f-ee5b4ca1ecdc",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e3d2ec27-3801-4593-b5b7-1f29cbaeb459",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "34549dd1-065c-45ac-8405-65fa49baed6f",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-02&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "95ccd68f-a332-4b67-865b-dad62c6042b8",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4ac0210f-66f3-4eee-82fd-751446f11e28",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-03&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6ec11715-b7bc-455d-9314-7ed812249e24",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bcc46d47-903d-4208-b1ab-0e8a496291cb",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "793060e5-816e-4c36-a325-aac88630e54a",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "DOB Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOB between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16f45f05-5116-4ece-b70f-cc646a6851df",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6fd466e6-bbfd-4794-9470-1ce4709c2b4c",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e3b0dd-6a45-4d2c-89be-ac2eea24241e",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f722a5fb-194e-498a-a858-5d15a67027fe",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7b1baedb-7baa-4edd-93c8-298f5ceef9eb",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2010-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d13111fa-f8ad-4e41-9c63-b9b9318e64f7",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5ee0fb19-6137-4961-a25d-dcfa4dcf6a8d",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-02&birthdate=le2011-01-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6c2ce3ab-b066-4d6b-b93e-61724db84c34",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "91815264-411e-4b09-be9e-6fdb6216dc4b",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2009-12-31\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "447e74fe-0332-4ad3-9ffa-1ea1b9ff1b61",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "exact-match",
									"item": [
										{
											"name": "All patients are returned when search query matches many patients all with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7df36d9e-7d5d-424e-a290-124efbd1d30f",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns all patients with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    scores.forEach(score => {",
															"        pm.expect(score).to.equal(1);        ",
															"    });",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2020-02-11&family=length&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns all patients from a search which matched multiple patients all with a score =1"
											},
											"response": []
										},
										{
											"name": "Only patients with a score of 1 are returned when search query matches many patients",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "171ced45-af42-4cf6-b491-52a4d805a4b4",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 1 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    pm.expect(scores).to.have.lengthOf(1);",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to true returns only those patients with a score of 1 from a search which matched multiple patients with scores >0 and <=1"
											},
											"response": []
										},
										{
											"name": "0 patients are returned when search query matches 0 patients with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d184197b-f066-409c-a37f-13158714b032",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 0 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "len*"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns 0 patients from a search which matched multiple patients all with a score <1"
											},
											"response": [
												{
													"name": "0 patients returned respose",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_exact-match",
																	"value": "true"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "len*"
																},
																{
																	"key": "gender",
																	"value": "male"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:01:42 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "123"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"484cd9e73bb551f9156572bd7c3379a45d286549\""
														}
													],
													"cookie": [],
													"body": "{\n    \"entry\": [],\n    \"resourceType\": \"Bundle\",\n    \"timestamp\": 1582794102,\n    \"total\": 0,\n    \"type\": \"searchset\"\n}"
												}
											]
										},
										{
											"name": "Exact match as false returns all matched patients regardless of score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f09e1aee-915a-4ea2-9cc7-0b35de328a72",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"var scores = util.getScores();    ",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 3 patients in total\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(3);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score < 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4ed2f26a-af5b-466e-9066-3fd9bee0380c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to false returns all patients from a search matching multiple patients with scores > 0 and <=1"
											},
											"response": []
										}
									],
									"description": "Every result includes a score from 0 to 1.\n\nScores less than 1 can happen when parameters supplied do not exactly match the values on the patient record. Results are sorted best-first. You can request to only return exact matches (score = 1) using the _exact-match parameter.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76bfc441-7f10-41b0-b6fb-3cdea95a1c5d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ae1af55-701f-4adb-ae5d-817a562c28d9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fuzzy-match",
									"item": [
										{
											"name": "Mismatching General Practitioner reduces match score against search without General Practitioner",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dcf3e433-86c2-4c3e-997d-9b5f3885ce8b",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1f2ca645-6b41-4ebd-85e0-36a92f69a145",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900002365\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900002365');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy&general-practitioner=A200",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														},
														{
															"key": "general-practitioner",
															"value": "A200"
														}
													]
												},
												"description": "Validates a mismatching General Practitioner reduces the amtch score against the same search without General Practitioner"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles transposed family names",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8cdc0105-1ba3-4ccf-9c02-e1fa3156a9d0",
														"exec": [
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"// Send request with _fuzzy-match=false to make sure no patients are returned",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
															"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
															"        pm.expect(res.json().total).to.equal(0);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "29a4fe5d-5560-4416-88a1-52036dba02f3",
														"exec": [
															"var response = pm.response.json().entry[0];",
															"",
															"pm.test('@Ater: fuzzy-match set to true returns status code 200', () =>{",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Returns 1 patient', () => {",
															"    pm.expect(pm.response.json().total).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900004171\", () =>{",
															"   pm.expect(response.resource.id).to.equal('5900004171');",
															"});",
															"",
															"pm.test(\"Returns patient with family name 'David'\", () => {",
															"    pm.expect(response.resource.name[0].family).to.equal(\"David\");",
															"});",
															"",
															"pm.test(\"Returns patient with given name 'James'\", () => {",
															"    pm.expect(response.resource.name[0].given).to.contain('James');",
															"});",
															"",
															"pm.test(\"Returns patient with birthdate=2000-01-01\", () =>{",
															"    pm.expect(response.resource.birthDate).to.equal('2000-01-01');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "James"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "If no patients are matched, using fuzzy-match a check is performed for transposed names such as Adam Thomas and Thomas Adam (family and given names). This test asserts that when doing a fuzzy-match search, patients with transposed names are successfully matched"
											},
											"response": []
										},
										{
											"name": "Mismatching Date of Death reduces match score against same search without Date of Death",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b075ff1b-2d00-453e-987d-1ea2c6521454",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5d770de1-fdf6-4442-b668-b8cb4723de2a",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let initialScore = pm.variables.get(\"initialScore\");",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(initialScore).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&death-date=2020-02-01&family=length&birthdate=2020-02-11&given=Selena",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "death-date",
															"value": "2020-02-01"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "given",
															"value": "Selena"
														}
													]
												},
												"description": "Validate that a fuzzy-search using a mismatching date of death reduces the match score against the same search without a date of death"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles family name homophone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7adaa062-84e3-4f4b-8b02-7ea190ecc7fc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4e2529db-2b60-4135-a95c-f7cee772c9d6",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns 3 patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.eql(3);",
															"});",
															"",
															"pm.test(\"Returns both patient Steven and Stephen\", () => {",
															"    let names = getFamilyNameOfAllPatients();",
															"    pm.expect(names).to.contain(\"Steven\");",
															"    pm.expect(names).to.contain(\"Stephen\");",
															"    ",
															"});",
															"",
															"",
															"",
															"// Retrieves the family name of all patients",
															"function getFamilyNameOfAllPatients() {",
															"    var names = [];",
															"",
															"    for(i = 0; i < response.entry.length; i++) {",
															"        names.push(response.entry[i].resource.name[0].family);",
															"    }",
															"",
															"    return names;",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Fuzzy search  returns valid response when using minimum search plus non mandatory",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73ad42d6-305e-4d9d-bf48-0e4d81ce2a56",
														"exec": [
															"pm.variables.set('params', params = [",
															"   ",
															"    // Requests using just mandatory parameters required for a fuzzy search",
															"    { parameter: \"DOB, Family & Given\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&family=leng&address-postcode=DN16 6BB', expected: 200 },",
															"    { parameter: \"Gender, DOB, Given & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena', expected: 200 },",
															"",
															"    // Requests using bpth mandatory and extra valid parameters for a fuzzy search",
															"    { parameter: \"DOB, Family, Given & Postcode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=len&address-postcode=DN16&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family, PostCode & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena&family=len', expected: 200 }",
															"]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e53e22cb-bbdf-493a-aca9-cafde623b367",
														"exec": [
															"var response = pm.response.json();",
															"",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"let params = pm.variables.get('params');",
															"",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"        }",
															"    }, function (err, res) {",
															"        console.log(\"Response for \" + p.parameter, res.json());",
															"",
															"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
															"            pm.expect(res.code).to.equal(p.expected);",
															"        });",
															"",
															"        if (p.expected === 400) {",
															"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
															"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('FUZZY_CRITERIA_NOT_MET', 'invalid code');",
															"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal('A fuzzy search was requested however the data given did not meet the fuzzy search criteria', 'invalid display message');",
															"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
															"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
															"            });",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "FuzzyYYYYYY"
														}
													]
												},
												"description": "Validates search parameter combinations for a fuzzy search\n- Minimum parameters combinations return a 200 response\n-- given name, family name and date of birth\n-- family name, date of birth, gender and postcode\n-- given name date of birth, gender and postcode\n\n- Mandatory plus non-mandatory parameter combinations return a 200 response\n-- DOB, Family, Given & Postcode\n-- Gender, DOB, Family, PostCode & Given"
											},
											"response": []
										}
									],
									"description": "The search will perform phonetic matching on names using soundex, transpose names, and score the results. If the fields death-date or general-practitioner are provided they will be ignored in this search. This search is performed using a combination of parameters. If an invalid combination is supplied _INVALID_COMBINATION_ will be returned.\n\n- Matching common homophones, such as ‘Smith’ and ‘Smythe’\n- Checking for transposed names, such as ‘Adam Thomas’ and ‘Thomas Adam’\n- Phonetic matching using soundex\n\n",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "result scoring",
									"item": [
										{
											"name": "Search matching criteria exactly returns Patient with score = 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "47b6b561-3f4c-4ff5-94b5-97371dd0bcb6",
														"exec": [
															"let response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns 1 patient\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
															"});",
															"",
															"pm.test(\"Returns patient with Nhs Number 5900016528\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900016528');",
															"})",
															"",
															"pm.test(\"Returns score which is a number\", () => {",
															"    pm.expect(response.entry[0].search.score).to.be.a('number');",
															"});",
															"",
															"pm.test(\"Returns patient with score = 1\", () => {",
															"    pm.expect(response.entry[0].search.score).to.equal(1);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Toe&given=Mary&gender=male&birthdate=2001-10-10",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Toe"
														},
														{
															"key": "given",
															"value": "Mary"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2001-10-10"
														}
													]
												},
												"description": "Validate search which matches criteria exactly returns Patient with score of 1"
											},
											"response": []
										},
										{
											"name": "Simple Patient retrieval does not return a matched score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7a096be-4730-4e74-8dc0-3b90f77141ca",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns patient without a scoring\", () =>{",
															"    pm.expect(response).to.not.have.property('search');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient/5900016528",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016528"
													]
												},
												"description": "Validate a patient retrieve does not return a matched score"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score between 0 and 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5296edc8-7d55-46b1-8c73-0cf721959480",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns patients each with a score between 0 and 1\", () =>{",
															"    let scores = patient().getScores();",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.at.least(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "For a wildcard based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Matching score increases when being more specific with Search query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ed077e5-ed06-4807-92a9-63be96986a0b",
														"exec": [
															"var response = pm.response.json();",
															"let globalNhsNumber = response.entry[0].resource.id;",
															"let globalScore = response.entry[0].search.score;",
															"let highestScore = globalScore;",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"",
															"",
															"let params = [",
															"    { parameter: \"Post Code\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16 3*'},",
															"    { parameter: \"Family Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16*'},",
															"    { parameter: \"Given Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&given=Selena'},",
															"    { parameter: \"PostCode, Family and Given name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3*&given=Selena'}",
															"]",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"    }",
															"    }, function (err, res) {",
															"        let newScore = res.json().entry[0].search.score;",
															"        ",
															"        pm.test(\"Matching score increases when being more specific with \" + p.parameter + \" query parameter(s)\", () => {",
															"            console.log(\"Response for \" + p.parameter + \": \" + JSON.stringify(res.json()));",
															"            pm.expect(globalNhsNumber).to.be.equal(res.json().entry[0].resource.id, 'not the same patient as nhs numbers are different');",
															"            pm.expect(globalScore).to.be.below(newScore);",
															"        });",
															"        ",
															"        if(p.parameter != 'PostCode, Family and Given name') {",
															"            highestScore = newScore > highestScore ? newScore : highestScore;",
															"        } else {",
															"            pm.test(\"Matching score is at it's highest when being more specific with multiple query parameters (PostCode, Family and Given name)\", () => {",
															"                pm.expect(newScore).to.be.above(highestScore);",
															"            })",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "761c7b01-8262-42a7-b233-a95c454c78f8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														}
													]
												},
												"description": "Validates that the returned patients score increases when being more specific with the following search query parameters\n- Post Code\n- Family Name\n- Given Name\n- Multiple (Post Code, Family name and Given name)"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner increases match score against the same search without General Practitioner",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9a9ad644-23e3-4ce3-97dd-95de179b74a9",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691184087\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691184087');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6e6379c7-c62b-4d4e-8b59-ee9b8fda287c",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=le*&address-postcode=DN16*&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching general-practitioner increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death increases match score against the same search without Date of Death",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0445d96f-dc06-4a15-bb52-ce7c049b7d06",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b1e442fd-8d61-427a-aa34-a3fdd7752144",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching death-date increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50ee75c3-cf2f-48f3-a59b-c174fe9ede3e",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has remained at 1\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b20607f1-25c9-46ce-bd3f-184d1fe6bf56",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber, \"invalid patient data\");",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.expect(initialScore).to.equal(1, \"invalid patient data\")",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN16 3BB"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct death-date does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f38f8721-481d-4360-8a81-c85de792735d",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183986\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183986');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b3580bb1-1268-45f6-a3be-0b5b766371d1",
														"exec": [
															"const nhsNumber = '9691183986';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "88888"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN18 5DG"
														},
														{
															"key": "_fuzzy-match",
															"value": "true",
															"disabled": true
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct general-practitioner does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Fuzzy search returns multiple patients each with a matched score between 0 and 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "996c61bf-4102-4cc0-8a40-a6bf06f30216",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6faa039c-027e-4591-a4f2-fbcd83db8e31",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"let scores = patient().getScores();",
															"let numberOfPatients = patient().getTotalNumberOfPatients();",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(numberOfPatients).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Each patient has a score\", () =>{",
															"    pm.expect(numberOfPatients).to.equal(scores.length)",
															"});",
															"",
															"pm.test(\"Each score is a number\", () => {",
															"   scores.forEach(score => {",
															"       pm.expect(score).to.be.a('number');",
															"   }) ",
															"});",
															"",
															"pm.test(\"Each score is between 0 and 1\", () => {",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.above(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For a fuzzy-search based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score sorted by score best-first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1357e2e7-e492-416c-a3e3-6c8228159fda",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "40ed0154-74bd-4c77-b0ad-adb814a5cb8a",
														"exec": [
															"var chai = require(\"chai\");",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.be.above(1);",
															"});",
															"",
															"pm.test(\"Returns result scoring sorted best-first\", () => {",
															"    let scores = patientUtil.getScores();",
															"    ",
															"    for (i = 1; i < scores.length; i++) {",
															"        let previous = parseFloat(scores[i-1]);",
															"        let current = parseFloat(scores[i]);",
															"        pm.expect(current).to.be.at.most(previous);        ",
															"      }",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For alphanumeric searching, every result includes a score from 0 to 1. \n\nThis test is to validate that\n- Results are sorted best-first i.e. 1 to 0"
											},
											"response": []
										}
									],
									"description": "Every matched patient in the results list includes a score to indicate how closely the patient matched the search parameters. A score of 1.0 indicates an exact match. A score of less than 1.0 indicates a partial match. The result list is sorted in descending score order - best match first.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "other tests",
									"item": [
										{
											"name": "Multiple Wildcards permitted - family",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1fb10ba2-d777-4db4-a403-43ef2d5b056d",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "92952fc7-b284-47d9-a5ad-724abfec3744",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "general-practitioner",
															"value": "Y0001",
															"disabled": true
														}
													]
												},
												"description": "Multiple wildcards are permitted in family name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7198e1d4-cc3f-4c02-b04b-639362a50748",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "55efa478-f230-4e22-8d25-e3042880cf5e",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in given name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fd6fcc04-d547-4650-aa2b-014faadfd839",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0e610ae7-7f7b-470f-b264-354d2e08a53a",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in postCode"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - family, given & postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ccbbfeb5-26b5-42bd-9928-1721cf2a5d1a",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "afe81b69-ce68-4b02-b08c-59556f021752",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in family, given & postCode"
											},
											"response": []
										},
										{
											"name": "Search by Postcode ignores whitespacing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26345c21-0966-45ca-a978-49994b345bac",
														"exec": [
															"let testScenarios = pm.variables.get('testData');",
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"testScenarios.forEach(scenario => {",
															"    scenario.tests.forEach(testScript => {",
															"        console.log(\"Test Script: \" + testScript.name);",
															"        ",
															"        testScript.tests.forEach(t => {",
															"            let patientDetails;    ",
															"            let needToSetValues = true;",
															"            console.log(\"Query Type: \" + t.searchType);",
															"            ",
															"            pm.sendRequest({",
															"                url: pm.environment.get(\"environment\") + t.query,",
															"                method: 'GET',",
															"                header: {",
															"                    asidHeader,",
															"                    sessionURIDHeader,",
															"                    identityUUIDHeader,",
															"                    authorization",
															"                }",
															"            }, function (err, res) {            ",
															"                if (needToSetValues) {",
															"                    patientDetails = getNhsNumberAndInitialScore(res.json());                ",
															"                    needToSetValues = false;",
															"                }",
															"                pm.expect(res.code).to.equal(200, 'invalid response returned');",
															"                validateScoreRemainsTheSame(testScript.name + \" - \" + t.searchType, res.json(), patientDetails);",
															"            });",
															"        })",
															"    });",
															"});",
															"",
															"",
															"",
															"function getNhsNumberAndInitialScore(response) {",
															"    return {",
															"        nhsNumber: response.entry[0].resource.id,",
															"        score: response.entry[0].search.score",
															"    };",
															"}",
															"",
															"function validateScoreRemainsTheSame(testName, response, patientDetails) {",
															"    let newScore = response.entry[0].search.score;",
															"    pm.test(testName + ' returns patient ' + patientDetails.nhsNumber + ' with matching score of ' + newScore, () => {",
															"        pm.expect(response.entry[0].resource.id).to.equal(patientDetails.nhsNumber, \"unexpected patient record returned\");",
															"        console.log(testName + ' NHS Number ' + patientDetails.nhsNumber + ' with Score: ' + newScore);",
															"        pm.expect(patientDetails.score).to.equal(newScore);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b99b480-8479-4304-a216-04cafcf13829",
														"exec": [
															"let simple = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN16 3BB' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN163BB'}",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M32 8EX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M32 8XX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let algorithmic = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=length&given=Selena&address-postcode=DN16 3BB' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&family=length&birthdate=2020-02-11&&given=Selena&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M32 8EX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M32 8XX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let alphanumeric = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3BB' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M32 8EX' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8XX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=speake*&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spaci*&gender=female&address-postcode=DN112EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"",
															"pm.variables.set('testData', testScenarios = [",
															"    { tests: simple },",
															"    { tests: alphanumeric },",
															"    { tests: algorithmic }",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}",
													"host": [
														"{{environment}}"
													]
												},
												"description": "Validates white spaces in postcodes do not affect Searching i.e. you can search for a patient with the;\n- postcode DN163BB using both DN163BB and DN16 3BB\n- postcode DN16 3BB using both DN16 3BB and DN163BB"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Alphanumeric",
									"item": [
										{
											"name": "By General Practitioner",
											"item": [
												{
													"name": "Search using invalid General Practitioner returns INVALID_VALUE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c27acffd-ea0f-4ad8-b85f-90e7bdb19e0f",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"errorMessage\"));",
																	"",
																	"assertThatUtil().statusCodeIs(400);",
																	"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
																	"errorMessage().assertDisplayIs(\"Invalid value - '.' in field 'general-practitioner'\");",
																	"errorMessage().assertSeverityIs(\"error\");",
																	"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=.",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "."
																}
															]
														},
														"description": "Validate searching for a patient using an invalid general-practitioner value such as `.` returns an INVALID_VALUE error response"
													},
													"response": []
												},
												{
													"name": "Search using  General Practitioner returns no Patient record when no match is found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b9e25a47-ab6c-4b46-8cf8-4df987b8b104",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns 0 patients\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&family=Practitioner&general-practitioner=Y995894&birthdate=ge2000-01-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y995894"
																},
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "birthdate",
																	"value": "ge2000-01-01"
																}
															]
														},
														"description": "Validate no patient record is returned when performing a search using criteria including general-practitioner that does not match any patient."
													},
													"response": []
												},
												{
													"name": "Search using valid General Practitioner returns Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1c4ea279-35dc-449e-bcc8-4f82c6917736",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns one patient\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
																	"})",
																	"",
																	"pm.test(\"Returns patient with NHS Number 5900014061\", () => {",
																	"    pm.expect(pm.response.json().entry[0].resource.id).to.equal('5900014061');",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=Y00002",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y00002"
																}
															]
														},
														"description": "Validate patients record is returned when searching by general-practitioner"
													},
													"response": []
												}
											],
											"description": "Patient should be searchable by GP Provider using the query parameter *general-practitioner*.\n",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Search specifying GP of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6731490-b5c8-450c-b2e6-c1fce683d827",
												"exec": [
													"eval(pm.globals.get(\"patient\"));",
													"",
													"",
													"pm.test(\"Returns status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "393ac61c-ba9d-4ed4-8616-d9fd1c7b1471",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?gender=male&birthdate=2000-01-01&family=Ukraine',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Ukraine&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												},
												{
													"key": "_max-results",
													"value": "50",
													"disabled": true
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying GP which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1edc3f98-66e3-414f-82a4-05d7d8f3755a",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3fb01eb-d708-4a9c-b4a7-7da5e8d96e13",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90589d37-1bed-44c9-8d06-cb904188d290",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "feb9a961-534a-47f4-a58a-3e0f7d6daf36",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Ukraine&gender=male&address-postcode=B4 3PP",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "address-postcode",
													"value": "B4 3PP"
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6486705-6e32-47ac-a806-1b479e486b9c",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbe445a8-b395-44fa-b344-39252b16c873",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&address-postcode=B4*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "address-postcode",
													"value": "B4*"
												}
											]
										},
										"description": "NHS Numbers: 5900013553, 5900005194\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including sensitive patient does not return sensitive details for sensitive patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcacee5e-669a-4863-8480-3a52a62ab3ce",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 2 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(2);",
													"})",
													"",
													"pm.test(\"Returns sensitive patient\", () => {",
													"    pm.expect(response.entry[1].resource.id).to.equal('5900013553');",
													"});",
													"",
													"pm.test(\"Sensitive patients address is not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.address).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients telecome details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.telecom).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients GP details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.generalPractitioner).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the following sensitive details are not returned for the sensitive patient (gp, death-notification extension, address and telecom)"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including invalid patient does not return invalid patients record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abb12f59-6713-4fd3-bc31-18361af6f63e",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900006107')).to.be.false;",
													"});",
													"",
													"pm.test(\"Does return non-invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900003876')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd5da488-d947-470f-a6a0-4e3a40ff11dc",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=ge2000-01-01&family=invalidated",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "invalidated"
												}
											]
										},
										"description": "Invalidated NHS Patient number : 5900006107\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients record is not returned"
									},
									"response": []
								},
								{
									"name": "Search matching sensitive patient returns security object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef3abe4d-273f-4154-b315-7da0f8da4794",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Returns Sensitive patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900004430')).to.be.true;",
													"});",
													"",
													"pm.test(\"Returns Security object\", () => {",
													"    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('R', 'invalid code');",
													"    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted', 'invalid display');",
													"    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html', 'invalid system');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3d70a11d-cda7-4c8c-aa2b-7e03815fcf96",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=2001-02-01&family=sensitive",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2001-02-01"
												},
												{
													"key": "family",
													"value": "sensitive"
												}
											]
										},
										"description": "> GIVEN I perform a Search\nAND that matches a Sensitive patient\nWHEN I get the response  \nTHEN the Patients record includes the meta.security array  \nAND the array includes the **R** *restricted level*"
									},
									"response": []
								},
								{
									"name": "Search matching invalid patient only, results in patients data not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "154d5551-c776-4370-af18-0591b4c57660",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "03723343-cc90-4421-a5a4-67863e1e401e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Invalidated&gender=female&given=Patient",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Invalidated"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "given",
													"value": "Patient"
												}
											]
										},
										"description": "**NHS Number: 5900006107**\n\n> GIVEN I perform a Search  \nAND that matches one patient\nAND that patient is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients details are not returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Search invalid ASID - ACCESS_DENIED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dfc67b34-88d3-4fa1-a6c9-aa2892316fdc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "07cd2400-675d-4351-ad6a-ebc0069f51b5",
												"exec": [
													"// This test should not be executed against apigee direct as apigee automatically sends a valid asid header",
													"if (pm.environment.get('skipTest')) {",
													"    console.log('Skipping test when running via apigee');",
													"} else {",
													"    const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"    const error = eval(pm.globals.get(\"errorMessage\"));",
													"    assertThat.statusCodeIs(401)",
													"    error.assertCodeIs(\"ACCESS_DENIED\");",
													"    error.assertDisplayIs(\"Access Denied - Unauthorised\");",
													"    error.assertSeverityIs(\"error\");",
													"    error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "123456789"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=James&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "where an invalid ASID is passed into the request Header ACCESS_DENIED is returned"
									},
									"response": []
								},
								{
									"name": "Search invalid query parameters - INVALID_VALUE / INVALID_SEARCH_DATA / ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "505af8e1-9de2-401c-bee9-b99f8a0c1e69",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "149f2a38-1e65-401b-8fa9-7b83bb8fe1b7",
												"exec": [
													"pm.variables.set('testData', data = [",
													"   { name: \"Invalid Max_results value - blank\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '' in field '_max-results'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"      ",
													"   { name: \"Invalid Max_results value - 51\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '51' in field '_max-results'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=51&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"",
													"   { name: \"Invalid GP Practice format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '12*' in field 'general-practitioner'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=2000-01-01&given=David&gender=male&general-practitioner=12\\*'},",
													"",
													"   { name: \"Invalid Date Of DOD format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '01-01-2000' in field 'death-date'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&death-date=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Invalid Date Of DOB format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '01-01-2000' in field 'birthdate'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=%$£James&birthdate=2000-01-01&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as given\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=%$£David&gender=male'},",
													"      ",
													"    { name: \"Special characters in option based values such as gender\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - 'male$' in field 'gender'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$'},",
													"      ",
													"    { name: \"Special characters in option based values such as postcode\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - 'BD$ 2NB' in field 'address-postcode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&address-postcode=BD$ 2NB'},",
													"      ",
													"    { name: \"Special characters in ‘new unsupported fields’\", ",
													"      code: \"ADDITIONAL_PROPERTIES\", ",
													"      display: \"Invalid update with error - Additional properties are not allowed ('somethingnew' was unexpected)\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&somethingnew=fda'},",
													"      ",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male$"
												}
											]
										},
										"description": "##### Scenarios Tested\n- Invalid characters in Max_results\n- Invalid characters in General Practitioner\n- Invalid DOB format\n- Invalid DOD format\n- Special characters in option based values such as gender\n- Special characters in option based values such as postcode\n- Special characters in query parameter values such as family\n- Special characters in ‘new unsupported fields’\n\n\n\n\n> GIVEN I have a Search query containing special/invalid characters  \nWHEN I perform a Search  \nTHEN I should get the correct FHIR based error response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8087c523-b07e-4167-bc39-9dc90b4e328c",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid)",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient?' + scenario.query,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ADDITIONAL_PROPERTIES\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tif(pm.environment.get('skipTest')) {",
													"\t\t\t\t// Running against apigee therefore do not set an asid -- let apigee send a valid one directly",
													"\t\t\t\treturn undefined",
													"\t\t\t}",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5aa0fae2-91cf-452f-9b60-5cc7842655d3",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Valid asid/token and Invalid Search request\", asid: 'valid', query: 'faaaaamily=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid Search request\", asid: 'invalid', query: 'family=Smith&givvvvven=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthhhhdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending requests which have both a invalid asid and search query parameter, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of query param validation i.e. 400 Bad Request"
									},
									"response": []
								},
								{
									"name": "Search unrecognised query parameters - ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4856df0-fbd9-49aa-8aa0-c71ab81d7104",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"eval(pm.globals.get(\"errorMessage\"));",
													"const query = '/Patient?gender=male&birthdate=1925-02-11&family=smith&address-postcode=DN153PP&given=john&death-date=2020-02-11&general-practitioner=V0007'",
													"",
													"let params = [",
													"    { parameter: \"family\", queryParam: 'faamily' },",
													"    { parameter: \"given\", queryParam: 'giveeen' },",
													"    { parameter: \"gender\", queryParam: 'gendr' },",
													"    { parameter: \"birthdate\", queryParam: 'birthdat' },",
													"    { parameter: \"death-date\", queryParam: 'deathdate' },",
													"    { parameter: \"address-postcode\", queryParam: 'address-PostCod' },",
													"    { parameter: \"general-practitioner\", queryParam: 'general-practiner' },            ",
													"]",
													"",
													"params.forEach(p => {",
													"    let query = getQuery(p.parameter, p.queryParam);",
													"    console.log(\"Request url: \" + query);",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        let response = res.json();",
													"        console.log(\"Response: \" + response);",
													"        ",
													"        pm.test('Returns valid error response when misspelling parameter ' + p.parameter, () => {",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(getExpectedErrorMessage(p.queryParam));",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"            pm.expect(response.issue[0].severity).to.equal('error');",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
													"            ",
													"        })",
													"    })",
													"});",
													"",
													"",
													"function getExpectedErrorMessage(param) {",
													"    return 'Invalid update with error - Additional properties are not allowed (\\'' + param + '\\' was unexpected)';",
													"}",
													"",
													"function getQuery(parameter, replaceWith) {",
													"    console.log('Replacing ' + parameter + ' with ' + replaceWith);",
													"    return query.replace(parameter, replaceWith);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=length",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-02-11"
												},
												{
													"key": "family",
													"value": "length"
												}
											]
										},
										"description": "Passing in unrecognised search query parameters returns an ADDITIONAL_PROPERTIES error message which highlights which values were unrecognized"
									},
									"response": [
										{
											"name": "EXTRA_VALUE error response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-resultsA=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-matchB=false&_fuzzy-matchC=true",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-resultsA",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-matchB",
															"value": "false"
														},
														{
															"key": "_fuzzy-matchC",
															"value": "true"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 13:31:38 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "625"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('_exact-matchB', '_fuzzy-matchC', '_max-resultsA' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "Unrecognised search query parameter returns EXTRA_VALUE error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-match=false&_fuzzy-match=true&invalidHeader=true&anotherInvalidHeader=false",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-match",
															"value": "false"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "invalidHeader",
															"value": "true"
														},
														{
															"key": "anotherInvalidHeader",
															"value": "false"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:37:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "615"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query resulting in > max-results - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a6bfe95-6480-4434-bd09-68c116e42284",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=40&gender=male&birthdate=ge2020-01-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "40"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-01-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which matches more patients then the max-results value returns a *TOO_MANY_MATCHES* error"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search 1 character family name - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e3a76d4-d600-4695-bbe6-cac61cd4a785",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1798eed-25e9-456d-9cd2-9b97639df589",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "S*"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Attempt a _fuzzy_match_ using a family name of 1 character returns _FUZZY_CRITERIA_NOT_MET error"
									},
									"response": [
										{
											"name": "Fuzzy Search invalid search criteria",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:05:44 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "599"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"NO_SEARCHES_PERFORMED\",\n                        \"display\": \"No searches were performed as the search criteria did not meet the minimum requirements\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "FUZZY_CRITERIA_NOT_MET error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:59:27 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "605"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"FUZZY_CRITERIA_NOT_MET\",\n                        \"display\": \"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Fuzzy Search wildcarded family - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "23d2609f-3fe5-4589-a526-62687dfbbfd6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a870f24-7c07-44e6-9b97-96b179e5313f",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400)",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Ja\\*&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "Ja\\*"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "Validates wildcards are not allowed when performing a fuzzy-search"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search Invalid value in fuzzy_match parameter - INVALID_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df1cce56-f856-46a8-92b8-d8fb517cf059",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c5ec5c28-2b90-4fe2-882d-5e8e1e9cd5f7",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"",
													"error.assertCodeIs(\"INVALID_VALUE\");",
													"error.assertDisplayIs(\"Invalid value - 'test' in field '_fuzzy-match'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "test"
												},
												{
													"key": "family",
													"value": "Stephen"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Setting the _fuzzy-match_ value to `test` returns a *INVALID_VALUE* error message "
									},
									"response": [
										{
											"name": "fuzzy-match INVALID_VALUE response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "test"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:10:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "548"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - 'test' in field '_fuzzy-match'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search Invalid Leading Wildcards - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02104bc9-b8b1-44aa-bc23-926148a6971a",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=S\\*'},",
													"      ",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=\\*earch'},",
													"",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=\\*apping&gender=female&birthdate=2010-01-01&given=Search'},",
													"      ",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=M\\*&gender=female&birthdate=2010-01-01&given=Search'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'address.postalCode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=L\\*'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'address.postalCode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=\\*2AA'},",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "60457d65-c8d2-4af7-a925-42f196edd280",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&gender=female&birthdate=2010-01-01&given=\\*ane",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												},
												{
													"key": "given",
													"value": "\\*ane"
												}
											]
										},
										"description": "Invalid leading wildcards on given name, family name and postcode results in an error response"
									},
									"response": []
								},
								{
									"name": "Fuzzy search invalid combinations - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab9052db-dea7-4f6a-9a3e-ba5289454e8e",
												"exec": [
													"pm.variables.set('params', params = [",
													"   ",
													"    // Requests missing mandatory parameters required for a fuzzy search",
													"    { parameter: \"DOB & Family\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=le', expected: 400 },",
													"    { parameter: \"DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng*&address-postcode=DN16*', expected: 400 },",
													"    { parameter: \"Gender, DOB & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&&given=Selena', expected: 400 },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d3a7b7b-bf41-43e8-ae83-f4048edf5d11",
												"exec": [
													"var response = pm.response.json();",
													"",
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"let params = pm.variables.get('params');",
													"",
													"",
													"params.forEach(p => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + p.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        console.log(\"Response for \" + p.parameter, res.json());",
													"",
													"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
													"            pm.expect(res.code).to.equal(p.expected);",
													"        });",
													"",
													"        if (p.expected === 400) {",
													"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
													"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_SEARCH_DATA', 'invalid code');",
													"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
													"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
													"            });",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "FuzzyYYYYYY"
												}
											]
										},
										"description": "Validates search parameter combinations for a fuzzy search\n\n- Invalid combinations return a 400 response\n-- DOB & Family\n-- DOB, Family & PostCode\n-- Gender, DOB & Given"
									},
									"response": []
								},
								{
									"name": "Search missing mandatory fields - INVALID_SEARCH_DATA / MISSING_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "71336af9-d506-4b09-afe3-08b3914c8e6b",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"missing mandatory fields - Birth\", ",
													"      code: \"MISSING_VALUE\",",
													"      display: \"Missing value - 'birth_date/birth_date_range_start/birth_date_range_end'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female'},",
													"",
													"    { name: \"missing mandatory fields - Family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?gender=female&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Family & Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?birthdate=2010-01-01'}",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6ec6fdb8-6701-4d92-a256-f845620c5eba",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&birthdate=2010-01-01",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female",
													"disabled": true
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												}
											]
										},
										"description": "missing mandatory fields on simple search will result in a 400 error response:\n\n- missing DOB\n- missing Family\n- missing Gender"
									},
									"response": []
								},
								{
									"name": "Search query resulting in >50 patients - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58605fb7-b5c2-4d5f-8d00-982a493edf0f",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2019-02-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "50"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query No Match - NO_MATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f76d285-b6f9-4bec-a931-d833cde36280",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=Smith",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "Smith"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Performing a fuzzy search in combination with a histroic search returns INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "23b64b6c-be97-400d-b8b0-ad70752b1ef8",
												"exec": [
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"// Send request with _fuzzy-match=false to make sure no patients are returned",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {",
													"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
													"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
													"        pm.expect(res.json().total).to.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "98bc16ef-9acd-4bb4-aff1-df570df432a2",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'Performing a historic search and a fuzzy search at the same time is incompatible'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "Performing a fuzzy-search in conjunction with a historic search returns a 400 BAD REQUEST with the error INVALID_SEARCH_DATA"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Retrieve Patient - Error Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3047b41d-9b73-43d6-9762-ad76ac57d545",
												"exec": [
													"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
													"\r",
													"let scenario = pm.variables.get('scenario');\r",
													"let asidHeader = pm.variables.get(\"asidHeader\");\r",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
													"let authorization = pm.environment.get(\"authorizationHeader\");\r",
													"\r",
													"/*for each scenario dataSet loop the Retrieve Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
													"\r",
													"  scenario.forEach(s => {\r",
													"    console.log(\"scenario under test is: \" + s.desc);\r",
													"\r",
													"   pm.sendRequest({\r",
													"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id,\r",
													"        method: 'GET',\r",
													"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
													"        \r",
													"    }, function (err, res) {\r",
													"        let response = res.json();\r",
													"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
													"            pm.expect(res.code).to.equal(s.responseStatus);\r",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
													"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
													"            \r",
													"        })\r",
													"    })\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c17e23f-08b2-4bb7-a7d0-207fa976bea5",
												"exec": [
													"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ \r",
													"  \r",
													"   let scenario = [\r",
													"       {desc: \"INVALIDATED_RESOURCE - invalidated NHS number (sensetive patient)\",  \r",
													"        nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\",  \r",
													"        nhs_id: \"9000000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - too short\", \r",
													"        nhs_id: \"900000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"      {desc: \"PATIENT_NOT_FOUND - NHS Number Does Not Exist\", \r",
													"        nhs_id: \"9111231130\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"not-found\", \r",
													"        responseSeverity: \"information\", \r",
													"        responseCode: \"RESOURCE_NOT_FOUND\", \r",
													"        responseDisplay: \"Resource not found\"},\r",
													"        \r",
													"        {desc: \"INVALID_NHS_NUMBER - not passed in\", \r",
													"        nhs_id: \"\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"RETRIEVAL_UNSUPPORTED\", \r",
													"        nhs_id: \"9111231130/nationality\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"INVALIDATED_NHS_NUMBER\", nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"} \r",
													"       ]\r",
													"       \r",
													"    pm.variables.set('scenario', scenario); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/:nhs_id",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												":nhs_id"
											],
											"variable": [
												{
													"id": "c726ff78-2af2-4476-8203-d28ac5c5a834",
													"key": "nhs_id",
													"value": "{{nshID}}",
													"type": "string"
												}
											]
										},
										"description": "Invalid Retrieve Patient calls shall result in a valid Error Response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf1ef84f-8443-40aa-8fa0-b2e1776721a4",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"",
													"pm.variables.get('testData').forEach(scenario => {\t\t",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid) ",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient/' + scenario.nhsNumber,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader,\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code INVALID_RESOURCE_ID\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_RESOURCE_ID');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a15d156-6679-4cff-b7fc-6a9b2da521f6",
												"exec": [
													"pm.variables.set('testData', data = [",
													"\t{ name: \"Valid asid/token and Invalid NHS Number\", asid: 'valid', nhsNumber: '1234', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid NHS Number\", asid: 'invalid', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid NHS Number\", asid: 'missing', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid NHS Number\", asid: 'missing', nhsNumber: '5900014061', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/1234",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												"1234"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending a request which has both an invalid asid and nhs number, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of a\nnhs number validation error (400 Bad Request)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Patient - Happy path 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0d04af1-5852-467d-911c-ccd59216a50d",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0dbe7a1-184b-496b-aa07-f05a14e70b27",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
											"pm.variables.set(\"given\", [\"Search\", \"Again\"]);",
											"pm.variables.set(\"family\", \"Mapping\");",
											"pm.variables.set(\"prefix\", \"Dame\");",
											"pm.variables.set(\"suffix\", [\"MBA\", \"PHD\"]);",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2010-01-01\");",
											"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
											"pm.variables.set(\"addressLine\", JSON.stringify([\"1\", \"westwood\", \"ecclechill\", \"bradfordian\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"telecomValue\", \"07900000000\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", false);",
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"pm.variables.set(\"expectedBirthOrder\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "4101c15c-ea93-4e96-9aac-b45a84456c32",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65500166-cd6c-4174-8acc-383ac1a3f4b1",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc8b555a-9820-4f72-ae65-ecbcd604842e",
										"exec": [
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"alias\");",
											"pm.variables.set(\"family\", \"Alias\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"1990-10-10\");",
											"pm.variables.set(\"prefix\", \"Dr\");",
											"pm.variables.set(\"addressType\", \"work\");",
											"pm.variables.set(\"telecomType\", \"fax\");",
											"pm.variables.set(\"telecomUse\", \"work\");",
											"pm.variables.set(\"given\", [\"John\"]);",
											"pm.variables.set(\"suffix\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"130 Greenhouse Lane\",\"Work Road\",\"Roundhay\",\"Leeds\",\"WEST YORKSHIRE\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2019-01-10\");",
											"pm.variables.set(\"addressPeriodEnd\", \"2020-11-10\");",
											"pm.variables.set(\"postalCode\", \"LS18 4AD\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"metaVersionId\", \"21\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"2342424234\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"language\", \"en\");",
											"pm.variables.set(\"languageDisplay\", \"English\");",
											"pm.variables.set(\"interpreter\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "f3006d32-c81f-4290-bee3-6b46c7bf5871",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f409d4e-42d5-4f42-811f-915008169c0b",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b9b54b3-f90a-421d-8e61-e6f06bffb888",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"",
											"",
											"pm.variables.set(\"nameType\", \"preferred\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"person\"]);",
											"pm.variables.set(\"family\", \"Unknown\");",
											"pm.variables.set(\"prefix\", \"Lady\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-01-02\");",
											"pm.variables.set(\"postalCode\", undefined);",
											"pm.variables.set(\"addressType\", \"correspondence\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"telecomType\", \"textphone\");",
											"pm.variables.set(\"telecomUse\", \"pager\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", true);",
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "23a139c4-4207-45c7-90f6-8cf5f0eebea1",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61ad82dd-4847-4587-86ae-7062566d67e3",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b07a30d9-d942-4087-b081-1e6305b87ae9",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"previous\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"someone\"]);",
											"pm.variables.set(\"family\", \"previous\");",
											"pm.variables.set(\"prefix\", \"Lord\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2008-01-01\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"1 Temporary Ave\",\"Temporary Place\",\"Temporary Town\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
											"pm.variables.set(\"postalCode\", \"BD2 7NT\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
											"pm.variables.set(\"telecomType\", \"email\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"patientId\", \"5900019241\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "1a2657c1-feef-41ee-9674-f919b0c6b904",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd9108be-ff0d-480c-8212-b0f564ef19f4",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b21d7e11-1ba7-4535-9ded-863b8b07443b",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"family\", \"temporary\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2004-03-01\");",
											"pm.variables.set(\"prefix\", \"Miss\");",
											"pm.variables.set(\"nameType\", \"birth\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"mobile\");",
											"pm.variables.set(\"given\", [\"ned\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09000000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "ade9136c-3bb3-4612-8004-f819716a0acf",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52a2aeb2-fea3-48ce-b2be-af240380934d",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d23151b6-8ba8-48f0-afa9-bf6c9cbf7900",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mr\");",
											"pm.variables.set(\"nameType\", \"bachelor\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"temporary\");",
											"pm.variables.set(\"family\", \"Mister\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2009-01-01\");",
											"pm.variables.set(\"given\", [\"Any\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "4df7a057-e0f1-40ff-976a-fb41d7e6f74b",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45eab61f-d9b6-44dc-a34d-9ed20a5fb0a2",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d50fcb8b-1c9c-4c5c-84a8-7a1ada7e89a6",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mrs\");",
											"pm.variables.set(\"nameType\", \"maiden\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
											"pm.variables.set(\"family\", \"Answermachine\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2007-01-01\");",
											"pm.variables.set(\"given\", [\"another\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"pm.variables.set(\"metaVersionId\", \"5\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09234567\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "be950952-fc81-4030-b5d6-e3ade9c0246f",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "work in progress.  This test shall cover a Happy path Retrieve scenario.  It currently asserts on General Practitioner, Pharmicies, Communication & Patient identifier, language.  Other checks shall be added in due course."
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "634bb2ee-a7f2-414e-beae-96825868d76e",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33589961-e8d9-4c25-a088-f3d40772334b",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Ms\");",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Emergency\");",
											"pm.variables.set(\"family\", \"Emergency\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2004-01-01\");",
											"pm.variables.set(\"given\", [\"Emma\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"pm.variables.set(\"metaVersionId\", \"2\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000001\");",
											"pm.variables.set(\"deceasedDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "f5e13dbf-50a4-42ad-aed6-6cc3ce3e142e",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 9 - Superceded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "266b5614-b635-4e04-bf2b-6a68ae8f4468",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "982a19eb-9cbc-4150-b0fb-c5278dab1e47",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"supercededPatientId\", \"5900006360\");",
											"",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"Retained\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2006-04-01\");",
											"pm.variables.set(\"given\", [\"Jon\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"15 Retained Road\",\"Retained\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LK\");",
											"pm.variables.set(\"patientId\", \"5900011143\");",
											"pm.variables.set(\"resourceType\", \"Patient\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"id": "56630da7-1932-45ea-88c2-e41d60a1fe82",
											"key": "nhs_id",
											"value": "5900006360",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* If the Patient record is marked as Superceded, the response shall return the Retained record for the Patient\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* nameFamily\r\n* nameGiven\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* resourseType\r\n* patientId\r\n* identifierExtention"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8bec062-2109-4ae6-8d95-7001fdc91f67",
										"exec": [
											"var response = pm.response.json();",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"pm.variables.set(\"s-flagged\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87fa91d5-de03-49ca-8878-1db6eb80b3ad",
										"exec": [
											"pm.variables.set(\"s-flagged\", true);",
											"",
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"sensitive\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"given\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"patientId\", \"5900004430\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"deceasedDateTime\", \"2009-03-01\");",
											"pm.variables.set(\"securityCode\", \"R\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationStatus.display\", \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
											"pm.variables.set(\"language\", \"be\");",
											"pm.variables.set(\"languageDisplay\", \"Belarusian\");",
											"pm.variables.set(\"interpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "200000000610"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "1234567890"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "1234567890"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900004430",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900004430"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Date of birth formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a90565b-a6a6-4bed-a9a0-b2e396c0acec",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.dobFormat, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().birthDate).to.equal(scenario.expectedDob, 'invalid birthDate');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12aeb243-83e3-4c88-be01-9660d627c5c0",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyy is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDob: \"2000\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyyMM is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDob: \"2000-01\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is an invalid date means birthDate element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is in an invalid format means birthDate element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is empty means birthDate element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDob: undefined",
											"    },",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										""
									]
								},
								"description": "Handle patients dates of birth which are in different formats\n\n\n- NHS Number: 5900017605 with DOB as 2000 (yyyy) should display DOB as 2000  \n- NHS Number: 5900010260 with DOB as 2000/01 (yyyyMM), should display DOB as 2000/01  \n- NHS Number: 5900011631 with DOB as 31st Feb, should not display DOB at all  \n- NHS Number: 5900010384 with DOB as 2 (y), should not display DOB at all  \n- NHS Number: 5900015319 with Missing DOB, should not display DOB at all"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient: Date of death formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55aa97f2-5e46-4031-8f55-85a5a831e321",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"            ",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.deathDate, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid http status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().deceasedDateTime).to.equal(scenario.expectedDeathDate, 'invalid deceasedDateTime');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fd820e6-bef4-4aba-89f2-aa218597aba7",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        deathDate: \"Death date in the format yyyy means deceasedDateTime is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDeathDate: \"2020\"",
											"    },",
											"    {",
											"        deathDate: \"Death date in the format yyyyMM means deceasedDateTime is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDeathDate: \"2000-01\"",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid date means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid format means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is empty means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which contains an invalid time means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900008142\",",
											"        expectedDeathDate: undefined",
											"    }",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900008142 ",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900008142 "
									]
								},
								"description": "Handle patients death date which could be in a different format\n\n- NHS Number: 5900017605 with Death date as 2000 (yyyy) should display Death date as 2000  \n- NHS Number: 5900010260 with Death date as as 2000/01 (yyyyMM)  \n- NHS Number: 5900011631 with Death date as 31st Feb, should not display Death date at all  \n- NHS Number: 5900010384 with Death date as 2 (y), should not display Death date at all  \n- NHS Number: 5900015319 with Missing Death date, should not display Death date at all  \n- NHS Number: 5900008142 with Invalid time for death date, should not display Death date at all"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update DOB",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Update - DOB before original DOB",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c111c81c-97c5-44bb-96ee-c98d02f93e71",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"/*set new birthdate to day before original*/\r",
															"\r",
															"var d = new Date(pm.variables.get(\"birthDate\"));\r",
															"d.setDate(d.getDate() - 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.globals.set(\"newBirthDate\", newDate)\r",
															"console.log(\"New birthdate = \" + pm.globals.get(\"newBirthDate\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "46fdfec6-d77f-4683-bd72-b7f7a54aaa2f",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    //Check that the Update Response has been populated correctly with new updates\r",
															"    const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"\r",
															"    PDSUpdateResponse.assertDateOfBirthHasBeenUpdated(pm.globals.get(\"newBirthDate\"))\r",
															"    PDSUpdateResponse.assertVersionIdHasBeenUpdated()\r",
															"\r",
															"    //Send HL7 Retrieve message to check new Date of Birth is persisted\r",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"    //Check the HL7 Response has been populated with the new DoB\r",
															"    setTimeout(function () {\r",
															"        const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"        HL7response.assertHL7DateOfBirthIs(pm.globals.get(\"newBirthDate\").replace(/-/g, ''))\r",
															"    }, 5000);\r",
															"\r",
															"    //set metaversion variable for next request\r",
															"    pm.globals.set(\"metaVersionId\", pm.response.headers.get('Etag'));\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"value": "{{metaVersionId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json-patch+json",
														"type": "text"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"{{newBirthDate}}\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "4c34a3a3-bdeb-4c3e-9975-dc2ba1bfdeb8",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB where the new DoB is earlier than the current DoB and check that the new DoB exist on the Patient record."
											},
											"response": []
										},
										{
											"name": "Update - DOB after original DOB",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "29c489a3-a849-4be6-a4f5-2d76b5f72d72",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"/*set new birthdate to day after original*/\r",
															"\r",
															"var d = new Date(pm.variables.get(\"birthDate\"));\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.globals.set(\"newBirthDate\", newDate)\r",
															"console.log(\"New birthdate = \" + pm.globals.get(\"newBirthDate\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "df7d3e3b-54e7-42e8-b3cc-65d1be83ac79",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"setTimeout(function () {\r",
															"    const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"\r",
															"    PDSUpdateResponse.assertDateOfBirthHasBeenUpdated(pm.globals.get(\"newBirthDate\"))\r",
															"    PDSUpdateResponse.assertVersionIdHasBeenUpdated()\r",
															"\r",
															"    //Send HL7 Retrieve message to check new Date of Birth is persisted\r",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"    //Check the HL7 Response has been populated with the new DoB\r",
															"    setTimeout(function () {\r",
															"        const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"        HL7response.assertHL7DateOfBirthIs(pm.globals.get(\"newBirthDate\").replace(/-/g, ''))\r",
															"    }, 3000);\r",
															"\r",
															"    //set metaversion variable for next request\r",
															"    pm.globals.set(\"metaVersionId\", pm.response.headers.get('Etag'));\r",
															"}, 3000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"{{newBirthDate}}\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "3d3fea71-615c-4a44-9c83-1c5a11bd76ce",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB where the new DoB is later than the current DoB and check that the new DoB exist on the Patient record."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Update - DOB cannot be after the DOD",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6ccbf95c-35a9-4845-bc19-7a82fe65bf05",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"let resp;\r",
															"\r",
															"/*Send a PDS Update with Date of Death & Death Notification - Date of Death = 2020-01-01*/\r",
															"setTimeout(function () {\r",
															"    var Header = require('postman-collection').Header;\r",
															"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
															"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
															"    let deathNotification = pm.globals.get(\"deathNotification\");\r",
															"\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
															"        method: 'PATCH',\r",
															"        header: {\r",
															"            authorization,\r",
															"            asidHeader,\r",
															"            sessionURIDHeader,\r",
															"            identityUUIDHeader,\r",
															"            contentType,\r",
															"            ifMatch\r",
															"        },\r",
															"        body: deathNotification\r",
															"\r",
															"    }, function (err, response) {\r",
															"        resp = response;\r",
															"    });\r",
															"}, 7000);\r",
															"\r",
															"setTimeout(function () {\r",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"    POLLER.retrieveMessage(resp, false);    \r",
															"}, 16000);\r",
															"\r",
															"pm.globals.set(\"newBirthDate\", \"2020-01-02\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6fceced0-547f-4bcd-9f2f-5531100d397e",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid update with error - birth date cannot be after the deceased date\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"{{newBirthDate}}\"}\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "da129b76-577e-4077-8c8b-1e0aba341ecc",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB remove is not permitted and will result in an error response"
											},
											"response": []
										},
										{
											"name": "Update - DOB mismatch on patient record versionid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b506a65d-fdab-4f70-8f95-f49bba7860de",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"let resp;\r",
															"\r",
															"/*Send a PDS Update with Date of Death & Death Notification - Date of Death = 2020-01-01*/\r",
															"setTimeout(function () {\r",
															"    var Header = require('postman-collection').Header;\r",
															"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
															"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
															"    let deathNotification = pm.globals.get(\"deathNotification\");\r",
															"\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
															"        method: 'PATCH',\r",
															"        header: {\r",
															"            authorization,\r",
															"            asidHeader,\r",
															"            sessionURIDHeader,\r",
															"            identityUUIDHeader,\r",
															"            contentType,\r",
															"            ifMatch\r",
															"        },\r",
															"        body: deathNotification\r",
															"\r",
															"    }, function (err, response) {\r",
															"        resp = response;\r",
															"    });\r",
															"}, 7000);\r",
															"\r",
															"setTimeout(function () {\r",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"    POLLER.retrieveMessage(resp, false);    \r",
															"}, 16000);\r",
															"\r",
															"pm.globals.set(\"newBirthDate\", \"2020-01-02\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c94f53bd-6e15-4ce2-889a-1a648dab5cf2",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns RESOURCE_VERSION_MISMATCH error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"RESOURCE_VERSION_MISMATCH\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Resource version supplied does not match actual version\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"1\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"{{newBirthDate}}\"}\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "b88dd64f-5e95-42c4-a935-bc6f64e5887b",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB where the if-match header is different to the current patient version id will result in an error response"
											},
											"response": []
										},
										{
											"name": "Update - DOB cannot be deleted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f899db58-f1ef-4535-98cd-80baa3d04b03",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "25dc95ec-f1f2-435b-9228-c825bcf6c83f",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - source not permitted to remove 'birthDate'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"information\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"remove\", \"path\": \"/birthDate\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "7c7a3682-47f4-440d-9af1-9b2db6f4c5dc",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB remove is not permitted and will result in an error response"
											},
											"response": []
										},
										{
											"name": "Update - DOB with an invalid date format",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "68bd6c78-460c-4c84-a1d7-8d6c3dfbcfc8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "feb1c794-380b-44b1-8ead-e27f4c066f09",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - '20010101' in field 'birthDate'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"20010101\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "db7db954-c4f7-4805-9870-105c5b5b0a44",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB with an invalid format DoB will result in an error"
											},
											"response": []
										},
										{
											"name": "Update - DOB with a malformed Patch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c8c75a6f-5ed8-4f39-8d30-1d7a7e99a042",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d5aec016-55f4-4045-b295-c2686f46d77b",
														"exec": [
															"var response = pm.response.json();\r",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));\r",
															"const error = eval(pm.globals.get(\"errorMessage\"));\r",
															"\r",
															"assertThat.statusCodeIs(400);\r",
															"error.assertCodeIs(\"INVALID_UPDATE\");\r",
															"error.assertDisplayIs(\"Invalid update with error - 'birthDate' is not a 'json-pointer'\");\r",
															"error.assertSeverityIs(\"error\");\r",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"birthDate\", \"value\": \"20100101\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "d4ad3d2b-0607-4677-ad24-f05b79bf65ae",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB with a malformed Patch will result in an error"
											},
											"response": []
										},
										{
											"name": "Update - DOB cannot be in the future",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3af9c671-80f7-4ca2-90e2-1581a4f0a922",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"/*set a new birthdate to tomorrow*/\r",
															"var d = new Date();\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.globals.set(\"newBirthDate\", newDate)\r",
															"console.log(\"New birthdate = \" + pm.globals.get(\"newBirthDate\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e4e7290b-d17e-42f3-90ec-2036902a60bb",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid update with error - birth date cannot be in the future\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n      { \"op\": \"replace\", \"path\": \"/birthDate\", \"value\": \"{{newBirthDate}}\" }\r\n  ]\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "7e8ab3f4-9c84-436b-9057-a91a77ac12a2",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update DoB remove is not permitted and will result in an error response"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update DoD & Death Notification",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Update - Add DOD and Death Notification Informal for Today",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4cb56531-cc84-4897-8dfe-dd24c85b1617",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"setTimeout(function () {\r",
															"    const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"\r",
															"    //Check that the Update Response has been populated correctly with new updates\r",
															"    PDSUpdateResponse.assertDateOfDeathHasBeenUpdated(pm.globals.get(\"dateOfDeath\"))\r",
															"    PDSUpdateResponse.assertDeathNotificationHasBeenUpdated()\r",
															"\r",
															"\r",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"    //Check the HL7 Response has been populated with the new DoD and Death Notification\r",
															"    setTimeout(function () {\r",
															"        const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"        HL7response.assertHL7DateOfDeathIs(pm.globals.get(\"dateOfDeath\").replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationDateIs(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10).replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationIs(\"3\")\r",
															"    }, 2000);\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dd34b666-df66-4b8e-b035-8bb520ee5690",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"/*set the date of death date*/\r",
															"\r",
															"//set the deathNotification valueDateTimme \r",
															"var date = (new Date().toISOString().substr(0, 19)) + \"+00:00\";\r",
															"pm.globals.set(\"deathNotificationDateAndTime\", date);\r",
															"console.log(\"Death Notification Date = \" + pm.globals.get(\"deathNotificationDateAndTime\"))\r",
															"\r",
															"//set the date of death date\r",
															"\r",
															"var todayDate = date.substring(0, 10);\r",
															"pm.globals.set(\"dateOfDeath\", todayDate);\r",
															"console.log(\"Date of Death Date = \" + pm.globals.get(\"dateOfDeath\"))\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"patches\": [\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/deceasedDateTime\",\n\t\t\t\"value\": \"{{dateOfDeath}}\"\n\t\t},\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/extension/-\",\n\t\t\t\"value\": {\n\t\t\t\t\"extension\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"deathNotificationStatus\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"code\": \"1\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\n\t\t\t\t\t\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"systemEffectiveDate\",\n\t\t\t\t\t\t\"valueDateTime\": \"2020-07-30T09:21:29+00:00\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n\t\t\t}\n\t\t}\n\t]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "f21e3270-f2ab-4011-8141-b13e38fd5927",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a DOD and Death Notification where both DOD and Notification Date is for today"
											},
											"response": []
										},
										{
											"name": "Update - Add DOD and Death Notification Informal where DOD is earlier",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c80d2f14-04b6-41f4-bf32-bb806b5ea642",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"setTimeout(function () {\r",
															"    //Check that the Update Response has been populated correctly with new updates\r",
															"    const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"\r",
															"    PDSUpdateResponse.assertDateOfDeathHasBeenUpdated(pm.globals.get(\"dateOfDeath\"))\r",
															"    PDSUpdateResponse.assertDeathNotificationHasBeenUpdated()\r",
															"\r",
															"\r",
															"    //Send HL7 Retrieve message \r",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"    //Check the HL7 Response has been populated with the new DoD and Death Notification\r",
															"    setTimeout(function () {\r",
															"        const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"        HL7response.assertHL7DateOfDeathIs(pm.globals.get(\"dateOfDeath\").replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationDateIs(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10).replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationIs(\"3\")\r",
															"    }, 2000);\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "349fb9a6-a8c8-4af1-b6e3-4452ebbefc30",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre=requisites\r",
															"=================================*/\r",
															"\r",
															"/*set the date of death date*/\r",
															"\r",
															"//set the deathNotification valueDateTimme \r",
															"var date = (new Date().toISOString().substr(0, 19)) + \"+00:00\";\r",
															"pm.globals.set(\"deathNotificationDateAndTime\", date);\r",
															"console.log(\"Death Notification Date = \" + pm.globals.get(\"deathNotificationDateAndTime\"))\r",
															"\r",
															"//set the date of death date\r",
															"\r",
															"var d = new Date(pm.variables.get(\"deathNotificationDateAndTime\"));\r",
															"d.setDate(d.getDate() - 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.globals.set(\"dateOfDeath\", newDate);\r",
															"console.log(\"Date of Death Date = \" + pm.globals.get(\"dateOfDeath\"))"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"patches\": [\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/deceasedDateTime\",\n\t\t\t\"value\": \"{{dateOfDeath}}\"\n\t\t},\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/extension/-\",\n\t\t\t\"value\": {\n\t\t\t\t\"extension\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"deathNotificationStatus\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"code\": \"1\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\n\t\t\t\t\t\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"systemEffectiveDate\",\n\t\t\t\t\t\t\"valueDateTime\": \"{{deathNotificationDateAndTime}}\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n\t\t\t}\n\t\t}\n\t]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "0eba19fc-ee45-4898-b6b4-80c35ef0d288",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a DOD and Death Notification where both DOD is before Notification Date"
											},
											"response": []
										},
										{
											"name": "Update - Replace DoD and Death Notification Informal",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4577a7e4-adfe-4129-a2af-ca5579ad97c6",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Request specific pre-requisites\r",
															"=================================*/\r",
															"let resp;\r",
															"\r",
															"/*Send a PDS Update with Date of Death & Death Notification - Date of Death = 2020-01-01*/\r",
															"setTimeout(function () {\r",
															"    var Header = require(\"postman-collection\").Header;\r",
															"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
															"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
															"    let deathNotification = pm.globals.get(\"deathNotification\");\r",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
															"        method: 'PATCH',\r",
															"        header: {\r",
															"            authorization,\r",
															"            asidHeader,\r",
															"            sessionURIDHeader,\r",
															"            identityUUIDHeader,\r",
															"            contentType,\r",
															"            correlationIdHeader,\r",
															"            ifMatch\r",
															"        },\r",
															"        body: deathNotification\r",
															"\r",
															"    }, function (err, response) {\r",
															"        resp = response;\r",
															"    });\r",
															"}, 6000);\r",
															"\r",
															"setTimeout(function () {\r",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"    POLLER.retrieveMessage(resp, false);\r",
															"\r",
															"    setTimeout(function () {\r",
															"        let response = pm.variables.get(\"pdsUpdateResponse\")\r",
															"        console.log('The response is', response);\r",
															"        pm.variables.set(\"versionId\", parseInt(response.meta.versionId));\r",
															"        console.log(\"new version Id after 1st patch=\" + pm.variables.get(\"versionId\"))\r",
															"    }, 14000);\r",
															"}, 9000);\r",
															"\r",
															"/*set the date of death date*/\r",
															"//set the deathNotification valueDateTimme \r",
															"var date = (new Date().toISOString().substr(0, 19)) + \"+00:00\";\r",
															"pm.globals.set(\"deathNotificationDateAndTime\", date);\r",
															"console.log(\"Death Notification Date = \" + pm.globals.get(\"deathNotificationDateAndTime\"))\r",
															"\r",
															"//set the date of death date\r",
															"var todayDate = date.substring(0, 10);\r",
															"pm.globals.set(\"dateOfDeath\", todayDate);\r",
															"console.log(\"Date of Death Date = \" + pm.globals.get(\"dateOfDeath\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "84c6452f-fb07-486a-ac5e-2e51b522a870",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"setTimeout(function () {\r",
															"    //Check that the Update Response has been populated correctly with new updates\r",
															"    const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"\r",
															"    PDSUpdateResponse.assertDateOfDeathHasBeenUpdated(pm.globals.get(\"dateOfDeath\"))\r",
															"    PDSUpdateResponse.assertDeathNotificationHasBeenUpdated()\r",
															"\r",
															"\r",
															"    //Send HL7 Retrieve message \r",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"    //Check the HL7 Response has been populated with the new DoD and Death Notification\r",
															"\r",
															"    setTimeout(function () {\r",
															"        const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"        HL7response.assertHL7DateOfDeathIs(pm.globals.get(\"dateOfDeath\").replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationDateIs(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10).replace(/-/g, ''))\r",
															"        HL7response.assertHL7DeathNotificationIs(\"3\")\r",
															"    }, 2000);\r",
															"\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"value": "{{metaVersionId}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json-patch+json",
														"type": "text"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"patches\": [\n\t\t{\n\t\t\t\"op\": \"replace\",\n\t\t\t\"path\": \"/deceasedDateTime\",\n\t\t\t\"value\": \"{{dateOfDeath}}\"\n\t\t},\n\t\t{\n\t\t\t\"op\": \"replace\",\n\t\t\t\"path\": \"/extension/0\",\n\t\t\t\"value\": {\n\t\t\t\t\"extension\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"deathNotificationStatus\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"code\": \"1\",\n\t\t\t\t\t\t\t\t\t\"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\n\t\t\t\t\t\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"systemEffectiveDate\",\n\t\t\t\t\t\t\"valueDateTime\": \"{{deathNotificationDateAndTime}}\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n\t\t\t}\n\t\t}\n\t]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "49382da8-e575-4132-a6a7-80c130f0d360",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a DOD and Death Notification where there is already a DOD and Notification present for the patient"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Update - Add DOD cannot be Updated without a Notification",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2bc1a964-b23a-49d4-96f7-4599b10bfda3",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4db2b586-db8e-4971-9b62-dc7eca153b9c",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - when adding a deceased date, a death notification status must also be supplied\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add DOD cannot be Updated without a Notification, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add DOD Cannot be before DOB",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "df679f78-5a98-4f52-a7e8-8c82e5bbc319",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "64bfb5ad-2df7-4ac6-bb34-849bfe710e86",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - deceased date cannot be before the birth date\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"1990-07-20\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add DOD Cannot be before DOB, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add DOD Cannot be in the future",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1d246fac-3aef-4be5-8ce4-33f8dbc90f20",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"/*set a new deathdate to tomorrow*/\r",
															"var d = new Date();\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.variables.set(\"furturedateOfDeath\", newDate);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7267e647-b278-43ea-bc91-3f2456b9c283",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - deceased date cannot be in the future\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"{{furturedateOfDeath}}\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add DOD Cannot be in the future, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Replace DOD when one doesnt exist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6d214070-9366-4cce-b16f-0be0e164a88f",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ef597999-5cce-45df-a1be-3987bede1122",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - can't replace non-existent object 'deceasedDateTime'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Replace DOD when one doesnt exist, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add Notification cannot be Updated without DOD",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "81afe749-5497-4802-9a81-0c16d3799d3c",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd870676-f99a-4dd2-8692-0ed61b69ede3",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - when adding a death notification status, a deceased date must also be supplied\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add Notification cannot be Updated without DOD, results in error"
											},
											"response": []
										},
										{
											"name": "Update - DOD with a malformed patch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee0c5afe-54a9-4138-9289-480c97ba971f",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bd5e7198-32a5-4529-ae6c-89aee4ea1b1d",
														"exec": [
															"/*Perform checks on the Error Response*/\r",
															"let response = pm.response.json();\r",
															"\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - 'deceasedDateTime' is not a 'json-pointer'\")\r",
															"         pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            \"url\": \"systemEffectiveDate\",\r\n            \"valueDateTime\": \"\"\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - DOD with a malformed patch, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Death Notification with missing extension url",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "57dcebf7-40bb-428f-89ef-f14319a4ed15",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d096a66-5965-4fa2-a7d3-47c0963b7450",
														"exec": [
															"/*Perform checks on the Error Response*/\r",
															"let response = pm.response.json();\r",
															"\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - no id or url found for path with root /extension/0\")\r",
															"         pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Death Notification with missing extension url, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Death Notification with a malformed patch - format",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d7150f07-7428-4749-9e36-731d0de8d7aa",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cbbb9fe7-f445-463e-81ca-0b09d2fc7384",
														"exec": [
															"/*Perform checks on the Error Response*/\r",
															"let response = pm.response.json();\r",
															"\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid payload received - incorrect format\")\r",
															"         pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Death Notification with a malformed patch - format, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Death Notification with a malformed patch - path",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64f71d98-5535-4f8b-872b-dd59d8edb4da",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a72a037f-c91e-43a8-9f32-253056599eec",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - '' is not a valid sequence index\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Death Notification with a malformed patch - format, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add DoD and Death Notification when one already exists",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dacb956d-d8a6-48f2-931b-4bdbc85029be",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900029913\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3e332d0e-b5f7-4519-bf70-1c519b5d5c72",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple death notification states\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"patches\": [\r\n\t\t{\r\n\t\t\t\"op\": \"add\",\r\n\t\t\t\"path\": \"/deceasedDateTime\",\r\n\t\t\t\"value\": \"{{dateOfDeath}}\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"op\": \"add\",\r\n\t\t\t\"path\": \"/extension/-\",\r\n\t\t\t\"value\": {\r\n\t\t\t\t\"extension\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"url\": \"deathNotificationStatus\",\r\n\t\t\t\t\t\t\"valueCodeableConcept\": {\r\n\t\t\t\t\t\t\t\"coding\": [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\"code\": \"1\",\r\n\t\t\t\t\t\t\t\t\t\"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n\t\t\t\t\t\t\t\t\t\"version\": \"1.0.0\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add DoD and Death Notification when one already exists, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Remove DOD and Death Notification not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf9820e2-1968-4fbf-b678-9c7a5ee8ca88",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900029913\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "22f53e26-9bc1-41f9-b8ad-be054652136c",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(403);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Forbidden update with error - source not permitted to remove 'deceasedDateTime'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"information\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-21T00:00:00+00:00\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/deceasedDateTime\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Remove DOD and Death Notification not permitted, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Death Notification with a invalid status code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7aba5818-fec4-4a0f-844f-1a64cdcc7b60",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"/*set a new deathdate to tomorrow*/\r",
															"var d = new Date();\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.variables.set(\"furturedateOfDeath\", newDate);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "62168a36-9b2e-4814-b690-8616f0c6a4a0",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - '3' in field 'valueCodeableConcept/coding/0/code'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"2020-07-20\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"3\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Death Notification with a invalid status code, results in error"
											},
											"response": []
										},
										{
											"name": "Update - DOD with invalid date format",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "77e78d3c-4b23-456c-8402-14331b44a722",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"/*set a new deathdate to tomorrow*/\r",
															"var d = new Date();\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.variables.set(\"furturedateOfDeath\", newDate);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a407f172-b9aa-450d-92e5-e048fb238927",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - '20200720' in field 'deceasedDateTime'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"20200720\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - DOD with invalid date format, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add DoD and Replace Death Notification is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "34bf7838-e895-4f51-b071-802980defe82",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"/*set a new deathdate to tomorrow*/\r",
															"var d = new Date();\r",
															"d.setDate(d.getDate() + 1);\r",
															"var newDate = d.toISOString().substr(0, 10);\r",
															"pm.variables.set(\"furturedateOfDeath\", newDate);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dbbb7611-0491-49e5-8d32-720f4a672365",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value with error - Cannot find sub-object for update\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/deceasedDateTime\",\r\n      \"value\": \"\"\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\": {\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"deathNotificationStatus\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"1\",\r\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\r\n                  \"version\": \"1.0.0\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ],\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\r\n      }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "01f8144e-994d-481c-8904-0892c6434fa9",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Add DoD and Replace Death Notification is not permitted, results in error"
											},
											"response": []
										},
										{
											"name": "Update - Add Formal Death Notification is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c43d8906-2960-43ea-b76b-ad1b02f64657",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900022463\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f275b46f-5f04-48c7-b7d5-b07f925f4d31",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - source not permitted to set a formal death notification status\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"information\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"patches\": [\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/deceasedDateTime\",\n\t\t\t\"value\": \"2020-07-01\"\n\t\t},\n\t\t{\n\t\t\t\"op\": \"add\",\n\t\t\t\"path\": \"/extension/-\",\n\t\t\t\"value\": {\n\t\t\t\t\"extension\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"url\": \"deathNotificationStatus\",\n\t\t\t\t\t\t\"valueCodeableConcept\": {\n\t\t\t\t\t\t\t\"coding\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"code\": \"2\",\n                        \t        \"display\": \"Formal - death notice received from Registrar of Deaths\",\n\t\t\t\t\t\t\t\t\t\"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\n\t\t\t\t\t\t\t\t\t\"version\": \"1.0.0\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n\t\t\t}\n\t\t}\n\t]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "796a5a1e-78d0-488b-a93f-a27261794076",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a Formal DOD and Death Notification is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace DOD and Death Notification not permitted where exisiting is a Formal Notification",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "71825a99-734a-4949-ac1a-235a3cf3306b",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900010406\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6e3029f0-c4ad-4f30-9009-102a2c5182ee",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - source not permitted to update death details when Death Notification Status is formal\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"information\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/deceasedDateTime\",\n      \"value\": \"2020-07-01\"\n    },\n    {\n      \"op\": \"replace\",\n      \"path\": \"/extension/0\",\n      \"value\": {\n        \"extension\": [\n          {\n            \"url\": \"deathNotificationStatus\",\n            \"valueCodeableConcept\": {\n              \"coding\": [\n                {\n                  \"code\": \"1\",\n                  \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\",\n                  \"version\": \"1.0.0\"\n                }\n              ]\n            }\n          }\n        ],\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n      }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "2de9e853-c4b9-418d-9a16-10029c71a4a7",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Replace DOD and Death Notification not permitted where exisiting is a Formal Notification"
											},
											"response": []
										},
										{
											"name": "Update - Remove DOD and Death Notification not permitted where exisiting is a Formal Notification",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1345d457-95ae-4a83-8200-3087220967d4",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900010406\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5f5167b8-4b33-4601-8fe0-a7aa4ec031f7",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - source not permitted to remove 'deceasedDateTime'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal(\"information\");\r",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
															"    });\r",
															"}, 3000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/deceasedDateTime\",\n      \"value\": \"2020-05-21T00:00:00+00:00\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/deceasedDateTime\"\n    },\n    {\n      \"op\": \"test\",\n      \"path\": \"/extension/0/url\",\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/extension/0\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "607a0f63-930f-4826-bb3d-ccaf95fabf44",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update - Remove DOD and Death Notification not permitted where exisiting is a Formal Notification"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update General Practitioner",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Add a General Practice to a Patient min patch",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b7ecb3d-a948-472b-a28f-374c0347241f",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGeneralPracticeIs(pm.variables.get(\"gpValue\"))\r",
															"PDSUpdateResponse.assertGeneralPracticeStartDate(pm.variables.get(\"PDStoday\"))\r",
															"}, 3000);\r",
															"\r",
															"//Send HL7 Retrieve message to check new Date of Birth is persisted\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"//Check the HL7 Response has been populated with the new DoB\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GeneralPracticeIs('1')\r",
															"      HL7response.assertHL7GeneralPracticeCodeIs(pm.variables.get(\"gpValue\"))\r",
															"      HL7response.assertHL7GeneralstartDateIs(pm.variables.get(\"today\"))\r",
															"}, 5000);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ba074707-2df7-41de-b864-bf3c15794dcc",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Test specific variables\r",
															"=========================*/\r",
															"\r",
															"/*set the GP code*/\r",
															"pm.variables.set(\"gpValue\", \"V81999\")\r",
															"\r",
															"/*create todays date in the correct format*/\r",
															"var today = require('moment');\r",
															"pm.variables.set(\"today\", today().format(\"YYYYMMDD\"));\r",
															"pm.variables.set(\"PDStoday\", today().format(\"YYYY-MM-DD\"));\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"{{gpValue}}\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a general Practice to a Patient with minimal patch payload where a GP does not already exist."
											},
											"response": []
										},
										{
											"name": "Add a General Practice to a Patient full patch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e2ed9850-d6a7-4339-b49b-0ccd188b0eb4",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"\r",
															"/*Test specific variables\r",
															"=========================*/\r",
															"\r",
															"/*set the GP code*/\r",
															"pm.variables.set(\"gpValue\", \"V81999\")\r",
															"\r",
															"/*create todays date in the correct format*/\r",
															"var today = require('moment');\r",
															"pm.variables.set(\"today\", \"20200101\");\r",
															"pm.variables.set(\"PDStoday\", \"2020-01-01\");\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "353a5a9c-757d-413c-955f-b7316ff52eb8",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGeneralPracticeIs(pm.variables.get(\"gpValue\"))\r",
															"PDSUpdateResponse.assertGeneralPracticeStartDate(pm.variables.get(\"PDStoday\"))\r",
															"}, 5000);\r",
															"\r",
															"//Send HL7 Retrieve message for follow on checks\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"//Check the HL7 Response for changes\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GeneralPracticeIs('1')\r",
															"      HL7response.assertHL7GeneralPracticeCodeIs(pm.variables.get(\"gpValue\"))\r",
															"      HL7response.assertHL7GeneralstartDateIs(pm.variables.get(\"today\"))\r",
															"}, 5000);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"{{PDStoday}}\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"{{gpValue}}\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "4fdbd86a-13bf-4dba-acdd-31235dbcca00",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a general Practice to a Patient with full patch payload where a GP does not already exist."
											},
											"response": []
										},
										{
											"name": "Replace a General Practice to a Patient full patch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bf27b6f9-d5c9-48cd-ae2f-651254d7b43c",
														"exec": [
															"/*Send a PDS Search request to obtain the GP Id*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"\r",
															"setTimeout(function () {\r",
															"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
															"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
															"}, 3000);\r",
															"\r",
															"\r",
															"/*set the GP code*/\r",
															"pm.variables.set(\"gpValue\", \"V81998\")\r",
															"\r",
															"/*create todays date in the correct format*/\r",
															"var today = require('moment');\r",
															"pm.variables.set(\"today\", \"20200101\");\r",
															"pm.variables.set(\"PDStoday\", \"2020-01-01\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2936d50a-e47b-4a4b-b305-432c3c4e4e3f",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"console.log(\"now checking update response\")\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGeneralPracticeIs(pm.variables.get(\"gpValue\"))\r",
															"PDSUpdateResponse.assertGeneralPracticeStartDate(pm.variables.get(\"PDStoday\"))\r",
															"}, 5000);\r",
															"\r",
															"//Send HL7 Retrieve message for follow on checks\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"//Check the HL7 Response for changes\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GeneralPracticeIs('1')\r",
															"      HL7response.assertHL7GeneralPracticeCodeIs(pm.variables.get(\"gpValue\"))\r",
															"      HL7response.assertHL7GeneralstartDateIs(pm.variables.get(\"today\"))\r",
															"}, 5000);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"{{generalPracticeId}}\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"{{PDStoday}}\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"{{gpValue}}\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "8532c0f0-4e28-4aa8-aded-9e0a227f6fe8",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a general Practice to a Patient with full patch payload where a GP already exists."
											},
											"response": []
										},
										{
											"name": "Replace a General Practice to a Patient min patch",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf141a70-c583-47d3-ab9b-ec17f91b1fcd",
														"exec": [
															"/*Send a PDS Search request to obtain the GP Id*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"\r",
															"setTimeout(function () {\r",
															"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
															"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
															"}, 3000);\r",
															"\r",
															"\r",
															"/*set the GP code*/\r",
															"pm.variables.set(\"gpValue\", \"V81998\")\r",
															"\r",
															"/*create todays date in the correct format*/\r",
															"var today = require('moment');\r",
															"pm.variables.set(\"today\", today().format(\"YYYYMMDD\"));\r",
															"pm.variables.set(\"PDStoday\", today().format(\"YYYY-MM-DD\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9d49610c-0ae9-47e6-9bfa-0395f2401fb1",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGeneralPracticeIs(pm.variables.get(\"gpValue\"))\r",
															"PDSUpdateResponse.assertGeneralPracticeStartDate(pm.variables.get(\"PDStoday\"))\r",
															"}, 5000);\r",
															"\r",
															"//Send HL7 Retrieve message for follow on checks\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"//Check the HL7 Response for changes\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GeneralPracticeIs('1')\r",
															"      HL7response.assertHL7GeneralPracticeCodeIs(pm.variables.get(\"gpValue\"))\r",
															"      HL7response.assertHL7GeneralstartDateIs(pm.variables.get(\"today\"))\r",
															"}, 5000);\r",
															"\r",
															"pm.globals.set(\"nhsIDGPExists\", pm.globals.get(\"nhsID\"))"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"{{generalPracticeId}}\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"{{gpValue}}\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "54dc284e-5483-45a1-ab38-2efada33fa63",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a general Practice to a Patient with full patch payload where a GP already exists."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Replace",
											"item": [
												{
													"name": "Replace a generalPractitioner where the generalPractitioner.id is incorrect",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b68299c8-8a9a-4e46-b137-01c62fc722d6",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Object ID does not match supplied index for path='/generalPractitioner/0' with resource id=\\'\" + pm.variables.get(\"generalPracticeId\") + \"\\' and patch id='183993'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5810c655-e433-4bc8-84e6-9c92e774dd3d",
																"exec": [
																	"pm.globals.set(\"nhsID\", pm.globals.get(\"nhsIDGPExists\"))\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"183993\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"V81998\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the generalPractitioner.id is incorrect, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where the identifier.value is missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "326ce2c6-4bc5-4f19-b9cc-0fa0913981f6",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.include(\"Invalid update with error - Object ID does not match supplied index for path='/generalPractitioner/0' with resource id=\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "07c7954a-707e-4134-a8d3-51a9744bdcbc",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"183993\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"V81998\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the identifier.value is missing, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where the period.start is in the future",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a042959d-db9b-4a47-8f5c-a557a0d31b79",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - general practice business effective start date cannot be in the future\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "1aa157af-b7d8-4e01-8db4-c69f86ad120f",
																"exec": [
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);\r",
																	"\r",
																	"/*set a new date to tomorrow*/\r",
																	"var date = new Date();\r",
																	"date.setDate(date.getDate() + 1);\r",
																	"var tomorrow = date.toISOString().substr(0, 10);\r",
																	"pm.variables.set(\"tomorrow\", tomorrow)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"{{generalPracticeId}}\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"{{tomorrow}}\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81998\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the identifier.value is missing, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where the Path is incorrect",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3f345871-5bdd-407e-88ef-d847e9acf696",
																"exec": [
																	"/*Perform checks on the Error Response*/\r",
																	"let response = pm.response.json();\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - 'generalPractitioner/0' is not a 'json-pointer'\");\r",
																	"        pm.expect(response.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "7df7cd93-8938-4edb-97d8-8c2840bbba0e",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"183993\",\r\n\t\t\"identifier\": {\r\n      \"value\": \"V81999\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the identifier.value is missing, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where the period.start is incorrect format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8a21300d-d6ce-4f17-a504-bef0e7aaa886",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - '20010101' in field 'generalPractitioner/1/identifier/period/start'\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "75c45cc6-98cb-4c56-887e-a7f99186b449",
																"exec": [
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n      \"id\": \"{{generalPracticeId}}\",\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"20010101\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the identifier.value is missing, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where the period.end date is populated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "31b0360e-35d6-4fcb-b23b-71d16e2ebecf",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - general practice business effective end date cannot be set\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "be09e803-742c-4260-afa1-91c0c7269ad9",
																"exec": [
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n\t\t\"id\": \"{{generalPracticeId}}\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"2001-01-01\",\r\n\t\t\t\t\"end\" : \"2003-01-01\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where the period.end date is populated, results in an error."
													},
													"response": []
												},
												{
													"name": "Remove a generalPractitioner is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "505f0657-987d-4b7c-afef-09a04afbc8b9",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(403);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"FORBIDDEN_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Forbidden update with error - Update Rejected - source not permitted to remove a GP Registration\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"information\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "2480f0ed-e140-4404-9328-e68731a51ec1",
																"exec": [
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/generalPractitioner/0/id\",\r\n      \"value\": \"{{generalPracticeId}}\"\r\n    },\r\n\t{\r\n      \"op\": \"remove\",\r\n      \"path\": \"/generalPractitioner/0\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a generalPractitioner is not permitted, results in an error."
													},
													"response": []
												},
												{
													"name": "Replace a generalPractitioner where one does not already exist",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5746c786-f5ae-4073-a459-01d0ea9e1713",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - list assignment index out of range\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "80725526-3266-47b0-a37c-b33f2af47cb4",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
																	"======================================================================================================*/\r",
																	"\r",
																	"/*Build a HL7 xml Request with random Patient Data*/\r",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
																	"\r",
																	"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/generalPractitioner/0\",\r\n      \"value\": {\r\n      \t\"id\": \"183993\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"V81998\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a generalPractitioner where one does not already exist, results in an error."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add",
											"item": [
												{
													"name": "Add a generalPractitioner - where the same one already exists",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0b2d4713-4aa8-42d6-8ebb-efc2768f175f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let updateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    \r",
																	"    pm.test(\"The correct error response has been returned\" , () => {\r",
																	"        pm.expect(updateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple general practices\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "bedfc63e-9a8c-40d6-b589-30cdcb102989",
																"exec": [
																	"pm.globals.set(\"nhsID\", pm.globals.get(\"nhsIDGPExists\"))\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the GP Id*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"let pdsRetrieveResponse = pm.variables.get(\"pdsRetrieveResponse\")\r",
																	"pm.variables.set(\"generalPracticeId\", pdsRetrieveResponse.generalPractitioner[0].id)\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"{{generalPracticeId}}\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "b92f768a-5f5b-4933-9c60-baadc9ec6a3b",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalParactitioner where generalPractitioner.id is passed into the patch, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalParactitioner where generalPractitioner.id is passed into the patch",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "70cd842c-01ef-43a2-b599-56552b519076",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Data id should not be provided on addition with id=62729302\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "111b6666-2ebe-44c0-8751-47403b208317",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
																	"======================================================================================================*/\r",
																	"\r",
																	"/*Build a HL7 xml Request with random Patient Data*/\r",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
																	"\r",
																	"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n        \"id\": \"62729302\",\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"V81998\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalParactitioner where generalPractitioner.id is passed into the patch, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the Path is incorrect",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1584dabb-6f52-4c6b-967b-fb4ae92944fb",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - \\'\\' is not a valid sequence index\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "828289d1-f40e-4ec3-93a2-a57e44ae5b9b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"2001-01-01\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the Path is incorrect, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the period.start is in the future",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8eecb455-5f8e-458a-b49a-bc0c55a9f975",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - general practice business effective start date cannot be in the future\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "86250273-4313-48c4-9034-54cc2cbf01da",
																"exec": [
																	"/*set a new birthdate to tomorrow*/\r",
																	"var date = new Date();\r",
																	"date.setDate(date.getDate() + 1);\r",
																	"var tomorrow = date.toISOString().substr(0, 10);\r",
																	"pm.variables.set(\"tomorrow\", tomorrow)\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"{{tomorrow}}\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the period.start is in the future, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the identifier.value is missing",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b25a4cfd-9562-498c-954b-40e12d20fc0b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - Provided patch made no changes to the resource\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "93af543a-bd7c-4dde-b677-8034502c158b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the identifier.value is missing, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the practice code is invalid",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "825f4f24-18c3-48e9-8232-e5390f245d62",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'V12345}' in field 'generalPractitioner/0/identifier/value'\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5febcef8-319d-4daf-ad37-981a5ca5e779",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"value\": \"V12345}\"\r\n\t\t}\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the practice code is invalid, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the period.start is incorrect format",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "223350cc-0742-4f37-bb1c-fa4b68d76efb",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - \\'20010101\\' in field \\'generalPractitioner/0/identifier/period/start'\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "59cb0823-015e-4178-af23-547c36f8665b",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"20010101\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the period.start is incorrect format, results in an error."
													},
													"response": []
												},
												{
													"name": "Add a generalPractitioner where the period.end date is populated",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "56f7dce4-83ac-4b66-955c-58b48e196e2f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - general practice business effective end date cannot be set\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
																	"        });\r",
																	"}, 4000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "79a6db1f-443d-47ba-b099-69dabb31daa6",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/generalPractitioner/-\",\r\n      \"value\": {\r\n\t\t\"identifier\": {\r\n\t\t\t\"period\": {\r\n\t\t\t\t\"start\": \"2001-01-01\",\r\n\t\t\t\t\"end\" : \"2003-01-01\"\r\n\t\t\t},\r\n\t\t\t\"system\": \"https://digital.nhs.uk/services/organisation-data-service\",\r\n\t\t\t\"value\": \"V81999\"\r\n\t\t},\r\n\t\t\"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/B86055\",\r\n\t\t\"type\": \"Organization\"\r\n\t}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1f52a53b-0385-41a5-b916-2ffd15ed8c30",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a generalPractitioner where the period.end date is populated, results in an error."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Name",
							"item": [
								{
									"name": "Error Scenarios",
									"item": [
										{
											"name": "Add: Invalid start date to Patient returns INVALID_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d62e85cd-77ef-4703-896b-60341a3070a1",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_VALUE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - '20009-07-09' in field 'name/0/period/start'\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ec3b743-18f1-42c2-915c-87132b01c5db",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"3\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"69BB7C85\"},\n      { \"op\": \"add\", \"path\": \"/name/0/period/start\", \"value\": \"20009-07-09\" }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												}
											},
											"response": []
										},
										{
											"name": "Replace: Use with an invalid name type returns INVALID_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4f012ffd-985e-445b-8b93-25882971b7f1",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_VALUE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'abcdef' in field 'name/0/use'\");",
															"    });",
															"",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6fcf65fc-8678-495a-8d74-b12de6bb3580",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"3\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"69BB7C85\"},\n       { \"op\": \"replace\", \"path\": \"/name/0/use\", \"value\": \"abcdef\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove: Usual name type returns FORBIDDEN_UPDATE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b1f29f04-4382-48cf-902e-701cafc34623",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - not permitted to remove usual name\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "71e52d32-ffb6-44a3-9985-addf2221d701",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"3\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"69BB7C85\" },\n       { \"op\": \"remove\", \"path\": \"/name/0\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove: Use type returns INVALID_UPDATE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3078f320-fb51-40da-93f2-c1dee1153091",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"MISSING_VALUE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Missing value - 'name/0/use'\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5c1a9e04-f6ba-4442-850d-d8ec617b9f1c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"3\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"69BB7C85\"},\n       { \"op\": \"remove\", \"path\": \"/name/0/use\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove: Given name when one does not exist returns INVALID_UPDATE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "719afd95-1de8-4402-960c-977bd29a815b",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid update with error - Invalid patch - Provided patch made no changes to the resource\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "518b04fe-f1ab-49a9-b0cc-763e29186e3e",
														"exec": [
															"// Patient 5900000567 does not have a Given Name"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"3\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"69BB7C85\" },\n       { \"op\": \"remove\", \"path\": \"/name/0/given\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove: Start date returns INVALID_UPDATE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a470da05-5ff9-4951-8740-77b2e1b34339",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid update with error - period start cannot be removed - only replaced\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "efe99589-160f-4dd7-9ce8-ce6eb59122f9",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900010503\");",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"2C3F0DDD\" },\n      { \"op\": \"remove\", \"path\": \"/name/0/period/start\"}\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900010503",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900010503"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add:  End date to Patient record which is before start date returns INVALID_UPDATE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8b00603c-2eea-445c-b5a6-159b5bde2d9e",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal('Invalid update with error - business effective start date is after the end date');",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "04fb8b5d-b210-461e-9670-6b6b4ea09c51",
														"exec": [
															"pm.globals.set('nhsID', '5900010503');",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"2C3F0DDD\"},\n      { \"op\": \"add\", \"path\": \"/name/0/period/end\", \"value\": \"1929-07-09\" }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900010503",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900010503"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add: Suffix which does not start with A-Z returns INVALID_VALUE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "93edbbe2-37a3-441d-a632-659dea165f02",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900008762\");",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dfacbaed-b359-4cef-bebd-3651ee30ea34",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {    ",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    ",
															"    pm.test('Returns INVALID_VALUE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'phd' in field 'suffix/1'\");",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"F93FA243\"},\n      { \"op\": \"add\", \"path\": \"/name/0/suffix/-\", \"value\": \"phd\"}            \n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900008762",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900008762"
													]
												},
												"description": "Patch: Add a Suffix to a Patients name"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Add",
											"item": [
												{
													"name": "Add: Given name without defining location",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5ea336a3-b0a4-49cc-8c6d-3be69cc02c38",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate Random first name",
																	"let randomFirstName = pm.variables.replaceIn('{{$randomLastName}}');",
																	"pm.variables.set('randomFirstName', randomFirstName);",
																	"console.log('Randomly generated first name is', randomFirstName);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9cefc8c9-6060-44db-97da-442f5d62c417",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let givenName = pm.variables.get('randomFirstName');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name contains the Given name ' + givenName, () => {",
																	"        pm.expect(response.name[0].given).to.contain(givenName);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/given/-\", \"value\": \"{{randomFirstName}}\"}     \n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: End date to Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "54d1c0cf-0d0f-41b6-8f7b-667f55dd62c1",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let endDate = '2030-07-09';",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name contains the End Date ' + endDate, () => {",
																	"        pm.expect(response.name[0].period.end).to.eql(endDate);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "40f39b08-2954-4762-9b8d-16b8ac2415e1",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/period/end\", \"value\": \"2030-07-09\" }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Nickname name type to Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4dbb3347-505b-4228-a6f0-ce96ffa765ea",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    let names = response.name;",
																	"",
																	"    let name = names.filter(name => {",
																	"        return name.use === 'nickname';",
																	"    })    ",
																	"",
																	"    pm.test('Patient Name contains Nickname', () => {",
																	"        pm.expect(name[0].family).to.equal('Unknown', 'invalid family value');",
																	"        pm.expect(name[0].given[0]).to.equal('Person', 'invalid Given value');",
																	"        pm.expect(name[0].period.start).to.equal('2020-02-26', 'invalid period.start value');",
																	"        pm.expect(name[0].prefix[0]).to.equal('Lady', 'invalid prefix value');",
																	"        pm.expect(name[0].use).to.equal('nickname', 'invalid use value');",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c769b718-2fd3-4428-a775-6c474594eccb",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n        {\n            \"op\": \"add\",\n            \"path\": \"/name/-\",\n            \"value\": {\n                \"family\": \"Unknown\",\n                \"given\": [\n                    \"Person\"\n                ],                \n                \"period\": {\n                    \"start\": \"2020-02-26\"\n                },\n                \"prefix\": [\n                    \"Lady\"\n                ],\n                \"use\": \"nickname\"\n            }\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Maiden name type to Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "159ffdae-d930-4caf-baaa-b878ee87f895",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    let names = response.name;",
																	"",
																	"    let name = names.filter(name => {",
																	"        return name.use === 'maiden';",
																	"    })",
																	"",
																	"    pm.test('Patient Name contains Maiden name', () => {",
																	"        pm.expect(name[0].family).to.equal('Mister', 'invalid family value');",
																	"        pm.expect(name[0].given[0]).to.equal('Any', 'invalid Given value');",
																	"        pm.expect(name[0].period.start).to.equal('2020-02-27', 'invalid period.start value');",
																	"        pm.expect(name[0].prefix[0]).to.equal('Mr', 'invalid prefix value');",
																	"        pm.expect(name[0].use).to.equal('maiden', 'invalid use value');",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "cfacb1c6-e97d-4e3b-9082-7964d40fce13",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n        {\n            \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n            {\"op\": \"add\",\n            \"path\": \"/name/-\",\n            \"value\": {\n                \"family\": \"Mister\",\n                \"given\": [\n                    \"Any\"\n                ],                \n                \"period\": {\n                    \"start\": \"2020-02-27\"\n                },\n                \"prefix\": [\n                    \"Mr\"\n                ],\n                \"use\": \"maiden\"\n            }\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Given name to Patient record",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c0eeb539-d61d-4da3-a2e7-5fbe7c0b3538",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate Random first name",
																	"let randomFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
																	"pm.variables.set('randomFirstName', randomFirstName);",
																	"console.log('Randomly generated first name is', randomFirstName);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "795ffb12-43b2-438a-910e-c8ad2e0aece0",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let givenName = pm.variables.get('randomFirstName');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name contains the Given name ' + givenName, () => {",
																	"        pm.expect(response.name[0].given).to.contain(givenName);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"value": "{{metaVersionId}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json-patch+json",
																"type": "text"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"value": "{{from_asid}}",
																"type": "text"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "{{role_id}}",
																"type": "text"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "{{user_id}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/given/-\", \"value\": \"{{randomFirstName}}\"}     \n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Family name to Patient record",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "619eb19b-5026-406b-941e-449c7086e6cb",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate Random first name",
																	"let randomLastName = pm.variables.replaceIn('{{$randomLastName}}');",
																	"pm.variables.set('randomLastName', randomLastName);",
																	"console.log('Randomly generated last name is', randomLastName);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "69aecb1f-0aad-4fa3-8747-4daea0d8960f",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let randomLastName = pm.variables.get('randomLastName');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Family Name is ' + randomLastName, () => {",
																	"        pm.expect(response.name[0].family).to.equal(randomLastName);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/family\", \"value\": \"{{randomLastName}}\"}     \n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Family name with consecutive spaces to Patient record sanitises name",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8fc7a87d-4cc5-409a-8bb6-11968f8aca75",
																"exec": [
																	"pm.globals.set('nhsID','5900004236');",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();",
																	"",
																	"// Generate Random first name",
																	"let randomFamilyName = pm.variables.replaceIn('{{$randomLastName}}');",
																	"pm.variables.set('randomFamilyName', randomFamilyName);",
																	"console.log('Randomly generated last name is', randomFamilyName);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "728bce40-324e-423a-bf5b-9958564e9ceb",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let randomFamilyName = pm.variables.get('randomFamilyName');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Family Name is ' + randomFamilyName + \" \" + randomFamilyName, () => {",
																	"        pm.expect(response.name[0].family).to.equal(randomFamilyName + \" \" + randomFamilyName );",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"58400441\"},\n      { \"op\": \"add\", \"path\": \"/name/0/family\", \"value\": \"{{randomFamilyName}}  {{randomFamilyName}}\"}     \n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/5900004236",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"5900004236"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add Start date to Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f83fb2b7-a4de-49af-9a9e-3a1dc0d3778a",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let startDate = '2009-07-09';",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name contains the Start Date 2009-07-09', () => {",
																	"        pm.expect(response.name[0].period.start).to.eql(startDate);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0d0f8673-85b3-451b-b314-41c8b8476447",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},    \n      { \"op\": \"add\", \"path\": \"/name/0/period/start\", \"value\": \"2009-07-09\" }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add: Suffix to Patient record",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b4fb3454-6b3a-43b2-88df-4bef2da5e5f1",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2dac65f6-3fd3-49ed-b850-b6c7755b4089",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let suffix = 'Phd';",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block contains the Suffix: ' + suffix, () => {",
																	"        pm.expect(response.name[0].suffix).to.contain(suffix);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/suffix/0\", \"value\": \"Phd\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch: Add a Suffix to a Patients name"
													},
													"response": []
												},
												{
													"name": "Add: Multiple Suffixes to Patients record",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d1e8116f-b1f5-49c0-b72a-69aa0fbdf031",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "996e4608-d705-4f6d-ab39-5b59975bbe3d",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block contains the correct Suffixes', () => {",
																	"        pm.expect(response.name[0].suffix).to.contain(\"Phd\");",
																	"        pm.expect(response.name[0].suffix).to.contain(\"Jnr\");",
																	"        pm.expect(response.name[0].suffix).to.contain(\"Snr\");",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/suffix/-\", \"value\": \"Phd\"},\n      { \"op\": \"add\", \"path\": \"/name/0/suffix/-\", \"value\": \"Snr\"},\n      { \"op\": \"add\", \"path\": \"/name/0/suffix/-\", \"value\": \"Jnr\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch: Add a Suffix to a Patients name"
													},
													"response": []
												},
												{
													"name": "Add:  Prefix to Patient record",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "afca7e08-03e9-46d5-b9ce-6e82fd3c96a5",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "0aec4d49-de54-4866-8767-70bcab57ba59",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let prefix = 'Mrs';",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block contains the Prefix: ' + prefix, () => {",
																	"        pm.expect(response.name[0].prefix).to.contain(prefix);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n      { \"op\": \"add\", \"path\": \"/name/0/prefix/0\", \"value\": \"Mrs\" }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch: Add a Prefix to a Patients name"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Replace",
											"item": [
												{
													"name": "Replace: Multiple patches in single request",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "73191c0d-7a29-4c18-956e-ea257c8e4e39",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate Random first name",
																	"let randomFamilyName = pm.variables.replaceIn('{{$randomLastName}}');",
																	"pm.variables.set('randomLastName', randomFamilyName);",
																	"console.log('Randomly generated first name is', randomFamilyName);",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bff2c334-b963-4ccd-87ce-eb7caf049055",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let lastName = pm.variables.get('randomLastName');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name contains the Family name ' + lastName, () => {",
																	"        pm.expect(response.name[0].family).to.contain(lastName);",
																	"    });",
																	"",
																	"    pm.test('Patient does not contain a Given name', () => {",
																	"        pm.expect(response.name[0].given).to.equal(undefined);",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [      \n      { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n      { \"op\": \"remove\", \"path\": \"/name/0/given\"},\n      { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n      { \"op\": \"replace\", \"path\": \"/name/0/family\", \"value\": \"{{randomLastName}}\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: Suffix in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "def07d64-ad2d-47e4-bd48-abbcc93bdb53",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block does not contain the Suffix Bsc', () =>{",
																	"        pm.expect(response.name[0].suffix).to.not.contain('Bsc');",
																	"    })",
																	"    ",
																	"    pm.test('Patient Name block contains the Suffix BEng', () => {",
																	"        pm.expect(response.name[0].suffix).to.contain('BEng');",
																	"    });",
																	"",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "acc5df16-fed4-4a27-82e0-052bc342a268",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/suffix/0\", \"value\": \"BEng\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: Family name in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5ffe0add-983f-4c66-99c2-e8602553a8cd",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let familyName = pm.variables.get('new.family.name');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block contains the family name ' + familyName, () =>{",
																	"        pm.expect(response.name[0].family).to.equal(familyName);",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4611f931-526c-4d0a-8f40-3a943af9e3b9",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate a random family name",
																	"let familyName = pm.variables.replaceIn('{{$randomLastName}}');",
																	"pm.variables.set('new.family.name', familyName);",
																	"console.info(\"new family name\", familyName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/family\", \"value\": \"{{new.family.name}}\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: A Given name in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ae9d2c52-959f-448a-9376-06322baa2090",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let givenName = pm.variables.get('new.given.name');",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block contains the given name ' + givenName, () =>{",
																	"        pm.expect(response.name[0].given).contains(givenName);",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "70fac3da-7b0c-4042-b3f5-37b9c30960f9",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// Generate a random family name",
																	"let givenName = pm.variables.replaceIn('{{$randomFirstName}}');",
																	"pm.variables.set('new.given.name', givenName);",
																	"console.info(\"new given name\", givenName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/given/0\", \"value\": \"{{new.given.name}}\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: Prefix in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7d3a4428-dbec-4442-b6ea-32f8a38e237c",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block does not contain the Prefix Mr', () =>{",
																	"        pm.expect(response.name[0].prefix).to.not.contain('Mr');",
																	"    })",
																	"    ",
																	"    pm.test('Patient Name block contains the Prefix Master', () => {",
																	"        pm.expect(response.name[0].prefix).to.contain('Master');",
																	"    });",
																	"",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a50e4168-7097-46ed-a692-521df7591312",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/prefix/0\", \"value\": \"Master\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: Start date in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c4278b03-ad12-44f4-9fee-bcb15a8f28b9",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block Start date is 2000-06-11', () =>{",
																	"        pm.expect(response.name[0].period.start).to.equal('2000-06-11');",
																	"    })",
																	"",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c90a938f-ceb0-4114-af7c-ad9ec18b45a0",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/period/start\", \"value\": \"2000-06-11\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: End date in Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9b90c78b-5432-4f40-912d-e09d50baab9d",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"let endDate = pm.variables.get(\"endDate\");",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name block End date is ' + endDate, () =>{",
																	"        pm.expect(response.name[0].period.end).to.equal(endDate);",
																	"    })",
																	"",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d20b9b2e-94cd-4631-9549-8782db1db4a4",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"",
																	"",
																	"let resp;",
																	"",
																	"// Need to give the patient an end date first",
																	"setTimeout(function () {    ",
																	"    var Header = require('postman-collection').Header;",
																	"    let asidHeader = pm.environment.get(\"asidHeader\");",
																	"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
																	"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
																	"    let authorization = pm.environment.get(\"authorizationHeader\");",
																	"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
																	"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
																	"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
																	"    ",
																	"    pm.sendRequest({",
																	"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
																	"        method: 'PATCH',",
																	"        header: {",
																	"            authorization,",
																	"            asidHeader,",
																	"            sessionURIDHeader,",
																	"            identityUUIDHeader,",
																	"            correlationIdHeader,",
																	"            contentType,",
																	"            ifMatch",
																	"        },",
																	"        ",
																	"        body: '{\"patches\":[{ \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"' + pm.variables.get('name.id') + '\"},{ \"op\": \"add\", \"path\": \"/name/0/period/end\", \"value\": \"2030-07-09\" }]}'",
																	"",
																	"    }, function (err, response) {",
																	"        resp = response;        ",
																	"    });",
																	"}, 7000);",
																	"",
																	"",
																	"setTimeout(function () {",
																	"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"    POLLER.retrieveMessage(resp, false);    ",
																	"}, 16000);",
																	"",
																	"var today = require('moment');",
																	"pm.variables.set(\"endDate\", today().format(\"YYYY-MM-DD\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0/period/end\", \"value\": \"{{endDate}}\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Replace: Usual type with another Usual type",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2252ec6a-e5cd-4e58-8234-8de49e3564cc",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    let names = response.name;",
																	"",
																	"    let name = names.filter(name => {",
																	"        return name.use === 'usual';",
																	"    })",
																	"",
																	"    pm.test('Patient Name contains usual name', () => {",
																	"        pm.expect(name[0].family).to.equal('Smithson', 'invalid family value');",
																	"        pm.expect(name[0].given[0]).to.equal('Tester', 'invalid Given value');",
																	"        pm.expect(name[0].period.start).to.equal('2020-02-27', 'invalid period.start value');",
																	"        pm.expect(name[0].prefix[0]).to.equal('Mrs', 'invalid prefix value');",
																	"        pm.expect(name[0].use).to.equal('usual', 'invalid use value');",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8d764cf9-4ce0-4b58-beda-3ac3d233f1ba",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"replace\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"replace\", \"path\": \"/name/0\", \"value\": {\n                \"id\": \"{{name.id}}\",\n                \"family\": \"Smithson\",\n                \"given\": [\n                    \"Tester\"\n                ],                \n                \"period\": {\n                    \"start\": \"2020-02-27\"\n                },\n                \"prefix\": [\n                    \"Mrs\"\n                ],\n                \"use\": \"usual\"\n            }}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Remove",
											"item": [
												{
													"name": "Remove: Prefix from Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d06b47bc-2095-461a-873d-10721e5560f7",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name does not contain a Prefix', () => {",
																	"        pm.expect(response.name[0].prefix).to.equal(undefined);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "07f747ea-ef38-46eb-809a-ed2a8064d7db",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\"},\n       { \"op\": \"remove\", \"path\": \"/name/0/prefix/0\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove: Suffix from Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f091d6b7-5fba-4b6e-9f4a-167c8734e85a",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name does not contain a Suffix', () => {",
																	"        pm.expect(response.name[0].suffix).to.equal(undefined);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "813690ea-c042-424e-aa52-8e4743bc9790",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n       { \"op\": \"remove\", \"path\": \"/name/0/suffix/0\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove: Nickname name type",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8752defd-bbed-413d-b9bc-d9d3a5c3de3b",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Returns only the one name type', () => {",
																	"        pm.expect(response.name).to.have.lengthOf(1);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "9bf1494f-69e3-42ea-b5ed-809d920e4eda",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"",
																	"",
																	"let resp;",
																	"",
																	"// Need to give the patient an end date first",
																	"setTimeout(function () {    ",
																	"    var Header = require('postman-collection').Header;",
																	"    let asidHeader = pm.environment.get(\"asidHeader\");",
																	"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
																	"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
																	"    let authorization = pm.environment.get(\"authorizationHeader\");",
																	"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
																	"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
																	"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
																	"    ",
																	"    pm.sendRequest({",
																	"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
																	"        method: 'PATCH',",
																	"        header: {",
																	"            authorization,",
																	"            asidHeader,",
																	"            sessionURIDHeader,",
																	"            identityUUIDHeader,",
																	"            correlationIdHeader,",
																	"            contentType,",
																	"            ifMatch",
																	"        },",
																	"        body: '{\"patches\":[{\"op\": \"add\",\"path\": \"/name/-\",\"value\":{\"family\":\"Unknown\",\"given\":[\"Person\"],\"period\":{\"start\":\"2020-02-26\"},\"prefix\":[\"Lady\"],\"use\": \"nickname\"}}]}'",
																	"",
																	"    }, function (err, response) {",
																	"        resp = response;        ",
																	"    });",
																	"}, 7000);",
																	"",
																	"",
																	"setTimeout(function () {",
																	"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"    POLLER.retrieveMessage(resp, false);",
																	"    let response;",
																	"    setTimeout(() => {",
																	"        response = pm.variables.get(\"pdsUpdateResponse\")",
																	"        console.info('This response is', response);",
																	"        let names = response.name;",
																	"        let name = names.filter(name => {",
																	"            return name.use === 'nickname';",
																	"        })",
																	"",
																	"        pm.variables.set('name.id', name[0].id);",
																	"",
																	"    }, 2000);",
																	"",
																	"}, 16000);",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [       \n       { \"op\": \"test\", \"path\": \"/name/1/id\", \"value\": \"{{name.id}}\"},\n       { \"op\": \"remove\", \"path\": \"/name/1\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Remove: End date",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "66d92e68-9dc8-4ff7-a0f9-505f3a24514b",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {    ",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    ",
																	"    pm.test('Patient Name does not contain end date ', () => {",
																	"        pm.expect(response.name[0].period.end).to.eql(undefined);",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "ab6e8bc6-e910-4ccc-ab90-00ef544aad2c",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"// console.log(pm.globals.get('nhsID'));",
																	"",
																	"let resp;",
																	"",
																	"// Need to give the patient an end date first",
																	"setTimeout(function () {    ",
																	"    var Header = require('postman-collection').Header;",
																	"    let asidHeader = pm.environment.get(\"asidHeader\");",
																	"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
																	"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
																	"    let authorization = pm.environment.get(\"authorizationHeader\");",
																	"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
																	"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
																	"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
																	"    ",
																	"    pm.sendRequest({",
																	"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
																	"        method: 'PATCH',",
																	"        header: {",
																	"            authorization,",
																	"            asidHeader,",
																	"            sessionURIDHeader,",
																	"            identityUUIDHeader,",
																	"            correlationIdHeader,",
																	"            contentType,",
																	"            ifMatch",
																	"        },",
																	"        body: '{\"patches\":[{ \"op\": \"add\", \"path\": \"/name/0/id\", \"value\": \"' + pm.variables.get('name.id') + '\"},{ \"op\": \"add\", \"path\": \"/name/0/period/end\", \"value\": \"2030-07-09\" }]}'",
																	"    ",
																	"    }, function (err, response) {",
																	"        resp = response;        ",
																	"    });",
																	"}, 7000);",
																	"",
																	"",
																	"setTimeout(function () {    ",
																	"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"    POLLER.retrieveMessage(resp, false);",
																	"}, 16000);",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "W/\"2\""
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"patches\": [\n      { \"op\": \"test\", \"path\": \"/name/0/id\", \"value\": \"{{name.id}}\" },\n      { \"op\": \"remove\", \"path\": \"/name/0/period/end\"}\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f0d91bd1-336e-4de5-9e30-d229aaba28ba",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c9691334-40c9-435a-a594-867cdbde7ecd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Place of Birth",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Update - Place of Birth: Add",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f2490b1-4c0c-4ac6-95d5-2805fc8d60da",
														"exec": [
															"var expectedResponse = {",
															"            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",",
															"            \"valueAddress\": {",
															"                \"city\": \"Wolverhampton\",",
															"                \"country\": \"GBR\",",
															"            }",
															"        }",
															"",
															"",
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"// //Check that the Update Response has been populated correctly with new updates",
															"setTimeout(function () {",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));",
															"PDSUpdateResponse.assertPlaceOfBirthHasBeenUpdated(expectedResponse)",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6944c477-8ea8-4df1-a3aa-ffba6a20b999",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/extension/-\",\n            \"value\": {\n            \t\"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \t\"valueAddress\": {\n                \t\"city\": \"Wolverhampton\",\n                \t\"country\": \"GBR\"\n            \t}\n        \t}\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Remove",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "97375abd-9660-45f3-b782-29583a9717ef",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();",
															"",
															"var placeOfBirthPatch = {",
															"    \"patches\": [",
															"      { ",
															"            \"op\": \"add\",",
															"            \"path\": \"/extension/-\",",
															"            \"value\": {",
															"            \t\"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",",
															"            \t\"valueAddress\": {",
															"                \t\"city\": \"Bradford\",",
															"                \t\"country\": \"GBR\"",
															"            \t}",
															"        \t}",
															"     }",
															"  ]",
															"}",
															"",
															"// Update new paitent with a place of birth",
															"setTimeout(function () {",
															"    var Header = require(\"postman-collection\").Header;",
															"    let authorization = pm.environment.get(\"authorizationHeader\");",
															"    let asidHeader = pm.environment.get(\"asidHeader\");",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
															"",
															"     pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
															"        method: 'PATCH',",
															"        header: {",
															"            authorization,",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            contentType,",
															"            correlationIdHeader,",
															"            ifMatch",
															"        },",
															"        body: JSON.stringify(placeOfBirthPatch)",
															"    }, function (err, response) {",
															"        pm.test(\"Check Patch returns 202\", () => {",
															"            pm.expect(response.code).to.equal(202);",
															"        });",
															"",
															"        // /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"        eval(pm.globals.get(\"SendPDSSearch\"))();",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "869ea859-2161-470c-8f2f-57252fde3430",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"//Check that the Update Response has been populated correctly with new updates",
															"setTimeout(function () {",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));",
															"PDSUpdateResponse.assertPlaceOfBirthHasBeenRemoved()",
															"}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n        {\n            \"op\": \"test\",\n            \"path\": \"/extension/1\",\n            \"value\": {\n                \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n                \"valueAddress\": {\n                \t\"city\": \"Bradford\",\n                \t\"country\": \"GBR\"                \n                }\n            }\n        },\n        {\n            \"op\": \"remove\",\n            \"path\": \"/extension/1\",\n            \"value\": {\n                \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n                \"valueAddress\": {\n                \t\"city\": \"Bradford\",\n                \t\"country\": \"GBR\"                \n                }\n            }\n        }\n    ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Replace",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d2e014df-fef8-4985-a232-bdf4c933487c",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")",
															"",
															"//Retrieve Pateient",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();",
															"",
															"// Random city",
															"pm.variables.set(\"city\", pm.variables.replaceIn(\"{{$randomCity}}\"));",
															"",
															"// Random country code",
															"pm.variables.set(\"countryCode\", \"USA\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f58f2f9b-bdf0-4ccf-aff5-5d49ae5bed29",
														"exec": [
															"var expectedResponse = {",
															"            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",",
															"            \"valueAddress\": {",
															"                \"city\": pm.variables.get(\"city\"),",
															"                \"country\": pm.variables.get(\"countryCode\")",
															"            }",
															"        }",
															"",
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"// //Check that the Update Response has been populated correctly with new updates",
															"setTimeout(function () {",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));",
															"PDSUpdateResponse.assertPlaceOfBirthHasBeenUpdated(expectedResponse)",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"replace\",\n            \"path\": \"/extension/0\",\n            \"value\": {\n            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \"valueAddress\": {\n                \t\"city\": \"{{city}}\",\n                \t\"country\": \"{{countryCode}}\"\n            }\n        }\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Add Optional",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2e3b804c-2187-4f75-8b95-15c69d7f8b4c",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b692d036-f207-48bc-9c24-c1bf9facf4a0",
														"exec": [
															"var expectedResponse = {",
															"            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",",
															"            \"valueAddress\": {",
															"                \"district\": \"West Yorkshire\"",
															"            }",
															"        }",
															"",
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response has been populated correctly with new updates",
															"setTimeout(function () {",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));",
															"PDSUpdateResponse.assertPlaceOfBirthHasBeenUpdated(expectedResponse)",
															"}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/extension/-\",\n            \"value\": {\n            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \"valueAddress\": {\n                \"district\": \"West Yorkshire\"\n            \t}\n        }\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Update - Place of Birth: Add Empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e597cde1-a0e4-4765-a74a-d5debeeef5c0",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900016943\")",
															"",
															"//Retrieve Pateient",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2593d109-1ed8-414f-9b22-353f4ba56f92",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            console.log(error)",
															"            pm.expect(error.details.coding[0].code).to.eql(\"MISSING_VALUE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Missing value - 'valueAddress'\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/extension/-\",\n            \"value\": {\n            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \"valueAddress\": {}\n        }\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900016943",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016943"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Add Already Exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "338b7919-fe64-430f-ab70-804a3fd91db4",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            pm.expect(error.details.coding[0].code).to.eql(\"INVALID_VALUE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Invalid value with error - Cannot add a data item that already exists\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f0fcb09e-fc3c-4f17-84f1-b6af901e7266",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")\r",
															"\r",
															"//Retrieve Pateient\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/extension/-\",\n            \"value\": {\n            \t\"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \t\"valueAddress\": {\n                \t\"city\": \"Wolverhampton\",\n                \t\"country\": \"1\"\n            \t}\n        \t}\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Add invalid Country Code",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9e3fbd9e-2161-4b5d-8350-10739cf17e21",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900016943\")",
															"",
															"//Retrieve Pateient",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a1ba53a5-ada2-4c05-a88e-8d18d8c1be3d",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            pm.expect(error.details.coding[0].code).to.eql(\"INVALID_VALUE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Invalid value - '997' in field 'country'\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/extension/-\",\n            \"value\": {\n            \t\"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \t\"valueAddress\": {\n                \t\"city\": \"Wolverhampton\",\n                \t\"country\": \"997\"\n            \t}\n        \t}\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900016943",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016943"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Place of Birth: Replace Does Not Exist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f5671fd8-56da-4af2-8e0b-14a5155c69d6",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900020126\")",
															"",
															"//Retrieve Pateient",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5f78a065-ecfe-4eb1-82ba-5eb99e212086",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            pm.expect(error.details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - list assignment index out of range\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"replace\",\n            \"path\": \"/extension/1\",\n            \"value\": {\n            \"url\": \"http://hl7.org/fhir/StructureDefinition/patient-birthPlace\",\n            \"valueAddress\": {\n                \"city\": \"Bradford\",\n                \"country\": \"2\"\n            }\n        }\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900020126",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900020126"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Birth Order",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Update - Birth Order: Add",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f48fe05-e8a3-43b9-8aa9-658844fb91c6",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Update Replace Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\").multipleBirthInteger).to.eql(1);",
															"    });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ab6c84d1-1d83-49ef-881d-54860056dbea",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 1\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Replace",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e575d01-a68e-40ad-96aa-8c5298b05df7",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Update Replace Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\").multipleBirthInteger).to.eql(pm.globals.get(\"birthOrder\"));",
															"    });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3c6531aa-4933-4e96-a0de-39b4cc667232",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")\r",
															"\r",
															"//Retrieve Pateient\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"// Random Birth Order\r",
															"pm.globals.set(\"birthOrder\", _.random(1, 9));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"replace\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": {{birthOrder}}\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Add Not Known",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f622b2d-706c-4904-92d2-e3edf2d0738d",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Update Replace Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\").multipleBirthInteger).to.eql(9);",
															"    });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "23b83ffd-e3c0-42ca-9714-84fe5c544c00",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 9\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Add Not Applicable",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e671dbb2-3688-40fb-aa1f-7403f1794ee3",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Update Replace Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\").multipleBirthInteger).to.eql(8);",
															"    });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fb668ab2-0675-4f60-9d13-ed06d47f2429",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 8\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Remove",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fd8089d-5c51-49a9-a8e6-85d243751f02",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Remove Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\")).to.not.have.property(\"multipleBirthInteger\");",
															"    });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3f36f907-e2fe-4f17-9465-04aa5dca51c0",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"var birthOrder = {\r",
															"    \"patches\": [\r",
															"      { \r",
															"            \"op\": \"add\",\r",
															"            \"path\": \"/multipleBirthInteger\",\r",
															"            \"value\": 7\r",
															"     }\r",
															"  ]\r",
															"}\r",
															"\r",
															"// Update new paitent with a birth order\r",
															"setTimeout(function () {\r",
															"    var Header = require(\"postman-collection\").Header;\r",
															"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
															"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
															"    \r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
															"        method: 'PATCH',\r",
															"        header: {\r",
															"            authorization,\r",
															"            asidHeader,\r",
															"            sessionURIDHeader,\r",
															"            identityUUIDHeader,\r",
															"            contentType,\r",
															"            correlationIdHeader,\r",
															"            ifMatch\r",
															"        },\r",
															"        body: JSON.stringify(birthOrder)\r",
															"    }, function (err, response) {\r",
															"        pm.test(\"Check Patch returns 202\", () => {\r",
															"            pm.expect(response.code).to.equal(202);\r",
															"        });\r",
															"    })\r",
															"}, 6000);\r",
															"\r",
															"setTimeout(function () {\r",
															"    // /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"    eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"}, 8000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"test\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 7\n     },\n           { \n            \"op\": \"remove\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 7\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Add already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a16fafb-7723-4003-8d62-a8271a6a9d58",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    pm.test(\"PDS Update Replace Birth Order\", () => {",
															"        pm.expect(pm.variables.get(\"pdsUpdateResponse\").multipleBirthInteger).to.eql(pm.globals.get(\"birthOrder\"));",
															"    });",
															"}, 3000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a870a9db-73b9-4fac-87af-70c844a6dc32",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")\r",
															"\r",
															"//Retrieve Pateient\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															"\r",
															"// Random Birth Order\r",
															"pm.globals.set(\"birthOrder\", _.random(1, 9));"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": {{birthOrder}}\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Response",
									"item": [
										{
											"name": "Update - Birth Order: Use 0 for value",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7d0a8498-5d8e-463e-8106-9ad87ce84e1b",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            pm.expect(error.details.coding[0].code).to.eql(\"INVALID_VALUE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Invalid value - '0' in field 'multipleBirthInteger'\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "eb0ff6aa-9e4d-4a08-856e-086bbf07fadb",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")\r",
															"\r",
															"//Retrieve Pateient\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"add\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 0\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Birth Order: Invalid Value",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d7fd557c-1c32-4850-a45f-b744bd3dd3de",
														"exec": [
															"//Call the update message polling service to obtain the Update response",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"updateResponse().retrieveMessage(pm.response, true);",
															"",
															"",
															"setTimeout(function () {",
															"        pm.test(\"The correct error response has been returned\" , () => {",
															"            let error = pm.variables.get(\"pdsUpdateErrorResponse\").issue[0]",
															"            pm.expect(error.details.coding[0].code).to.eql(\"INVALID_VALUE\");",
															"            pm.expect(error.details.coding[0].display).to.eql(\"Invalid value - '10' in field 'multipleBirthInteger'\");",
															"            pm.expect(error.severity).to.equal(\"error\");",
															"            pm.expect(error.details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "32ed8604-af20-4ae0-b53a-bf2f7b1d6d54",
														"exec": [
															"pm.globals.set(\"nhsID\",\"5900013545\")\r",
															"\r",
															"//Retrieve Pateient\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"patches\": [\n      { \n            \"op\": \"replace\",\n            \"path\": \"/multipleBirthInteger\",\n            \"value\": 10\n     }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013545",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013545"
													]
												},
												"description": "Update DoB remove is not permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Gender",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Update Gender - Male",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9b95cf7b-8fe9-4517-b874-f1e1a9b01b17",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"/*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"/*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"/*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "394cd1ed-cf34-4871-b6b6-e573be82ba35",
														"exec": [
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"updateResponse().retrieveMessage(pm.response, false);\r",
															"\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGenderHasBeenUpdated(\"male\")\r",
															"}, 2000);\r",
															"\r",
															"\r",
															"//Send HL7 Retrieve message to check new Gender is persisted\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"\r",
															"//Check the HL7 Response has been populated with the new Gender\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GenderIs(\"1\")\r",
															"}, 3000);\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"male\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "54e9afcd-d5c5-4086-8625-e47cb65a88b1",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update Gender to male"
											},
											"response": []
										},
										{
											"name": "Update Gender - Female",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ba488a74-37b1-4920-85fd-cc76d7d51c03",
														"exec": [
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3e67c5ee-bd86-45c1-81a6-7ecbe4de3c75",
														"exec": [
															"//Call the update message polling service to obtain the Update response\r",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"updateResponse().retrieveMessage(pm.response, false);\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGenderHasBeenUpdated(\"female\")\r",
															"}, 2000);\r",
															"\r",
															"//Send HL7 Retrieve message to check new Gender is persisted\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"//Check the HL7 Response has been populated with the new Gender\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GenderIs(\"2\")\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"replace\",\"path\":\"/gender\",\"value\":\"female\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "87d71c89-bc9d-466b-83d4-ba56fa9ead94",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update Gender to female"
											},
											"response": []
										},
										{
											"name": "Update Gender - Unknown",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f98630f-6a86-4e12-a672-615c8993efe1",
														"exec": [
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b2d45b47-2a6c-472f-91d0-6370149a8e43",
														"exec": [
															"//Call the update message polling service to obtain the Update response\r",
															"eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"updateResponse().retrieveMessage(pm.response, false);\r",
															"\r",
															"//Check that the Update Response has been populated correctly with new updates\r",
															"setTimeout(function () {\r",
															"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
															"PDSUpdateResponse.assertGenderHasBeenUpdated(\"unknown\")\r",
															"}, 2000);\r",
															"\r",
															"\r",
															"//Send HL7 Retrieve message to check new Gender is persisted\r",
															"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
															"\r",
															"\r",
															"//Check the HL7 Response has been populated with the new Gender\r",
															"setTimeout(function () {\r",
															"      const HL7response = eval(pm.globals.get(\"HL7ResponseValidator\"));\r",
															"      HL7response.assertHL7GenderIs(\"0\")\r",
															"}, 3000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"replace\",\"path\":\"/gender\",\"value\":\"unknown\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "2bf80ef5-5c25-46c9-89b7-1ca6d077754b",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Update Gender to unknown"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Update - Replace Gender to Other is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c374bb9e-fc7a-4650-b0a8-89ef7689e635",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bc245071-82ab-4fe6-a8e1-e65bb6b92994",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns UNSUPPORTED_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"UNSUPPORTED_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Schema valid but unsupported value - 'other' in field 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('error');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"other\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender to Other is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace Gender with Male (capital M) is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d4bea18-ab71-4e5e-ad60-46a38da47660",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "21a1d0af-2199-49a3-ba07-1938d2bcbc8d",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'Male' in field 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('error');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"Male\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender with Male (capital M) is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace Gender with Female (capital F) is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7670326f-b72d-42f9-9777-48643763932b",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "db371ec8-ad4a-405c-9d4c-1f57cbe1ca4b",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'Female' in field 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('error');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"Female\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender with Female (capital F) is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace Gender with Unknown (capital U) is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "85f75990-e6b3-4935-908f-2415d578a68b",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e0a3a773-3c61-471b-8590-931e77ac5f31",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'Unknown' in field 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('error');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"Unknown\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender with Unknown (capital U) is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Remove Gender is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6561ba2c-9935-489e-98ee-b4446a8cb290",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1017e4bd-bed5-4674-87a9-db59220324b6",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns FORBIDDEN_UPDATE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"FORBIDDEN_UPDATE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Forbidden update with error - source not permitted to remove 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('information');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"test\",\"path\":\"/gender\",\"value\":\"female\"},{\"op\":\"remove\",\"path\":\"/gender\"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Remove Gender is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace Gender with unknown with a whitespace at the end is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8ace71d8-c5c3-4b76-b380-ab324276c2ee",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d0e76f2e-f490-4352-886e-2a98b1782dcd",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"setTimeout(function () {    \r",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    \r",
															"    pm.test('Returns INVALID_VALUE error', () => {\r",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal(\"INVALID_VALUE\");\r",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal(\"Invalid value - 'unknown ' in field 'gender'\");\r",
															"        pm.expect(response.issue[0].severity).to.equal('error');\r",
															"    });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"/gender\",\"value\":\"unknown \"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender with unknown with a whitespace at the end is not permitted"
											},
											"response": []
										},
										{
											"name": "Update - Replace Gender with a malformed patch is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c04ddd03-26f6-4619-8ca8-8bcb23cb0508",
														"exec": [
															"pm.globals.set('nhsID','5900013901');\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eac85a9a-433a-4b75-b663-186dc8399fc3",
														"exec": [
															"pm.test('Returns 400 Bad Request', () => {\r",
															"    pm.expect(pm.response.code).to.eql(400);\r",
															"})\r",
															"\r",
															"pm.test('Returns INVALID_UPDATE error', () => {\r",
															"    pm.expect(pm.response.json().issue[0].details.coding[0].code).to.equal(\"INVALID_UPDATE\");\r",
															"    pm.expect(pm.response.json().issue[0].details.coding[0].display).to.equal(\"Invalid update with error - 'gender' is not a 'json-pointer'\");\r",
															"    pm.expect(pm.response.json().issue[0].severity).to.equal('error');\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"patches\":[{\"op\":\"add\",\"path\":\"gender\",\"value\":\"unknown \"}]}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900013901",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900013901"
													]
												},
												"description": "Replace Gender with a malformed patch is not permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Pharmacies",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Happy Path 1",
											"item": [
												{
													"name": "Add a NominatedPharmacy minimal data (no system)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "04b2f7b5-77bd-4ebd-8566-0e552a62e546",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"}, 6000);\r",
																	"\r",
																	"//Send HL7 Retrieve message to check update\r",
																	"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
																	"\r",
																	"//Check the HL7 Response has been populated with the pharmacy\r",
																	"setTimeout(function () {\r",
																	"\r",
																	"let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
																	"let nominatedPharmacy = getNominatedPharmacy();\r",
																	"console.log(nominatedPharmacy)\r",
																	"\r",
																	"    pm.test(\"Check HL7 Response NominatedPharmacy has been mapped correctly\", () => {\r",
																	"        pm.expect(nominatedPharmacy.subjectOf.patientCareProvision.code.$.code).to.eql(\"P1\");\r",
																	"        pm.expect(nominatedPharmacy.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(\"Y12345\");\r",
																	"        });\r",
																	"\r",
																	"    function getNominatedPharmacy(playedOtherProviderPatient) {\r",
																	"        for (let playedOtherProviderPatient of response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient) {\r",
																	"                    try {\r",
																	"                        if (playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code == \"P1\") {\r",
																	"                            return playedOtherProviderPatient;\r",
																	"                        }\r",
																	"                    } catch(err) {\r",
																	"                    }\r",
																	"        }\r",
																	"    }\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5ccf1d08-cc91-4a3e-a1ce-303ba4e1f12c",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015289\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"Y12345\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a NominatedPharmacy to a Patient with minimal patch payload"
													},
													"response": []
												},
												{
													"name": "Add a DispensingDoctor minimal data (no system)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9692186f-40ed-4f6a-8064-10d77dfeb4d3",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	"\r",
																	"//Send HL7 Retrieve message to check new Date of Birth is persisted\r",
																	"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
																	"\r",
																	"//Check the HL7 Response has been populated with the pharmacy\r",
																	"setTimeout(function () {\r",
																	"\r",
																	"let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
																	"let dispensingDoctor  = getDispensingDoctor()\r",
																	"console.log(dispensingDoctor)\r",
																	"\r",
																	"    pm.test(\"Check HL7 Response dispensingDoctor has been mapped correctly\", () => {\r",
																	"        pm.expect(dispensingDoctor.subjectOf.patientCareProvision.code.$.code).to.eql(\"P3\");\r",
																	"        pm.expect(dispensingDoctor.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(\"C81621\");\r",
																	"        });\r",
																	"\r",
																	"    function getDispensingDoctor(playedOtherProviderPatient) {\r",
																	"        for (let playedOtherProviderPatient of response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient) {\r",
																	"                    try {\r",
																	"                        if (playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code == \"P3\") {\r",
																	"                            console.log(\"found extension\")\r",
																	"                            return playedOtherProviderPatient;\r",
																	"                        }\r",
																	"                    } catch(err) {\r",
																	"                    }\r",
																	"        }\r",
																	"    }\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "18e27879-8192-498f-b72b-1b7e26b07a45",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015289\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81621\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a DispensingDoctor to a Patient with minimal patch payload"
													},
													"response": []
												},
												{
													"name": "Add a MedicalApplianceSupplier minimal data (no system)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8d80354d-990c-45b2-8e77-37e51f591787",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"\r",
																	"}, 6000);\r",
																	"\r",
																	"//Send HL7 Retrieve message to check new Date of Birth is persisted\r",
																	"eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();\r",
																	"\r",
																	"//Check the HL7 Response has been populated with the pharmacy\r",
																	"setTimeout(function () {\r",
																	"\r",
																	"let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
																	"let medicalApplianceSupplier = getMedicalApplianceSupplier()\r",
																	"console.log(medicalApplianceSupplier)\r",
																	"\r",
																	"    pm.test(\"Check HL7 Response medicalApplianceSupplier has been mapped correctly\", () => {\r",
																	"        pm.expect(medicalApplianceSupplier.subjectOf.patientCareProvision.code.$.code).to.eql(\"P2\");\r",
																	"        pm.expect(medicalApplianceSupplier.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(\"FYR20\");\r",
																	"        });\r",
																	"\r",
																	"    function getMedicalApplianceSupplier(playedOtherProviderPatient) {\r",
																	"        for (let playedOtherProviderPatient of response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient) {\r",
																	"                    try {\r",
																	"                        if (playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code == \"P2\") {\r",
																	"                            return playedOtherProviderPatient;\r",
																	"                        }\r",
																	"                    } catch(err) {\r",
																	"                    }\r",
																	"        }\r",
																	"    }\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "11c748a0-c1ff-4cd5-9da0-be8b7301f372",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015289\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR20\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a MedicalApplianceSupplier  to a Patient with minimal patch payload"
													},
													"response": []
												},
												{
													"name": "Replace a NominatedPharmacy, MedicalApplianceSupplier & DispensingDoctor",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a3769acd-6487-414e-978e-4afa87030b91",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FH846\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"}}\r",
																	"\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR21\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"}}\r",
																	"\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81622\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81622\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "85b8907a-2750-4729-a990-39c3b06c48e9",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015289\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/2\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81622\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81622\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace all 3 Pharmacies"
													},
													"response": []
												},
												{
													"name": "Remove All 3 Pharmacies using url as the test value",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fc8d9706-9649-4fad-a3e2-4c9166ccd76c",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenRemoved()\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "28bb3855-6fec-430d-b46a-82419969bfa2",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015289\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove all 3 Pharmacies using the url as the test value"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Happy Path 2",
											"item": [
												{
													"name": "Add a NominatedPharmacy where MAS and DD alreay exist",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "90300ebb-96dc-4f0e-a739-c689879cd7fe",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\"}}\r",
																	"\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}\r",
																	"\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5a3782b1-c73d-4ce7-8500-56fc4231c9e7",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900004902\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"Y12345\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add a NominatedPharmacy where MAS and DD alreay exist"
													},
													"response": []
												},
												{
													"name": "Replace a NominatedPharmacy, MedicalApplianceSupplier",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b6c1b948-a798-4277-832a-54cc39da16f8",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FH846\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"}}\r",
																	"\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR21\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"}}\r",
																	"\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8ba5df87-d078-4a7c-853d-16024663611b",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900004902\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/2\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a NominatedPharmacy, MedicalApplianceSupplier"
													},
													"response": []
												},
												{
													"name": "Remove All 3 Pharmacies using object as the test value",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "40c53c69-bf0d-4f4d-886c-520ec3347fc4",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenRemoved()\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addMSAndDDPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c2282db1-5f3f-4c14-a281-969410d83785",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900004902\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":{\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\": {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"C81621\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\": {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove All 3 Pharmacies using object as the test value"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Happy Path 3",
											"item": [
												{
													"name": "Replace a NominatedPharmacy & Add MedicalApplianceSupplier together",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c2d6b1c6-54ce-4397-a20d-0dd0ee90fd9a",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FH846\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"}}\r",
																	"\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"replaceNPAndRemoveMAS()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "bae200ea-26fa-4081-9e90-eb3304236b45",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900016390\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"FH846\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    {\r\n          \"op\": \"add\",\r\n          \"path\": \"/extension/-\",\r\n          \"value\":                 {\r\n                \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n                \"valueReference\": {\r\n                    \"identifier\": {\r\n                        \"value\": \"FYR20\"\r\n                    },\r\n                    \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"\r\n                }\r\n            }\r\n        }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace a NominatedPharmacy & Add MedicalApplianceSupplier together"
													},
													"response": []
												},
												{
													"name": "Remove a NominatedPharmacy and MedicalApplianceSupplier together, where DispensingDoctor exists still",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "777501f4-b0b0-4fc3-88f1-8e60ee4b83af",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addNPAndMASPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "33a650e0-ee80-4e8b-8f7d-1aa2212529c3",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900015491\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a NominatedPharmacy and MedicalApplianceSupplier together, where DispensingDoctor exists still"
													},
													"response": []
												},
												{
													"name": "Remove a NominatedPharmacy and DispensingDoctor together, where MedicalApplianceSupplier still exists",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a5631fca-ad8a-433b-aecb-a4d75d38bfb4",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addNPAndDDPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "674eefdb-6a7a-439a-9c3b-915f69cae8d0",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900000540\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a NominatedPharmacy and MedicalApplianceSupplier together, where DispensingDoctor exists still"
													},
													"response": []
												},
												{
													"name": "Remove a DispensingDoctor and MedicalApplianceSupplier together, where NominatedPharmacy still exists",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8d2c6393-5d09-418a-b164-40f4702e1e2e",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseNP =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\"}}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenUpdated(expectedResponseNP)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addMSAndDDPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "bb923f28-43ea-42b6-9795-6501430d2c20",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900013421\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    },\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a DispensingDoctor and MedicalApplianceSupplier together, where NominatedPharmacy still exists"
													},
													"response": []
												},
												{
													"name": "Remove a NominatedPharmacy and Replace a MedicalApplianceSupplier where DispensingDoctor still exists",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "288d1257-a242-4d17-85e1-2f8613004a5d",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR21\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"}}\r",
																	"\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addNPAndReplaceMASPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e132e7ce-f46f-41fd-b722-90bb27cd223b",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900003868\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },    \r\n   \t{\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a NominatedPharmacy and Replace a MedicalApplianceSupplier where DispensingDoctor still exists"
													},
													"response": []
												},
												{
													"name": "Remove a NominatedPharmacy, Replace a MedicalApplianceSupplier and Add a DispensingDoctor",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c88789be-4daf-4888-9bf1-f63fe9041ea8",
																"exec": [
																	"//Check that a 202 response is returned\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedResponseMAS =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"FYR21\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"}}\r",
																	"\r",
																	"var expectedResponseDD =  {\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertNominatedPharmacyHasBeenRemoved()\r",
																	"PDSUpdateResponse.assertMedicalApplianceSupplierHasBeenUpdated(expectedResponseMAS)\r",
																	"PDSUpdateResponse.assertDispensingDoctorHasBeenUpdated(expectedResponseDD)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - re-add pharmacies to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addNPAndReplaceMASAndRemoveDDPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "72f2d63f-63f9-4581-a977-42908e1cc378",
																"exec": [
																	"pm.globals.set(\"nhsID\", \"5900014363\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain metaVersioId*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },    \r\n   \t{\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81621\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove a NominatedPharmacy, Replace a MedicalApplianceSupplier and Add a DispensingDoctor"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Replace a NominatedPharmacy where the extension.url of the exisiting NominatedPharmacy results is not correct",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c426f8ac-d864-4fc9-a9a4-af45039ca7c3",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'NominatedPharmacy' in field 'url'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b0939307-59fb-41ff-b080-b26aefce3da4",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a NominatedPharmacy where the extension.url of the exisiting NominatedPharmacy results is not correct, results in an error."
											},
											"response": []
										},
										{
											"name": "Replace a DispensingDoctor where the extension.url of the exisiting DispensingDoctor results is not correct Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dd932f83-d038-4fbc-a1d5-64e2ad1da43a",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'DispensingDoctor' in field 'url'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c5373442-f9e8-43b9-a417-bf388fc89b66",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81622\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81622\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a DispensingDoctor where the extension.url of the exisiting DispensingDoctor results is not correct, results in an error."
											},
											"response": []
										},
										{
											"name": "Replace a MedicalApplianceSupplier where the extension[].url of the exisiting MedicalApplianceSupplier is not correct",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "27fb3996-9758-404e-b06a-cfc02106e787",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'MedicalApplianceSupplier' in field 'url'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "035034b5-b414-4342-a447-3dfbfe31fe66",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/2\",\r\n      \"value\":                 {\r\n            \"url\": \"MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a MedicalApplianceSupplier where the extension[].url of the exisiting MedicalApplianceSupplier is not correct, results in an error"
											},
											"response": []
										},
										{
											"name": "Replace a NominatedPharmacy with a missing identifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af140a71-c3ed-42a5-8f56-6404c72811a8",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'valueReference/identifier'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bcbab655-c222-4691-9fb0-0585093a15ab",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a NominatedPharmacy with a missing identifier, results in an error"
											},
											"response": []
										},
										{
											"name": "Replace a DispensingDoctor with a missing identifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67c0051b-9b48-4bc3-9a48-dc70259181b6",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'valueReference/identifier'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e6ab16f9-cf2e-4e6f-9f35-9281a9c71e69",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81622\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a DispensingDoctor with a missing identifier, results in an error"
											},
											"response": []
										},
										{
											"name": "Replace a MedicalApplianceSupplier with a missing identifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "39fabfb9-ffa6-4be0-acfa-11afe0bbf296",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'valueReference/identifier'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3e5d7d9e-b1eb-462c-bea6-1e4bc5b8a20d",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/2\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a MedicalApplianceSupplier with a missing identifier, results in an error"
											},
											"response": []
										},
										{
											"name": "Replace a DispensingDoctor where the path is incorrect",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9c03d0df-3a50-4702-98ac-3c5ade27baf2",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple pharmacies of type 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7e63151e-dbb4-4110-a44d-33c7f622e402",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/2\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81622\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81622\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a DispensingDoctor where the path is incorrect, results in an error."
											},
											"response": []
										},
										{
											"name": "Replace a MedicalApplianceSupplier where the path is incorrect",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72f06de6-78fc-4394-83c1-2b5355b12b2e",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple pharmacies of type 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "98d8680f-58cd-44bf-841d-ff580f67a6d6",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/3\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "eplace a MedicalApplianceSupplier where the path is incorrect, results in an error."
											},
											"response": []
										},
										{
											"name": "Replace a NominatedPharmacy where the path is incorrect",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d4968bb-472c-48c3-a2ec-6968c70763a5",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple pharmacies of type 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "accefad8-f3ac-4455-8164-077fcff36984",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH846\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH846\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Replace a NominatedPharmacy where the path is incorrect , results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a NominatedPharmacy where test operation includes an invalid path based on the url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2d1683a-0562-4e57-b340-76ecd0c404c2",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor (<type 'str'>) is not equal to tested value https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy (<type 'unicode'>)\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1bbbd9f6-97da-48eb-b832-dd2b1181ec62",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a NominatedPharmacy where test operation includes an invalid path based on the url, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a MedicalApplianceSupplier where test operation includes an invalid path based on the url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c14618f7-a3e7-4ae6-8f08-b7cd1ee2fef2",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSCommunication (<type 'str'>) is not equal to tested value https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier (<type 'unicode'>)\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "866e2b07-8da1-4b36-9437-e946223f1525",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/3/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/3\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a MedicalApplianceSupplier where test operation includes an invalid path based on the url, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a DispensingDoctor where test operation includes an invalid path based on the url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c220db1d-3cb6-4e68-a503-050018670939",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier (<type 'str'>) is not equal to tested value https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor (<type 'unicode'>)\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9c632f39-d0a8-4bb2-909c-9bb24253de7a",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/2/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/2\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a DispensingDoctor where test operation includes an invalid path based on the url, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a NominatedPharmacy where test operation path is invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "41cd5406-11df-4161-9ea8-1ba22ed878ad",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - member 'id' not found in {'url': 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy', 'valueReference': {'identifier': {'system': 'https://fhir.nhs.uk/Id/ods-organization-code', 'value': 'Y12345'}, 'reference': 'https://directory.spineservices.nhs.uk/STU3/Organization/Y12345'}}\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9fcdd6e3-bee3-42ee-bec7-731f61cf3ade",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/id\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a NominatedPharmacy where test operation path is invalid, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a DispensingDoctor where test operation path is invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f104002b-fd9a-4d8e-8f71-fd68c8b306cf",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extensions/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/1/ur' preceding\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b38c45f3-b9cc-430d-a0f0-a073e2c4fe26",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/ur\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extensions/1\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a DispensingDoctor where test operation path is invalid, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a MedicalApplianceSupplier where test operation path is invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "77983406-a2e1-4526-b222-876e4828a3ad",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - 'extension/0/url' is not a 'json-pointer'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f7eb2ff1-8359-45df-9e25-30fdec934f25",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a MedicalApplianceSupplier where test operation path is invalid, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a NominatedPharmacy without a test operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e1f55d9-eb94-4c1b-bdac-870f5aeb3a6c",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/0' is not immediately preceded by equivalent test - instead it is the first item\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8c0a09ef-5e85-485b-b834-6f1e127acf7b",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a NominatedPharmacy without a test operation, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a MedicalApplianceSupplier without a test operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc55061f-20a0-4dea-b264-0af418a55026",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/2' is not immediately preceded by equivalent test - instead it is the first item\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0110dff0-aa5d-4c3e-baf8-cc38c7a68943",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/2\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/2/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a MedicalApplianceSupplier without a test operation, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a DispensingDoctor without a test operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f6dfadab-529a-4be0-a828-aff2be951b52",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/1' is not immediately preceded by equivalent test - instead it is the first item\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bbba4cb3-305a-4e97-9632-7ca79e8842e6",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor \"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a DispensingDoctor without a test operation, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a NominatedPharmacy where the remove operation path does not match the test operation path",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c212b511-e126-4cee-b41f-43bfad57a467",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/0/url' preceding\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "75198191-ecf7-4244-91e9-a3b3d54eeb53",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a NominatedPharmacy where the remove operation path does not match the test operation path, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a DispensingDoctor where the remove operation path does not match the test operation path",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ac5296f8-ca3a-4fc5-a294-99fa73fa8359",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/2' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/1/url' preceding\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3bf8b469-5d28-41e4-a319-83cf075670dd",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/2\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a DispensingDoctor where the remove operation path does not match the test operation path, results in an error."
											},
											"response": []
										},
										{
											"name": "Remove a MedicalApplianceSupplier where the remove operation path does not match the test operation path",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e223d4f-9df3-4491-8359-b13b44058e99",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/3' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/2/url' preceding\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0a39b9f5-c212-4479-9d50-cefcabfd95c6",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900000842\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/2/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/3\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a MedicalApplianceSupplier where the remove operation path does not match the test operation path, results in an error."
											},
											"response": []
										},
										{
											"name": "Perform a Valid Add but invalid Replace - results in error with no updates",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c13e33dd-87e2-4ef9-9705-68af02439ecd",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - cannot add multiple pharmacies of type 'https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "35a790c0-ece9-4196-b75f-aece3062346e",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900001490\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"C81621\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FYR21\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FYR21\"\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Perform a Valid Add but invalid Replace - results in error with no updates"
											},
											"response": []
										},
										{
											"name": "Perform a Valid Replace but an invalid Remove - results in error with no updates",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6485c2ab-7af9-47ae-a595-cf433f9fdca8",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier (<type 'str'>) is not equal to tested value https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor (<type 'unicode'>)\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "384b7bfa-f0a2-4a09-9769-e65df220dbe2",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900011429\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/0\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"identifier\": {\r\n                    \"value\": \"FH845\"\r\n                },\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/FH845\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/2/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/2\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Perform a Valid Replace but an invalid Remove - results in error with no updates"
											},
											"response": []
										},
										{
											"name": "Perform a Valid Remove but an invalid Remove - results in error with no updates",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d1782791-f6e9-4fde-9c64-43454f969348",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier (<type 'str'>) is not equal to tested value https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor (<type 'unicode'>)\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f5f3a8ea-53c4-46af-a8bc-3316d39bdcf3",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900011429\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Perform a Valid Remove but an invalid Remove - results in error with no updates"
											},
											"response": []
										},
										{
											"name": "Remove a NominatedPharmacy with an invalid json payload",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af6e0bcf-cc4e-4a71-aca9-7ca88c7313a7",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid payload received - incorrect format\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "769cdef8-640d-4736-a2ee-00695ca068ff",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900011429\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    },\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a NominatedPharmacy with an invalid json payload - results in error"
											},
											"response": []
										},
										{
											"name": "Remove a MedicalApplianceSupplier with an invalid json payload",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fdc830f3-1602-452e-bb62-15fc64134cde",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid payload received - incorrect format\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4c26a2f4-f837-4ebe-bae5-6266aeee7684",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900011429\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"\r\n    }\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a MedicalApplianceSupplier with an invalid json payload - results in error"
											},
											"response": []
										},
										{
											"name": "Remove a DispensingDoctor with an invalid json payload",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7f7bd9b-22f8-4069-978e-ec4e4b3e8bdb",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid payload received - incorrect format\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "92e95cfc-a774-4530-9b21-fe1784525d7a",
														"exec": [
															"pm.globals.set(\"nhsID\", \"5900011429\")\r",
															"\r",
															"/*Send a PDS Search request to obtain metaVersioId*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/0/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/0\"\r\n    }\r\n  ]\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Remove a DispensingDoctor with an invalid json payload - results in error"
											},
											"response": []
										},
										{
											"name": "Add a NominatedPharmacy white spaces are not allowed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4940db6d-4be5-4835-8aaf-96ce88c438f4",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'Y12345 ' in field 'valueReference/identifier/value'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e559c831-d372-4ee7-a14b-40b85c5f40b4",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900015165\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"Y12345 \"\r\n                }\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a NominatedPharmacy white spaces are not allowed"
											},
											"response": []
										},
										{
											"name": "Add a NominatedPharmacy unicode is not allowed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b568cd4d-3706-4a10-a700-58934fca4a7e",
														"exec": [
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"//Call the update message polling service to obtain the Update response\r",
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"POLLER.retrieveMessage(pm.response, true);\r",
															"\r",
															"/*Perform checks on the Error Response*/\r",
															"\r",
															"setTimeout(function () {\r",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
															"    console.log(updateErrorResponse)\r",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'u+00000059u+00000031u+00000032u+00000033u+00000034u+00000035' in field 'valueReference/identifier/value'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ceeae62b-641d-4ea8-9a50-2a0702198b5e",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900015165\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/u+00000059u+00000031u+00000032u+00000033u+00000034u+00000035\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"u+00000059u+00000031u+00000032u+00000033u+00000034u+00000035\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a NominatedPharmacy unicode is not allowed"
											},
											"response": []
										},
										{
											"name": "Add a NominatedPharmacy invalid operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ab14e98-eee6-4eda-b852-3ff4f54221a5",
														"exec": [
															"var updateErrorResponse = pm.response.json();\r",
															"\r",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
															"        pm.response.to.have.status(400);\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'rubbish' in field '0/op'\")\r",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
															"        });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bec17299-4ab2-466f-bf1e-fd86fbd4fe8f",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/\r",
															"pm.globals.set(\"nhsID\", \"5900015165\")\r",
															"\r",
															"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"rubbish\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":                 {\r\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\r\n            \"valueReference\": {\r\n                \"reference\": \"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\r\n                \"identifier\": {\r\n                    \"system\": \"https://fhir.nhs.uk/Id/ods-organization-code\",\r\n                    \"value\": \"Y12345\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add a NominatedPharmacy invalid operation is not allowed"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Contact Preferences",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Replace as an extension",
											"item": [
												{
													"name": "Replace PreferredContactMethod & PreferredContactTimes",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c2a2d80d-9551-4129-a9d0-e88e4db0b8a5",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900003809\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c7a6ea8d-3df4-436a-b738-0d53f553b2fd",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"7\",\"display\":\"Sign Language\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"13:00\"}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [\r\n          {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"7\",\r\n                        \"display\": \"Sign language\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          },\r\n          {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"13:00\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "a4dc1891-6cc7-4144-a82b-ad4e1ecd31a8",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredContactTimes"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "beb4041b-6ee3-42e2-a6af-00393427502b",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900003809\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "75b35b03-df97-4bbf-ab60-b0a93cc7309e",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [\r\n          {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          },\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "6073f4c0-a6bb-4aed-9752-6da5ce88ac90",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e4ddb930-1ade-48e7-b864-8c2c74a1ce9f",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900003809\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d59ec86d-8d52-449b-9bef-73547ee39e71",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"7\",\"display\":\"Sign Language\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"11:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"11\",\"display\":\"Large print\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [\r\n          {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"7\",\r\n                        \"display\": \"Sign language\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          },\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"11\",\r\n                  \"display\": \"Large Print\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          },\r\n          {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"11:00\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "e2cc7add-7d6b-4d62-a0d1-2093e499b937",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "12580d77-7dc1-4757-9d76-fe53e05b3886",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900003809\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4a16d921-c2bd-4150-b576-9c4a19331fb0",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [\r\n          {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "4cfa2a42-40e6-46c9-b6a3-51f28c8f3f25",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod"
													},
													"response": []
												},
												{
													"name": "Replace PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e605b318-ffae-431e-8e2d-df23b61de211",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900003809\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b2297136-b190-478c-ac83-2a2249e6ef9b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "631c5aa1-012b-4c43-bb23-da07b8519816",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredWrittenCommunicationFormat"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Replace not as an extension",
											"item": [
												{
													"name": "Replace PreferredContactMethod & PreferredContactTimes",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c3c9a779-8b23-4f96-9b6e-4eb4cafd822c",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a2ea5b02-759c-446f-9fb8-c3bf866126cc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"12:00\"\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "56a95c18-df58-4335-a068-e317d4829075",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredContactTimes"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e5553b84-0f0c-42f2-b5f0-ff3eeaf204e4",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8e825fe6-d69c-4813-9a8d-7ae0b4da731f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"2\",\"display\":\"Visit\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"2\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "3d031deb-e314-44be-b46d-9e7109c0a188",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredContactTimes"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactTimes & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e802f716-ca3d-4785-b0d7-78f237ef0603",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "88607a92-1aae-4d7c-85dd-9f60831f6321",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"2\",\"display\":\"Visit\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"after 6pm\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"11\",\"display\":\"Large print\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"11\",\r\n                  \"display\": \"Large print\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"after 6pm\"\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "21225a45-e581-42bc-ab9e-43e34b207ca2",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactTimes & PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1bd261cd-a1cc-4dca-8715-0c44d78d1db5",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a091bcdf-036e-4066-9a84-51ebd25c211c",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"1\",\"display\":\"Letter\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"theMaximumCharactersForThisFieldIsFourty\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"1\",\r\n                        \"display\": \"Letter\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"theMaximumCharactersForThisFieldIsFourty\"\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "5a69a309-759f-47b4-b6de-b91abf57b0a4",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7c4b62ac-c9dd-4de7-b028-ee4791fb63c6",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2d90f1cc-80aa-446d-a8db-ef0d91078a85",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"3\",\"display\":\"Telephone\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"theMaximumCharactersForThisFieldIsFourty\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"3\",\r\n                        \"display\": \"Telephone\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "74d2de38-e39e-4f3a-8312-7c08cafc52c4",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactTimes",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5a5091b3-7155-4f08-90ea-051c6cd5a8a2",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b14bcc4f-3ff2-43ef-be92-9d3d7abb1992",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"3\",\"display\":\"Telephone\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"12:00\"\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "6789ce76-460c-4acf-af60-f16d3a9fc7f0",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactTimes"
													},
													"response": []
												},
												{
													"name": "Replace PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "eefba24b-f322-4979-86c7-5241c46e275b",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "468b5ed4-7267-45d3-902e-0b365caa6de2",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"3\",\"display\":\"Telephone\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Braille\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "fe254c50-15ea-48c3-b713-23f7015ab683",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod - Minicom",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2772ada7-1acb-44ee-9aec-3bebb20e3cfa",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "986362ce-b170-4780-918e-7874a269363a",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"5\",\"display\":\"Minicom (Textphone)\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"5\",\r\n                        \"display\": \"Minicom (textphone)\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "828b24db-16dc-4a66-a8a6-3d295611e7fa",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod - Minicom"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod - Telephone contact via proxy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ddc7758f-a458-47c7-bef9-495e03154939",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "61ee37bd-ef31-4725-9a76-716abcc51abf",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"6\",\"display\":\"Telephone contact via proxy\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"6\",\r\n                        \"display\": \"Telephone contact via proxy\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "69d9a28b-efb5-434a-8fca-c92978297079",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod - Telephone contact via proxy"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod - Sign Language",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "511d2e4c-346a-49ce-bf01-8bed4bb2c7ad",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1949761b-f283-4c48-8a6d-aad61816d250",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"7\",\"display\":\"Sign Language\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"7\",\r\n                        \"display\": \"Sign language\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "3a2d7922-fa40-4080-9a5a-078ce974c523",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod - Sign Language"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod - No Telephone contact",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b02fa393-888b-4de2-976b-76d772a547c6",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900027155\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c980e6c5-6b5a-422a-b71b-2cfa06c57e46",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"8\",\"display\":\"No Telephone contact\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"8\",\r\n                        \"display\": \"No Telephone contact\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "8c9fffb4-2501-4266-a591-903480791946",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod - No Telephone contact"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add where contact preferences do not exist",
											"item": [
												{
													"name": "Add PreferredContactMethode then PreferredContactTime",
													"item": [
														{
															"name": "Add PreferredContactMethod - no other contact preferences exist",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5208aac8-b0cf-450e-9d29-40a5d46d0f6c",
																		"exec": [
																			"\r",
																			"/*set nhsID as the patient id to be used for the test*/\r",
																			"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																			"\r",
																			"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																			"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "61bf81ac-7a54-4e60-adbe-fef21ccc6a3e",
																		"exec": [
																			"pm.test('Patch Response returned 202', () => {\r",
																			"    pm.expect(pm.response.code).to.eql(202);\r",
																			"})\r",
																			"\r",
																			"//Call the update message polling service to obtain the Update response\r",
																			"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																			"POLLER.retrieveMessage(pm.response, false);\r",
																			"\r",
																			"//set a variable for the expected update\r",
																			"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"2\",\"display\":\"Visit\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																			"\r",
																			"//Check that the Update Response contains the update\r",
																			"setTimeout(function () { \r",
																			"//Check that the Update Response has been populated correctly with new updates\r",
																			"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																			"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																			"}, 6000);\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "If-Match",
																		"type": "text",
																		"value": "{{metaVersionId}}"
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json-patch+json"
																	},
																	{
																		"key": "{{nhsd-asid-header}}",
																		"type": "text",
																		"value": "{{from_asid}}"
																	},
																	{
																		"key": "{{nhsd-session-urid-header}}",
																		"type": "text",
																		"value": "{{role_id}}"
																	},
																	{
																		"key": "{{nhsd-identity-uuid-header}}",
																		"type": "text",
																		"value": "{{user_id}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"2\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{environment}}/Patient/:nhs_id",
																	"host": [
																		"{{environment}}"
																	],
																	"path": [
																		"Patient",
																		":nhs_id"
																	],
																	"variable": [
																		{
																			"id": "e9d0b196-aade-4483-9542-1c8b97372b26",
																			"key": "nhs_id",
																			"value": "{{nhsID}}",
																			"type": "string"
																		}
																	]
																},
																"description": "Add PreferredContactMethod - no other contact preferences exist"
															},
															"response": []
														},
														{
															"name": "Add PreferredContactTimes - where PreferredContactMethod  exists",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c63b7147-ed76-453a-8ba6-73f3d364debc",
																		"exec": [
																			"\r",
																			"/*set nhsID as the patient id to be used for the test*/\r",
																			"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																			"\r",
																			"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																			"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "833af6cf-70f7-4564-9545-8b75d37dce67",
																		"exec": [
																			"pm.test('Patch Response returned 202', () => {\r",
																			"    pm.expect(pm.response.code).to.eql(202);\r",
																			"})\r",
																			"\r",
																			"//Call the update message polling service to obtain the Update response\r",
																			"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																			"POLLER.retrieveMessage(pm.response, false);\r",
																			"\r",
																			"//set a variable for the expected update\r",
																			"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"2\",\"display\":\"Visit\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																			"\r",
																			"//Check that the Update Response contains the update\r",
																			"setTimeout(function () { \r",
																			"//Check that the Update Response has been populated correctly with new updates\r",
																			"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																			"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																			"}, 6000);\r",
																			"\r",
																			"\r",
																			"/*teardown - remove contact preferences from patient*/\r",
																			"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																			"removeContactPreferencesPatch()\r",
																			"setTimeout(function () {\r",
																			"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																			"}, 6000);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {
																	"content-type": true
																}
															},
															"request": {
																"method": "PATCH",
																"header": [
																	{
																		"key": "If-Match",
																		"type": "text",
																		"value": "{{metaVersionId}}"
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json-patch+json"
																	},
																	{
																		"key": "{{nhsd-asid-header}}",
																		"type": "text",
																		"value": "{{from_asid}}"
																	},
																	{
																		"key": "{{nhsd-session-urid-header}}",
																		"type": "text",
																		"value": "{{role_id}}"
																	},
																	{
																		"key": "{{nhsd-identity-uuid-header}}",
																		"type": "text",
																		"value": "{{user_id}}"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"}\r\n    }\r\n  ]\r\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{environment}}/Patient/:nhs_id",
																	"host": [
																		"{{environment}}"
																	],
																	"path": [
																		"Patient",
																		":nhs_id"
																	],
																	"variable": [
																		{
																			"id": "3ede71bf-1ee8-45b2-87e3-53d78c2f02da",
																			"key": "nhs_id",
																			"value": "{{nhsID}}",
																			"type": "string"
																		}
																	]
																},
																"description": "Add PreferredContactTimes - where PreferredContactMethod  exists"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat - no other contact preferences exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f551b3fb-bbbc-455c-8eab-18676070d58c",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5d74519c-04de-4801-b07c-7b52a586af69",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preferences from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "8a11e867-1616-46b0-bc8d-2e41c3f04058",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat - no other contact preferences exist"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod & PreferredContactTimes - no other contact preferences exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "fda2c589-5e6d-4fd6-a12d-60e26af272ac",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5ad1a6bb-634e-4303-8e33-9cd7bac7fd24",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"1\",\"display\":\"Letter\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"1\",\r\n                        \"display\": \"Letter\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"\r\n        }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "2f9a9000-9092-4397-bafa-91f0b34e97cc",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod & PreferredContactTimes - no other contact preferences exist"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod & PreferredWrittenCommunicationFormat - no other contact preferences exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7c01f68e-5597-4785-bfcc-57f4df52bb10",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d50d34f2-bedf-4d4e-98ff-c4f6cc64fb90",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"3\",\"display\":\"Telephone\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"11\",\"display\":\"Large print\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"3\",\r\n                        \"display\": \"Telephone\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"11\",\r\n                  \"display\": \"Large Print\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "fb9dda76-5403-4814-a2c6-a914b699ad89",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod & PreferredWrittenCommunicationFormat - no other contact preferences exist"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e564a1e4-b5d8-4902-994b-5ef974bc7b31",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ed31f2b3-47bb-4267-bc23-88327526309b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"\r\n        },\r\n        {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Braille\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "f65dea1f-b602-473c-b0f6-abe40e4fdaf7",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod & PreferredContactTimes & PreferredWrittenCommunicationFormat"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod - Telephone contact via proxy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ae51f816-d2cc-46c7-9dee-fb4484493a90",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ce282a6d-9be6-434a-a12f-35e2f317c491",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"6\",\"display\":\"Telephone contact via proxy\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"6\",\r\n                        \"display\": \"Telephone contact via proxy\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "e7b02b81-6669-48a6-b0fc-6770b1367382",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod - Telephone contact via proxy"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod - Sign Language",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ca37c794-b58b-426a-a256-e1fe658ae867",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "882b5caf-4f4b-473e-998d-a5f24f2e1ef2",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"7\",\"display\":\"Sign Language\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"7\",\r\n                        \"display\": \"Sign language\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "03c98b77-2295-44cd-bc06-393ab51e5d54",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod - Sign Language"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod - No Telephone contact",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e3c781c-f61d-4cce-b954-d1312b017a0d",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900010147\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e6a279f5-5739-46c0-97a0-f823b6e94fbc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"8\",\"display\":\"No Telephone contact\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - remove contact preference from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removeContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"8\",\r\n                        \"display\": \"No Telephone contact\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "8662237d-8cc6-4ead-b06e-bf60cdc0fb18",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod - No Telephone contact"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Add where contact preferences already exist",
											"item": [
												{
													"name": "Add PreferredContactMethod where PreferredWrittenCommunicationFormat already exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d3d9f3dd-3a5a-4275-ad29-bb8c74c7cce7",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015408\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "81ff6826-7b8f-4b05-99b0-f485949a4dd2",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"5\",\"display\":\"Minicom (Textphone)\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - remove PreferredContactMethod from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removePreferredContactMethodPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"PreferredContactMethod\",\r\n        \"valueCodeableConcept\": {\r\n          \"coding\": [\r\n            {\r\n              \"code\": \"5\",\r\n              \"display\": \"Minicom (textphone)\",\r\n              \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "ab99051c-9059-4664-9d8a-c370bd67eef4",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod where PreferredWrittenCommunicationFormat already exists"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat where PreferredContactMethod & PreferredContactTimes already exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4920c058-69ee-48f4-ac1e-1a9732e791c1",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900016412\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "055fc3df-1c88-45e3-a626-1f22b14120db",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"1\",\"display\":\"Letter\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"},{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"13\",\"display\":\"Audio tape\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	" \r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"/*teardown - remove PreferredContactMethod from patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"removePreferredWrittenCommunicationFormatPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1b8e0af0-43fc-4956-8c22-063bce1e5531",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat where PreferredContactMethod & PreferredContactTimes already exists"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Remove",
											"item": [
												{
													"name": "Remove PreferredContactTime, where PreferredContactMethod remains",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "351e088c-38b2-4dbb-b75e-60c5a74993e2",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900012743\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "efbc7e6c-da76-4416-8e5d-1ea8609bc9d7",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"1\",\"display\":\"Letter\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - add PreferredContactTimes to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addPreferredContactTimesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactTimes\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "a16dfeb4-70dc-4ae1-8b49-4729e8e80579",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactTime, where PreferredContactMethod remains"
													},
													"response": []
												},
												{
													"name": "Remove PreferredWrittenCommunicationFormat where PreferredContactMethod & PreferredContactTime remains",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a0092d46-a514-42be-b67c-8fcafa13e9ab",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900017206\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9e93325b-8daa-4413-b4e2-64d750deb06f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"4\",\"display\":\"E-mail\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}},{\"url\":\"PreferredContactTimes\",\"valueString\":\"12:00\"}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - add PreferredContactTimes to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addPreferredWrittenCommunicationFormatPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/2/url\",\r\n      \"value\": \"PreferredWrittenCommunicationFormat\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/2\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "227ba497-0dc7-449d-9627-bda12233902f",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredWrittenCommunicationFormat where PreferredContactMethod & PreferredContactTime remains"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactMethod & PreferredContactTime, where PreferredWrittenCommunicationFormat Remains",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "48fec647-7880-4f33-87b4-21beba584ecd",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900019209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "904b45c9-f726-40cc-a374-2dc5d4f08166",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredWrittenCommunicationFormat\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"12\",\"display\":\"Braille\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHaveBeenUpdated(expectedContactPreferences)\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - add PreferredContactTimes and PrferredContactMethod to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addPreferredContactTimesAndContactMethodPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactTimes\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    },\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/0\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "28fcd03f-ad5b-40fd-972d-0f1f5a6cc6c7",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactMethod & PreferredContactTime, where PreferredWrittenCommunicationFormat Remains"
													},
													"response": []
												},
												{
													"name": "Remove All contactPreferences",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f64fcbb7-a5c2-4493-8c1c-3f2cc5c0dc44",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900015831\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e9fe32ee-df85-4227-a558-c5b12505da80",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, false);\r",
																	"\r",
																	"//set a variable for the expected update\r",
																	"var expectedContactPreferences = {\"extension\":[{\"url\":\"PreferredContactMethod\",\"valueCodeableConcept\":{\"coding\":[{\"code\":\"1\",\"display\":\"Letter\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\"}]}}],\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"}\r",
																	"\r",
																	"//Check that the Update Response contains the update\r",
																	"setTimeout(function () { \r",
																	"//Check that the Update Response has been populated correctly with new updates\r",
																	"const PDSUpdateResponse = eval(pm.globals.get(\"PDSUpdateResponseValidator\"));\r",
																	"PDSUpdateResponse.assertContactPreferencesHasBeenRemoved()\r",
																	"}, 6000);\r",
																	"\r",
																	"\r",
																	"/*teardown - add PreferredContactTimes to patient*/\r",
																	"const patch = eval(pm.globals.get(\"BuildMeAPatch\"));\r",
																	"addAllContactPreferencesPatch()\r",
																	"setTimeout(function () {\r",
																	"eval(pm.globals.get(\"createMeAPatchRequest\"))();\r",
																	"}, 6000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/url\",\r\n      \"value\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "beda589d-ebbf-4a05-9ea1-19f0ff00596a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove All contactPreferences"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Add",
											"item": [
												{
													"name": "Add PreferredContactMethod where one already exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "56d170e0-c384-42aa-8e40-72c90bd67daf",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e0e091bf-b9cf-4107-89ec-b0793a3c28d0",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Too many extensions with url 'PreferredContactMethod' on patched patient\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"2\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "01f8144e-994d-481c-8904-0892c6434fa9",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod where one already exists, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod with an invalid code",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8605a398-1b3c-4f7d-b4f5-36ec34fd1404",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "156ac476-6245-4b96-9cf0-c6608400617e",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - '10' in field 'PreferredContactMethod valueCodeableConcept/coding/0/code'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"10\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "3db74b42-3ba3-4388-9b11-b8b1f1bfa75f",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod with an invalid code, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod with a missing code",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "192ebbb5-5f02-4ed2-84cb-a335b8b2a776",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "107e7571-8f3d-4b5b-b248-fcf257978e10",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'PreferredContactMethod valueCodeableConcept/coding/0/code'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "45e9367b-6300-434d-b24a-bc2e120c1033",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod with a missing code, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod with an incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5561195c-cb4a-456f-8827-9d9c4df1db88",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a1cb9a9c-9042-453e-b7fa-94b92c00229d",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - 'extension' is not a valid sequence index\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"10\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "07f2d508-76a7-433e-9965-8074995ea2fa",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod with an incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod not as an extension",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "36697d02-1953-4dab-b365-78f610ee87aa",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "be886c91-8959-4721-8a51-8c900ba89650",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"PreferredContactMethod\",\r\n        \"valueCodeableConcept\": {\r\n          \"coding\": [\r\n            {\r\n              \"code\": \"5\",\r\n              \"display\": \"Minicom (textphone)\",\r\n              \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "f8bcd924-5580-447e-8872-dc6b6190253a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod not as an extension, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod with mispelt url",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e7977ecd-c44b-4c8e-b0b0-fb2025e3c110",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "52f1de6d-9e6a-407b-adee-b768a98c2cb9",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'PreferredContactMethods' in field 'extension/0/url'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethods\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"10\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethods\"\r\n                    }\r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "57f986ca-4f05-4d8c-9f79-1cc933ab5738",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod with mispelt url, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactMethod with a malformed patch",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8c991842-cd34-4be5-abb4-2a4fa216ee0e",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "723801dd-afdf-4217-91a5-598b70a835cd",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid payload received - incorrect format\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"10\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    \r\n                ]\r\n            }\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "26bebb01-83e3-4c88-896d-0dd59b9c20d8",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactMethod with a malformed patch, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactTime without PreferredContactMethod",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f5436490-0da8-43c4-84c5-043fd21daef0",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e50d9c5c-3d29-4f96-bc44-73d214fc4b65",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - 'PreferredContactMethod' must be supplied when 'PreferredContactTimes' is supplied\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"}]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "8b17ab2d-21a2-4b3e-849e-cfe60812911a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactTime without PreferredContactMethod, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactTime with string longer than 40 Chars",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ce9ad05c-bff5-4700-b29f-153b070b5f47",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6091cb5a-922b-40a0-92ae-b36803b08139",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'theMaximumCharactersForThisFieldIsFourtys' in field 'PreferredContactTimes/valueString'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"1\",\r\n                        \"display\": \"Letter\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"theMaximumCharactersForThisFieldIsFourtys\"\r\n        }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "babe66e8-6d95-46d9-b6b2-666123bd6c41",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactTime with string longer than 40 Chars, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactTime with no valueString",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8155dca7-83d1-4b09-8215-1773db59d99c",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "db690188-1b2e-42be-9e48-230c20797d8c",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - valueString missing or empty for url=PreferredContactTimes\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\":  {\r\n          \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n          \"extension\": [{\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"2\",\r\n                        \"display\": \"Visit\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n        },{\r\n          \"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"\"\r\n        }]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "e7170d63-885d-4095-bcd6-b93f18176c26",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactTime with no valueString, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactTime where one already exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2cb10fba-66db-42d7-8e88-293fcdfb1348",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "05d19d29-9adc-4e6e-a829-2d2f1948387a",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Too many extensions with url 'PreferredContactTimes' on patched patient\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"13:00\"\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "e0fd54db-b355-4891-91b0-cf2483e7cb29",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactTime where one already exists, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredContactTime with an incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e1e6799-2e0f-4b61-acf6-d027eff28398",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd7d44d0-02cd-4463-b95c-6f44747c6836",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '2' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/2/extension/-\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "4a382d90-72ef-44d7-bf62-bf2729a493f6",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredContactTime with an incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat where one already exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e734d9b5-738f-47de-a9c2-8754b5532dfc",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3503a535-c19f-41eb-a8dc-e09fef895954",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Too many extensions with url 'PreferredWrittenCommunicationFormat' on patched patient\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"13\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "14fefbb0-6f95-4205-816d-50f85918b2fa",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat where one already exists, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat with an invalid code",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "62ff7422-faab-4e2e-a988-043009c42f97",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c73cc99a-d8f6-4a3d-9224-7975a053c37b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - '20' in field 'PreferredWrittenCommunicationFormat valueCodeableConcept/coding/0/code'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"20\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "824e42c9-cd49-4bce-aa55-c445f41b6fcd",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat with an invalid code, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat with a missing code",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b93a3162-98a3-40c2-b88a-f5a4f6d4a81e",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c8d64263-644e-4fe2-afa3-7c9b8d5d22ca",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'PreferredWrittenCommunicationFormat valueCodeableConcept/coding/0/code'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "0e162cfa-16ec-4673-9bfd-3783665d3ef8",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat with a missing code, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat with an incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b6e7d18e-0f34-4c2e-b737-3e947d47b1d2",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d5aeec44-1558-44bf-b561-94499ddb57ca",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "4d7acea6-7c47-48a4-9d08-b2178ad231da",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat with an incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat with mispelt url",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "415dbc29-f094-4930-926e-1f0017ee1ca1",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2de5ec7e-9d01-49c5-8df7-5994862521f0",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'PreferredWrittenCommunicationFormats' in field 'extension/0/url'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": [\r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormats\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "348f1894-4e39-4e59-9ec6-51224cf1ef42",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat with mispelt url, results in error"
													},
													"response": []
												},
												{
													"name": "Add PreferredWrittenCommunicationFormat with a malformed patch",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "34f8c353-97f7-4ebe-b9b1-e53c4eca8689",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a11ea028-a00b-42e6-bf5e-8b9ec78b740d",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - extension not in correct format\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/-\",\r\n      \"value\": {\r\n        \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\",\r\n        \"extension\": \r\n          {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Audio tape\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        \r\n      }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "53c94e2a-4fe3-459d-a456-ae140cd615c8",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add PreferredWrittenCommunicationFormat with a malformed patch, results in error"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Replace",
											"item": [
												{
													"name": "Replace PreferredContactMethod with incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "54fca30f-076f-44e0-8100-e562d2d99f40",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "18337c38-8a3c-4429-8cf4-6f682f48e4fb",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Too many extensions with url 'PreferredContactMethod' on patched patient\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "c65d3248-395b-4a4e-8074-46128f32ca28",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod with incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactMethod where PreferredContactMethod doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "cf21cff9-46aa-4562-8aaa-12c6dda5070d",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "233e61ae-8222-413c-8fe0-6a5b5e8cac2c",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "59fae537-85b3-4173-9bb9-a87630fdcdf3",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactMethod where PreferredContactMethod doesn’t already exist, results in error"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactTime where PreferredContactTime doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "af6628e7-8709-4419-ab11-188555e1b001",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d90d3f8e-951f-45fb-ad5c-883a6364d64b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/1\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactTimes\",\r\n            \"valueString\": \"12:00\"\r\n          }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "95b34d92-a33d-4c78-b066-0f006dc1256e",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactTime where PreferredContactTime doesn’t already exist, results in error"
													},
													"response": []
												},
												{
													"name": "Replace PreferredContactTime with incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2f0db28b-2180-460a-afdc-b5bf3e797682",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "26116878-1392-4b9b-a677-6b33112365a2",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Too many extensions with url 'PreferredContactTimes' on patched patient\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"13:00\"}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "a54a55a3-042e-46d6-8a32-83fea45a1de5",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredContactTime with incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Replace PreferredWrittenCommunicationFormat with incorrect path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "513cf2fa-1368-4ac5-97aa-1f37bee4894d",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "adbe4c5e-0519-4b6c-83d1-adf60d2c7edd",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - list assignment index out of range\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/3\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Braille\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "5f6d0eab-62d1-4894-a37b-35eddc524ec3",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredWrittenCommunicationFormat with incorrect path, results in error"
													},
													"response": []
												},
												{
													"name": "Replace PreferredWrittenCommunicationFormat where PreferredContactTime doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b9e52b23-e2b3-49fa-b0bd-f58b30cdbc09",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900002209\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b029fc6f-f474-44a2-b87c-46ab55dcbc59",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredWrittenCommunicationFormat\",\r\n            \"valueCodeableConcept\": {\r\n              \"coding\": [\r\n                {\r\n                  \"code\": \"12\",\r\n                  \"display\": \"Braille\",\r\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\"\r\n                }\r\n              ]\r\n            }\r\n          }\r\n    }\r\n\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "15d44940-2298-42f7-a3ff-330d137184e7",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace PreferredWrittenCommunicationFormat where PreferredContactTime doesn’t already exist, results in error"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Remove",
											"item": [
												{
													"name": "Remove PreferredContactMethod with incorrect test path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "52bebaef-d63e-45f9-a47c-60a6deda79b1",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "7f62daec-e956-4933-9fec-d0a3bbf565e3",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - PreferredContactTimes (<type 'str'>) is not equal to tested value PreferredContactMethod (<type 'unicode'>)\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "33288a39-83ac-4fb9-825f-6f85363a339c",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactMethod with incorrect test path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactMethod with incorrect  path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b4c5a9a5-539e-4193-b039-118e9f29155c",
																"exec": [
																	" \r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c0a39be9-544d-4728-b7d9-ff143e5b6054",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/1/extension/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/1/extension/0/url' preceding\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "fc4748c8-81e0-4bc3-a2a8-9ee23068e491",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactMethod with incorrect  path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactMethod where PreferredContactMethod doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "56a91a10-13ae-40e4-a512-1a9dfc6dd46d",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006174\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9f6b71ff-1bed-4359-ae37-b6d9e194ba8b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - PreferredWrittenCommunicationFormat (<type 'str'>) is not equal to tested value PreferredContactMethod (<type 'unicode'>)\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/0\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "eb7faf21-c189-4d4c-b2ad-9fa15877a91f",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactMethod where PreferredContactMethod doesn’t already exist, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactMethod where PreferredContactTime still exists",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2b6bbeee-2242-4e75-947d-ef69cbaca1cc",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f57500be-34e2-4b6c-a228-341c0fe39401",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - 'PreferredContactMethod' must be supplied when 'PreferredContactTimes' is supplied\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/0\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "97bf42e3-ed2a-4df1-804e-2e76c1881fd8",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactMethod where PreferredContactTime still exists, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactTime with incorrect test path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c022b920-2b46-48be-be7f-d61091311beb",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5a217a00-3212-462e-839f-36c309bfdf09",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - PreferredWrittenCommunicationFormat (<type 'str'>) is not equal to tested value PreferredContactTimes (<type 'unicode'>)\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/0\"\r\n    },\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactTimes\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "af7f9a71-b148-45c7-b082-d6802437a87b",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactTime with incorrect test path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactTime with incorrect  path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ec461c20-0ccf-4254-baf8-2b54c72da1c5",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "99862186-27c5-4e38-adab-16eae781a603",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/1/extension/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/1/extension/0/url' preceding\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/0\"\r\n    },\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/0/url\",\r\n      \"value\": \"PreferredContactTimes\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "36e38ec9-81fa-4858-84c6-4402dbde101d",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactTime with incorrect  path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredContactTime where PreferredContactTime doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9841c351-311c-4ac7-a322-add696c68d41",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900012522\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "99e02439-e829-4e75-8bc1-8322b7402a1b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   \t{\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactTimes\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1e9dc5ce-9ad5-4484-af98-263952015ff0",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredContactTime where PreferredContactTime doesn’t already exist, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredWrittenCommunicationFormat with incorrect test path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e1db6edd-8bea-4494-908e-a4e2698ff97e",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "26cb50b3-b262-4e10-8e92-80b8ea86fe38",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - PreferredContactTimes (<type 'str'>) is not equal to tested value PreferredWrittenCommunicationFormat (<type 'unicode'>)\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredWrittenCommunicationFormat\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "340e1987-ca0d-47dd-a065-0c7ac331cea3",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredWrittenCommunicationFormat with incorrect test path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredWrittenCommunicationFormat with incorrect test path",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c51da3f9-069f-46fb-ad93-4e91a451f9f7",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "733710fb-59e0-4e19-9057-d955b0205974",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/extension/1/extension/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/extension/1/extension/2/url' preceding\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/2/url\",\r\n      \"value\": \"PreferredWrittenCommunicationFormat\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "e10d34bb-cf9a-473e-9e14-0baf45108012",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredWrittenCommunicationFormat with incorrect test path, results in error"
													},
													"response": []
												},
												{
													"name": "Remove PreferredWrittenCommunicationFormat where PreferredWrittenCommunicationFormat doesn’t already exist",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6715926c-20c8-484e-9974-c0893bc539a2",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900012522\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "edd1f0d3-ba68-4127-ab59-22602144526b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredWrittenCommunicationFormat\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "0f1024f8-48b3-4f82-b3f6-8b51170ca391",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove PreferredWrittenCommunicationFormat where PreferredWrittenCommunicationFormat doesn’t already exist, results in error"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "multiple Updates",
											"item": [
												{
													"name": "Perform a Remove and Replace where the Replace is invalid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bc186912-67cf-45cf-9a45-fcfd1700ca61",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3806053d-6f18-463c-8eec-5c61227c14cc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - list assignment index out of range\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/2/url\",\r\n      \"value\": \"PreferredWrittenCommunicationFormat\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/2\"\r\n    },\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/2\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"13:00\"}\r\n    }\r\n  ]\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "085b7abd-0153-4f00-9074-8b237ddbb678",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Perform a Remove and Replace where the Replace is invalid, result in error"
													},
													"response": []
												},
												{
													"name": "Perform a Replace and Add where the Add is invalid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a6ed9107-d938-4b9a-9aca-eb8f76077f7d",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a9d11e96-266d-4ba0-a87a-6fb26ea28927",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '2' is out of bounds\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/extension/1/extension/0\",\r\n      \"value\":  {\r\n            \"url\": \"PreferredContactMethod\",\r\n            \"valueCodeableConcept\": {\r\n                \"coding\": [{\r\n                        \"code\": \"4\",\r\n                        \"display\": \"E-mail\",\r\n                        \"system\": \"https://fhir.nhs.uk/R4/ValueSet/UKCore-PreferredContactMethod\"\r\n                    }\r\n                ]\r\n            }\r\n          }\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/2/extension/-\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"12:00\"}\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1d90eaf9-7f7e-46d1-9d74-98feb2f49db1",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Perform a Replace and Add where the Add is invalid, result in error"
													},
													"response": []
												},
												{
													"name": "Perform an Add and Remove where the Remove is invalid",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "cfaf3202-0fba-43ea-85d5-b026e3b05792",
																"exec": [
																	"\r",
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900006484\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ac9ea3be-5456-42ee-b1b7-1741de94e386",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - PreferredContactTimes (<type 'str'>) is not equal to tested value PreferredContactMethod (<type 'unicode'>)\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/extension/1/extension/-\",\r\n      \"value\":  {\"url\": \"PreferredContactTimes\",\r\n                \"valueString\": \"13:00\"}\r\n    },\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/extension/1/extension/1/url\",\r\n      \"value\": \"PreferredContactMethod\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/extension/1/extension/1\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "205f4e1d-7c08-4d15-a34c-e7ea4a8c62c3",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Perform an Add and Remove where the Remove is invalid, result in error"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Address",
							"item": [
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Add",
											"item": [
												{
													"name": "Add additional Home address is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7df11d49-82e7-4759-a413-7accb4498e4a",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(403);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"FORBIDDEN_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Forbidden update with error - multiple home addresses cannot be added\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"information\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8ceae0da-7794-4ee9-9914-7a053c2a73d2",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"home\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add additional Home address is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add address with use 'work' is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bd294799-487c-4afb-8558-3762eadca786",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - address use 'work' cannot be added or replaced, only removed\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d4c8d010-9ab2-4228-b57b-63dde72ca477",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"work\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add address with use 'work' is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'temp' address without business effective from date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ce244be5-c0ff-4216-adeb-5d53a92937a7",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'address/2/period/start'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "378f5981-a3fc-45fc-8162-9307db582dd2",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'temp' address without business effective from date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'temp' address without business effective to date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9c09918f-8144-41fa-a1d9-76465b50a25a",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period end date must be provided for use 'temp'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "af255dd9-1f49-415f-9bf7-f74cfde4bded",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'temp' address without business effective to date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'temp' address without period is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dd0a57c3-3e9b-4233-96f1-149cfe3fcbdc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period must be provided for use 'temp'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "bb61d05a-f163-428c-9721-b777e8103f14",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'temp' address without period is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'billing' address without business effective from date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f55a8a84-c4d2-4c7c-94dc-4b8bbfeff67f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'address/2/period/start'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "f72a523b-f6ec-43aa-8449-36eaeb35a874",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"billing\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'billing' address without business effective from date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'billing' address without business effective to date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "21233694-e80c-4dbb-9509-72e0e7d043b2",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period end date must be provided for use 'billing'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "84ecc849-2846-461b-af7d-3e6e729a687b",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"billing\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'billing' address without business effective to date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add 'billing' address without period is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2de69eb3-a103-4526-bf2b-de8e20390518",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period must be provided for use 'billing'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "a5c4c0c8-7b21-4daf-b8ab-9c702a328385",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"billing\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'billing' address without period is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add an address with the address.id is populated is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8645cd49-4f45-46fa-9428-92a23bfd1292",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Data id should not be provided on addition with id=F60E2FF2\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "ac80c936-57cd-4003-8bf9-8c1e1873cd02",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"id\": \"F60E2FF2\",\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with the address.id is populated is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add an address with an incorrect path is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "17fea8a1-3a4d-4da1-96ad-3ac5c17ba5fc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - '' is not a valid sequence index\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "aecd2c71-1aad-47ee-ab52-1ce7b514cd4b",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with an incorrect path is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "**APMSPII-307**Add an address with no address lines is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c21097c9-78d5-4cbf-820f-52c0a571f13b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - '' is not a valid sequence index\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b69d4c7f-8a07-4f61-921c-62e6387b6635",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with no address lines is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add an address with transposed start and end dates is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c3414119-a65a-470f-b3ae-87bb941cb78d",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - business effective start date is after the end date\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0f57e0ce-de93-43de-8309-7be9a053ada3",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"end\": \"2020-06-10\",\r\n                \"start\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with transposed start and end dates is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add an address with missing address.use is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0be60f1f-b1f0-47b9-a394-3d65be5bf4ce",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'address/2/use'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c4a465c9-e69f-4e15-a46e-e9d69b687935",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\"\r\n\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with missing address.use is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add an address with unknown address.use is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "97e7a133-ede3-4bd6-b0ac-75c306f63ce7",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value - 'temporary' in field 'address/2/use'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "95134d11-338d-434a-b973-e3e1b0fdf128",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temporary\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with unknown address.use is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add to an existing address where the path in both add operations do not match is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "04977b00-3ebe-4349-ae2e-bf63dc1db1da",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - no id or url found for path with root /address/1\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "43a77b0a-c2b8-4795-9ed0-302bec3de411",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/0/id\",\r\n      \"value\": \"8B869CFB\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/1/line/0\",\r\n      \"value\": \"7\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add to an existing address where the path in both add operations do not match is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add to an existing address where the resulting address ends up with too many lines is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1af8cf11-467b-4ff5-afb4-fe46704d8388",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"TOO_MANY_VALUES_SUBMITTED\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Too many values submitted - ['7', '7', 'Norman Avenue', 'Eccelshill', 'Bradford', 'WEST YORKSHIRE'] in field 'address/1/line'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e3eeab57-652e-44c7-a175-bf1bb692f19e",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/1/id\",\r\n      \"value\": \"F60E2FF2\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/1/line/0\",\r\n      \"value\": \"7\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add to an existing address where the resulting address ends up with too many lines is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "**APMSPII-309**Add to an existing address where the id does not match the path is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "067f602a-13b7-4231-9338-949dc97bfc9f",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - multiple 'address' resources assigned the same object id '9E7E3CB2'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c2748e24-01ee-4bf6-b754-4ce64c75b65b",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900036596\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n   {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/1/id\",\r\n      \"value\": \"9E7E3CB2\"\r\n    },\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/1/line/0\",\r\n      \"value\": \"7\"\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add to an existing address where the id does not match the path is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Add: Business end date for temp address must be <=90days",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5d32c6d0-8b2d-4a76-aabb-ebe9e5b7aa4f",
																"exec": [
																	"pm.globals.set('nhsID', '5900022412');",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "64168ae9-01d8-46dd-a34f-dbfdaa0321ff",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, true);",
																	"",
																	"setTimeout(function () {",
																	"    let errorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
																	"    let errorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
																	"    ",
																	"    pm.test(\"Response returns INVALID_UPDATE\", () => {",
																	"        pm.expect(errorResponseCode).to.equal(400);",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period date range of 699 days is too large for use 'temp', maximum is 90 days\")",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"        pm.expect(errorResponse.issue[0].severity).to.equal(\"error\");",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"line\": [\n                \"7\",\n                \"Billing address\",\n                \"Billsworth\",\n                \"Bradford\",\n                \"WEST YORKSHIRE\"              \n            ],\n            \"period\": {\n                \"start\": \"2019-02-02\",\n                \"end\": \"2021-01-01\"\n            },\n            \"postalCode\": \"BB2 2BB\",\n            \"use\": \"temp\"\n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch request to add with a period date range of 699 days for a temp address which is above the limit of 90 days. This should result in an error."
													},
													"response": []
												},
												{
													"name": "Add: Business end date for billing address must be <=366days",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "061715a4-781e-4bc4-9e63-8ca7f3331a54",
																"exec": [
																	"pm.globals.set('nhsID', '5900022412');",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1e9d7a8d-a15c-4a97-9336-e4a2741baf87",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, true);",
																	"",
																	"setTimeout(function () {",
																	"    let errorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
																	"    let errorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
																	"    ",
																	"    pm.test(\"Response returns INVALID_UPDATE\", () => {",
																	"        pm.expect(errorResponseCode).to.equal(400);",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period date range of 2160 days is too large for use 'billing', maximum is 366 days\")",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"        pm.expect(errorResponse.issue[0].severity).to.equal(\"error\");",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"line\": [\n                \"7\",\n                \"Billing address\",\n                \"Billsworth\",\n                \"Bradford\",\n                \"WEST YORKSHIRE\"              \n            ],\n            \"period\": {\n                \"start\": \"2019-02-02\",\n                \"end\": \"2025-01-01\"\n            },\n            \"postalCode\": \"BB2 2BB\",\n            \"use\": \"billing\"\n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch request to add with a period date range of 2160 days for billing address which is above the limit of 366 days. This should result in an error."
													},
													"response": []
												},
												{
													"name": "Add an address with missing PAF key",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1d237fc8-264d-4a4d-ae48-4568e807b6aa",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'address/2/extension/0/extension/1/valueCoding'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "515db2db-79a7-4675-8672-9dfef8c9cc9c",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"add\",\r\n      \"path\": \"/address/-\",\r\n      \"value\":                 {\r\n        \"extension\": [\r\n                {\r\n                    \"extension\": [\r\n                        {\r\n                            \"url\": \"type\",\r\n                            \"valueCoding\": {\r\n                                \"code\": \"PAF\",\r\n                                \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType\"\r\n                            }\r\n                        },\r\n                        {\r\n                            \"url\": \"value\",\r\n                            \"valueString\": \"\"\r\n                        }\r\n                    ],\r\n                    \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey\"\r\n                }\r\n            ],\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add an address with missing PAF key is not permitted, results in error."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Replace",
											"item": [
												{
													"name": "Replace an address where the address \"use\" changes is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9cb0d59c-3808-4a4c-a682-a47805328263",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid value with error - Update Failed - it is not permitted to change the use of name, address, telecom, patient care or relationship data. A new record should be inserted for the new use or an existing instance of the same use may be updated\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4cb3625c-6f5f-4868-bf62-cb5f443c82af",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/1\",\r\n      \"value\":                 {\r\n            \"id\": \"F60E2FF2\",\r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"home\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace an address where the address \"use\" changes is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "**APMSPII-303**Replace address with use 'work' is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "feae51bb-df8a-40d8-8be5-18ae4df34afe",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - address use 'work' cannot be added or replace, only removed\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4cd959db-7756-44cf-a5e6-5a2eda7912c0",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900031888\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/0\",\r\n      \"value\":                 {\r\n            \"id\": \"6FAD76CB\",\r\n            \"line\": [\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-07-22\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"work\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace address with use 'work' is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "**APMSPII-303**Replace address with use 'business' is not permitted Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "29f2f876-835b-430a-8596-42a121313eca",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - address use 'work' cannot be added or replace, only removed\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4e3de951-fe8d-40a5-ae4f-6f53946e224b",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900023877\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/0\",\r\n      \"value\":                 {\r\n            \"id\": \"682F900E\",\r\n            \"line\": [\r\n                \"test\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-07-22\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"work\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replace address with use 'work' is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replacing a 'temp' address without business effective to date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "343826ef-0987-451f-80ca-da59aff6494a",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period end date must be provided for use 'temp'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "37b82f27-90fc-430f-a1ad-7794574125d6",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/1\",\r\n      \"value\":                 {\r\n            \"id\": \"F60E2FF2\",\r\n            \"line\": [\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-07-22\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replacing a 'temp' address without business effective to date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replacing a 'temp' address without business effective from date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c41997d5-5ff6-4ef4-8f11-a4f06aff1337",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'address/1/period/start'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "96fa5562-bfb9-4c45-9b54-fbc3b61c21a1",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/1\",\r\n      \"value\":                 {\r\n            \"id\": \"F60E2FF2\",\r\n            \"line\": [\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n              \"end\": \"2020-08-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"temp\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replacing a 'temp' address without business effective from date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replacing a 'billing' address without business effective to date is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c5fee5f8-31ac-4fc6-b0c4-a5ef58ce25cc",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period end date must be provided for use 'billing'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "40771232-1246-4162-83a8-3a020cc06bae",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900031888\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/1\",\r\n      \"value\":                 {\r\n            \"id\": \"301FF953\", \r\n            \"line\": [\r\n                \"7\",\r\n                \"Norman Avenue\",\r\n                \"Eccelshill\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\"\r\n            },\r\n            \"postalCode\": \"BD2 2LY\",\r\n            \"use\": \"billing\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Add 'billing' address without business effective to date is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replacing an address where the address.id does not match the path is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6cf4b08f-b5a4-44c9-ab6a-31f2d92ef69b",
																"exec": [
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"//Call the update message polling service to obtain the Update response\r",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"/*Perform checks on the Error Response*/\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    console.log(updateErrorResponse)\r",
																	"    pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.expect(UpdateErrorResponseCode).to.equal(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Object ID does not match supplied index for path='/address/2' with resource id='9E7E3CB2' and patch id='A91CF747'\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5993aac6-be64-487b-8b1b-2a8644ce1689",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900036596\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/2\",\r\n      \"value\":    {\r\n           \"id\": \"A91CF747\",\r\n            \"line\": [\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-07-23\"\r\n            },\r\n            \"postalCode\": \"HL12 5HL\",\r\n            \"use\": \"home\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replacing an address where the address.id does not match the path is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replacing an address where the address.id is missing is not permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c23362a0-08e9-4494-afbc-b5ab23d69ab1",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - no id or url found for path with root /address/2\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "959faeed-ea4f-4940-b3f1-e86ee2649c1e",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900036596\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/2\",\r\n      \"value\":    {\r\n            \"line\": [\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\",\r\n                \"testing\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-07-23\"\r\n            },\r\n            \"postalCode\": \"HL12 5HL\",\r\n            \"use\": \"home\"\r\n        }\r\n    }\r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Replacing an address where the address.id is missing is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Replace: Business end date for temp address must be <=90days Copy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a100b0b2-4bf8-461c-a427-68a823bc2aaf",
																"exec": [
																	"pm.globals.set('nhsID', '5900030024');",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f6d15955-56d7-4c1a-b7b2-915d2753bfe7",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, true);",
																	"",
																	"setTimeout(function () {",
																	"    let errorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
																	"    let errorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
																	"    ",
																	"    pm.test(\"Response returns INVALID_UPDATE\", () => {",
																	"        pm.expect(errorResponseCode).to.equal(400);",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period date range of 91 days is too large for use 'temp', maximum is 90 days\")",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"        pm.expect(errorResponse.issue[0].severity).to.equal(\"error\");",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"id\": \"F60E2FF2\",\n            \"line\": [\n                \"7\",\n                \"Norman Avenue\",\n                \"Eccelshill\",\n                \"Bradford\",\n                \"WEST YORKSHIRE\"\n            ],\n            \"period\": {\n                \"end\": \"2020-09-09\",\n                \"start\": \"2020-06-10\"\n            },\n            \"postalCode\": \"BD2 2LY\",\n            \"use\": \"temp\"\n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Replace: Business end date for temp address must be <=90days"
													},
													"response": []
												},
												{
													"name": "Replace: Business end date for billing address must be <=366days",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7b8f752e-b927-40b0-9ea4-737670866845",
																"exec": [
																	"pm.globals.set('nhsID', '5900023702');",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b9efb712-7ce3-4fe2-91fa-cb5e7f8ecb9f",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, true);",
																	"",
																	"setTimeout(function () {",
																	"    let errorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
																	"    let errorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
																	"    ",
																	"    pm.test(\"Response returns INVALID_UPDATE\", () => {",
																	"        pm.expect(errorResponseCode).to.equal(400);",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - period date range of 367 days is too large for use 'billing', maximum is 366 days\")",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"        pm.expect(errorResponse.issue[0].severity).to.equal(\"error\");",
																	"    });",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/address/0\",\n      \"value\":                 {\n            \"id\": \"6E3B6F34\",\n            \"line\": [\n                \"testing\",\n                \"testing\",\n                \"testing\",\n                \"testing\",\n                \"testing\"\n            ],\n            \"period\": {\n                \"start\": \"2020-07-24\",\n                \"end\": \"2021-07-26\"\n            },\n            \"postalCode\": \"HL12 5HL\",\n            \"use\": \"billing\"\n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Replace: Business end date for billing address must be <=366days"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Remove",
											"item": [
												{
													"name": "Remove an address without a test operation",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "99ed86c7-7cf0-4421-a92c-88bb5aff9885",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/address/0' is not immediately preceded by equivalent test - instead it is the first item\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "893f620d-7cfe-406e-b403-37f7237afa17",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900034690\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n        {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/address/0\"\r\n    }    \r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove and address without a test operation is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Remove an address where test path holds incorrect id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e570c36a-a15b-49d3-9c99-cdd5f9eb3a3d",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
																	"\r",
																	"pm.test('Patch Response returned 202', () => {\r",
																	"    pm.expect(pm.response.code).to.eql(202);\r",
																	"})\r",
																	"\r",
																	"// Calling the Polling endpoint\r",
																	"POLLER.retrieveMessage(pm.response, true);\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    let errorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")\r",
																	"    let errorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")\r",
																	"    \r",
																	"    pm.test(\"Response returns INVALID_UPDATE\", () => {\r",
																	"        pm.expect(errorResponseCode).to.equal(400);\r",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - 8B869CFB (<type 'str'>) is not equal to tested value F60E2FF2 (<type 'unicode'>)\")\r",
																	"        pm.expect(errorResponse.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\r",
																	"        pm.expect(errorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"    });\r",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4eb2753e-5c34-4e8c-b157-307dc1d55595",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/address/0/id\",\r\n      \"value\": \"F60E2FF2\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/address/0\"\r\n    }    \r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove an address where test path holds incorrect id is not permitted, results in error."
													},
													"response": []
												},
												{
													"name": "Remove an address where remove operation path is incorrect",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2238244b-704a-42ee-bb8b-94bebfb571cc",
																"exec": [
																	"var updateErrorResponse = pm.response.json();\r",
																	"\r",
																	"pm.test(\"The correct error response has been returned for the Patch\" , () => {\r",
																	"        pm.response.to.have.status(400);\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");\r",
																	"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/address/1' is not immediately preceded by equivalent test pointing to an 'id', 'url' or object - instead operation 'test' with path '/address/0/id' preceding\")\r",
																	"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");\r",
																	"        });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "30650b49-3a64-4e66-ad85-efe4de01e784",
																"exec": [
																	"/*set nhsID as the patient id to be used for the test*/\r",
																	"pm.globals.set(\"nhsID\", \"5900030024\")\r",
																	"\r",
																	"/*Send a PDS Search request to obtain the version id of the patient record*/\r",
																	"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"test\",\r\n      \"path\": \"/address/0/id\",\r\n      \"value\": \"8B869CFB\"\r\n    },\r\n    {\r\n      \"op\": \"remove\",\r\n      \"path\": \"/address/1\"\r\n    }    \r\n  ]\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
																	"key": "nhs_id",
																	"value": "{{nhsID}}",
																	"type": "string"
																}
															]
														},
														"description": "Remove an address where remove operation path is incorrect is not permitted, results in error."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Add: Billing address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0447ad2d-478a-43f4-b085-c23721cb4073",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "35bbc0d7-f0ec-4654-8446-e58bbadd5c92",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")",
															"    ",
															"    let billingAddress = response.address.filter(function (add) {",
															"        return add.use == 'billing';",
															"    });",
															"",
															"    pm.test('Patient record contains a billing address', () => {",
															"        pm.expect(billingAddress).to.have.lengthOf(1);",
															"    })",
															"",
															"    pm.test('Billing address is correct', () => {",
															"        let billingAddress = response.address[1];        ",
															"        pm.expect(billingAddress.postalCode).to.eql('BB2 2BB', 'invalid postcode');",
															"        pm.expect(billingAddress.period.end).to.eql('2020-01-01', 'invalid end date');",
															"        pm.expect(billingAddress.period.start).to.eql('2019-02-02', 'invalid start date');",
															"        pm.expect(billingAddress.line[0]).to.eql('7', 'invalid address line 1');",
															"        pm.expect(billingAddress.line[1]).to.eql('Billing address', 'invalid address line 2');",
															"        pm.expect(billingAddress.line[2]).to.eql('Billsworth', 'invalid address line 3');",
															"        pm.expect(billingAddress.line[3]).to.eql('Bradford', 'invalid address line 4');",
															"        pm.expect(billingAddress.line[4]).to.eql('WEST YORKSHIRE', 'invalid address line 5');",
															"    })",
															"",
															"    pm.test('Billing address contains a Spine generated id', () => {",
															"        let billingAddress = response.address[1];",
															"        pm.expect(billingAddress.id).to.not.be.undefined;",
															"    })",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"line\": [\n                \"7\",\n                \"Billing address\",\n                \"Billsworth\",\n                \"Bradford\",\n                \"WEST YORKSHIRE\"\n            ],\n            \"period\": {\n                \"start\": \"2019-02-02\",\n                \"end\": \"2020-01-01\"\n            },\n            \"postalCode\": \"BB2 2BB\",\n            \"use\": \"billing\"\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add a billing address"
											},
											"response": []
										},
										{
											"name": "Add: PAF key is auto-added by Spine when valid address is recognized",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "baac0f6a-a6b5-4cb6-9dc6-cb06e28d920e",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee68f361-bab4-4dbb-a1e3-59a8da552fe2",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")",
															"",
															"    let billingAddress = response.address.filter(function (add) {",
															"        return add.use == 'billing';",
															"    });",
															"",
															"    pm.test('Patient record contains a billing address', () => {",
															"        pm.expect(billingAddress).to.have.lengthOf(1);",
															"    })",
															"",
															"    pm.test('Billing address is correct', () => {",
															"        let billingAddress = response.address[1];",
															"        pm.expect(billingAddress.postalCode).to.eql('LS4 2JU', 'invalid postcode');",
															"        pm.expect(billingAddress.period.end).to.eql('2020-01-01', 'invalid end date');",
															"        pm.expect(billingAddress.period.start).to.eql('2019-02-02', 'invalid start date');",
															"        pm.expect(billingAddress.line[0]).to.eql('12 Haddon Place', 'invalid address line 1');",
															"        pm.expect(billingAddress.line[1]).to.eql('LEEDS', 'invalid address line 2');",
															"    })",
															"",
															"    pm.test('Billing address contains a PAF key extension', () => {",
															"        let billingAddress = response.address[1];",
															"        pm.expect(billingAddress.extension[0].extension[0].valueCoding.code).to.eql('PAF', 'invlalid code');",
															"        pm.expect(billingAddress.extension[0].extension[0].valueCoding.system).to.eql('https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType', 'invalid system');",
															"        pm.expect(billingAddress.extension[0].extension[1].valueString).to.eql('04401466', 'invalid valueString');",
															"        pm.expect(billingAddress.extension[0].url).to.eql('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey', 'invalid url');",
															"    })",
															"}, 3000);",
															"",
															"// check HL7 Response",
															"setTimeout(function () {",
															"    eval(pm.globals.get(\"SendHL7RetrievePatientMessage\"))();",
															"    setTimeout(function () {",
															"        let response = pm.globals.get(\"HL7RetrieveResponse\");",
															"        pm.test(\"HL7 Response contains the PAF key '04401466'\", () => {",
															"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000201UK03.PartOfWhole\"][1].addr.postalCode).to.eql('LS4 2JU', 'invalid Postcode');",
															"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000201UK03.PartOfWhole\"][1].addr.addressKey).to.eql('04401466', 'invalid PAF key');",
															"        });",
															"",
															"    }, 1000)",
															"}, 4000);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"line\": [\n                \"\",\n                \"12 Haddon Place\",\n                \"\",\n                \"Leeds\",\n                \"\"\n            ],\n            \"period\": {\n                \"start\": \"2019-02-02\",\n                \"end\": \"2020-01-01\"\n            },\n            \"postalCode\": \"LS4 2JU\",\n            \"use\": \"billing\"\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "PAF key is auto-added by Spine when valid address is recognized"
											},
											"response": []
										},
										{
											"name": "Add: Address with a valid PAF key",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1b86f286-914a-409d-be39-0ab2201f70b3",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e5ea6ab4-ad05-4a41-9627-1e430a5a2d80",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")",
															"    ",
															"    let tempAddress = response.address.filter(function (add) {",
															"        return add.use == 'temp';",
															"    });",
															"",
															"    pm.test('Patient record contains a temp address', () => {",
															"        pm.expect(tempAddress).to.have.lengthOf(1);",
															"    })",
															"",
															"    pm.test('Temp address is correct', () => {              ",
															"        pm.expect(tempAddress[0].postalCode).to.eql('DN17 2PD', 'invalid postcode');",
															"        pm.expect(tempAddress[0].period.end).to.eql('2020-08-21', 'invalid end date');",
															"        pm.expect(tempAddress[0].period.start).to.eql('2020-06-01', 'invalid start date');",
															"        pm.expect(tempAddress[0].line[0]).to.eql('1', 'invalid address line 1');",
															"        pm.expect(tempAddress[0].line[1]).to.eql('10 HARROW GARDENS', 'invalid address line 2');",
															"        pm.expect(tempAddress[0].line[2]).to.eql('Somewhere', 'invalid address line 3');",
															"        pm.expect(tempAddress[0].line[3]).to.eql('Scunthorpe', 'invalid address line 4');",
															"        pm.expect(tempAddress[0].line[4]).to.eql('S Humberside', 'invalid address line 5');",
															"    })",
															"",
															"    pm.test('Temp address contains a PAF key extension', () => {",
															"        pm.expect(tempAddress[0].extension[0].extension[0].valueCoding.code).to.eql('PAF', 'invlalid code');",
															"        pm.expect(tempAddress[0].extension[0].extension[0].valueCoding.system).to.eql('https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType', 'invalid system');",
															"        pm.expect(tempAddress[0].extension[0].extension[1].valueString).to.eql('96911839', 'invalid valueString');",
															"        pm.expect(tempAddress[0].extension[0].url).to.eql('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey', 'invalid url');",
															"    })",
															"",
															"    pm.test('Temp address contains a Spine generated id', () => {        ",
															"        pm.expect(tempAddress[0].id).to.not.be.undefined;",
															"    })",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\": {        \n        \"period\": {\n          \"start\": \"2020-06-01\",\n          \"end\": \"2020-08-21\"\n        },\n        \"use\": \"temp\",\n        \"line\": [\n          \"1\",\n          \"10 HARROW GARDENS\",\n          \"Somewhere\",\n          \"Scunthorpe\",\n          \"S Humberside\"\n        ],\n        \"postalCode\": \"DN17 2PD\",\n        \"extension\": [\n          {\n            \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey\",\n            \"extension\": [\n              {\n                \"url\": \"type\",\n                \"valueCoding\": {\n                  \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType\",\n                  \"code\": \"PAF\"\n                }\n              },\n              {\n                \"url\": \"value\",\n                \"valueString\": \"96911839\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add a billing address with a valid PAF key"
											},
											"response": []
										},
										{
											"name": "Add: ZZ99 postcodes are allowed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d388d2b0-3f69-43b5-b4af-ac7cdfd70e9d",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a8030af-7280-4b78-91b2-12d6db8aa343",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")",
															"    ",
															"    let billingAddress = response.address.filter(function (add) {",
															"        return add.use == 'billing';",
															"    });",
															"",
															"    pm.test('Patient record contains a billing address', () => {",
															"        pm.expect(billingAddress).to.have.lengthOf(1);",
															"    })",
															"",
															"    pm.test('Billing address is correct', () => {",
															"        let billingAddress = response.address[1];        ",
															"        pm.expect(billingAddress.postalCode).to.eql('ZZ99 3VZ', 'invalid postcode');",
															"        pm.expect(billingAddress.period.end).to.eql('2020-01-01', 'invalid end date');",
															"        pm.expect(billingAddress.period.start).to.eql('2019-02-02', 'invalid start date');",
															"        pm.expect(billingAddress.line[0]).to.eql('7', 'invalid address line 1');",
															"        pm.expect(billingAddress.line[1]).to.eql('Billing address', 'invalid address line 2');",
															"        pm.expect(billingAddress.line[2]).to.eql('Billsworth', 'invalid address line 3');",
															"        pm.expect(billingAddress.line[3]).to.eql('Bradford', 'invalid address line 4');",
															"        pm.expect(billingAddress.line[4]).to.eql('WEST YORKSHIRE', 'invalid address line 5');",
															"    })",
															"",
															"    pm.test('Billing address contains a Spine generated id', () => {",
															"        let billingAddress = response.address[1];",
															"        pm.expect(billingAddress.id).to.not.be.undefined;",
															"    })",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/address/-\",\n      \"value\":                 {\n            \"line\": [\n                \"7\",\n                \"Billing address\",\n                \"Billsworth\",\n                \"Bradford\",\n                \"WEST YORKSHIRE\"\n            ],\n            \"period\": {\n                \"start\": \"2019-02-02\",\n                \"end\": \"2020-01-01\"\n            },\n            \"postalCode\": \"ZZ99 3VZ\",\n            \"use\": \"billing\"\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Providers should also ensure for any patients with a 'No Fixed Abode' postcode (ZZ99 3VZ) or 'Address Not Known' postcode (ZZ99 3WZ)"
											},
											"response": []
										},
										{
											"name": "Remove: Billing address",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e66c8593-8ff4-4800-9982-e70b926bf9c2",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();",
															"",
															"// console.log(pm.globals.get('nhsID'));",
															"",
															"let resp;",
															"",
															"// Add a billing address to the patients record",
															"setTimeout(function () {",
															"    var Header = require('postman-collection').Header;",
															"    let asidHeader = pm.environment.get(\"asidHeader\");",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"    let authorization = pm.environment.get(\"authorizationHeader\");",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
															"",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
															"        method: 'PATCH',",
															"        header: {",
															"            authorization,",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            correlationIdHeader,",
															"            contentType,",
															"            ifMatch",
															"        },",
															"        body: '{\"patches\":[{\"op\": \"add\",\"path\": \"/address/-\",\"value\":{\"line\": [\"7\",\"Billing address\",\"Billsworth\",\"Bradford\",\"WEST YORKSHIRE\"],\"period\": {\"start\": \"2019-02-02\",\"end\": \"2020-01-01\"},\"postalCode\": \"BB2 2BB\",\"use\": \"billing\"}}]}'",
															"    }, function (err, response) {",
															"        resp = response;",
															"    });",
															"}, 5000);",
															"",
															"",
															"setTimeout(function () {",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"    POLLER.retrieveMessage(resp, false);",
															"",
															"    // make sure the patients record now contains the billing address and store the billing addresses id",
															"    setTimeout(function () {",
															"        let response = pm.variables.get(\"pdsUpdateResponse\");",
															"",
															"        let billingAddress = response.address.filter(function (add) {",
															"            return add.use == 'billing';",
															"        });",
															"",
															"        pm.test('Patient record contains a billing address', () => {",
															"            pm.expect(billingAddress).to.have.lengthOf(1);",
															"        })",
															"",
															"        pm.variables.set('address.id', billingAddress[0].id);        ",
															"    }, 2000);",
															"}, 12000);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3c742ccc-1cd2-4ad4-bd10-c38c3884b736",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")",
															"    ",
															"    let billingAddress = response.address.filter(function (add) {",
															"        return add.use == 'billing';",
															"    });",
															"",
															"    pm.test('Patient record does not contain a billing address', () => {",
															"        pm.expect(billingAddress).to.have.lengthOf(0);",
															"    })",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"2\""
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/address/1/id\",\n      \"value\": \"{{address.id}}\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/address/1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove a billing address"
											},
											"response": []
										},
										{
											"name": "Replace: Billing address",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4f807f0c-a161-4a8c-9ac9-7b60f8a0dcd0",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"\r",
															"pm.test('Patch Response returned 202', () => {\r",
															"    pm.expect(pm.response.code).to.eql(202);\r",
															"})\r",
															"\r",
															"// Calling the Polling endpoint\r",
															"POLLER.retrieveMessage(pm.response, false);\r",
															"\r",
															"setTimeout(function () {\r",
															"    let response = pm.variables.get(\"pdsUpdateResponse\")\r",
															"    \r",
															"    let billingAddress = response.address.filter(function (add) {\r",
															"        return add.use == 'billing';\r",
															"    });\r",
															"\r",
															"    pm.test('Patient record contains a billing address', () => {\r",
															"        pm.expect(billingAddress).to.have.lengthOf(1);\r",
															"    })\r",
															"\r",
															"    pm.test('Billing address is correct', () => {\r",
															"        let billingAddress = response.address[1];        \r",
															"        pm.expect(billingAddress.postalCode).to.eql('BD1 2PY', 'invalid postcode');\r",
															"        pm.expect(billingAddress.period.end).to.eql('2021-05-10', 'invalid end date');\r",
															"        pm.expect(billingAddress.period.start).to.eql('2020-06-10', 'invalid start date');\r",
															"        pm.expect(billingAddress.line[0]).to.eql('17', 'invalid address line 1');\r",
															"        pm.expect(billingAddress.line[1]).to.eql('My new address', 'invalid address line 2');\r",
															"        pm.expect(billingAddress.line[2]).to.eql('Just patched', 'invalid address line 3');\r",
															"        pm.expect(billingAddress.line[3]).to.eql('Bradford', 'invalid address line 4');\r",
															"        pm.expect(billingAddress.line[4]).to.eql('WEST YORKSHIRE', 'invalid address line 5');\r",
															"    })\r",
															"\r",
															"    pm.test('Billing address contains a Spine generated id', () => {\r",
															"        let billingAddress = response.address[1];\r",
															"        pm.expect(billingAddress.id).to.not.be.undefined;\r",
															"    })\r",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7070a649-5f91-42f3-bbe3-fd33ccd8c29d",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update\r",
															"======================================================================================================*/\r",
															"\r",
															"// /*Build a HL7 xml Request with random Patient Data*/\r",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();\r",
															"\r",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/\r",
															"eval(pm.globals.get(\"SendHL7Patient\"))();\r",
															"\r",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/\r",
															"eval(pm.globals.get(\"SendPDSSearch\"))();\r",
															"\r",
															"// console.log(pm.globals.get('nhsID'));\r",
															"\r",
															"let resp;\r",
															"\r",
															"// Add a billing address to the patients record\r",
															"setTimeout(function () {\r",
															"    var Header = require('postman-collection').Header;\r",
															"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
															"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');\r",
															"\r",
															"    pm.sendRequest({\r",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
															"        method: 'PATCH',\r",
															"        header: {\r",
															"            authorization,\r",
															"            asidHeader,\r",
															"            sessionURIDHeader,\r",
															"            identityUUIDHeader,\r",
															"            contentType,\r",
															"            correlationIdHeader,\r",
															"            ifMatch\r",
															"        },\r",
															"        body: '{\"patches\":[{\"op\": \"add\",\"path\": \"/address/-\",\"value\":{\"line\": [\"7\",\"Billing address\",\"Billsworth\",\"Bradford\",\"WEST YORKSHIRE\"],\"period\": {\"start\": \"2020-02-02\",\"end\": \"2021-01-01\"},\"postalCode\": \"BB2 2BB\",\"use\": \"billing\"}}]}'\r",
															"    }, function (err, response) {\r",
															"        resp = response;\r",
															"    });\r",
															"}, 5000);\r",
															"\r",
															"\r",
															"setTimeout(function () {\r",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));\r",
															"    POLLER.retrieveMessage(resp, false);\r",
															"\r",
															"    // make sure the patients record now contains the billing address and store the billing addresses id\r",
															"    setTimeout(function () {\r",
															"        let response = pm.variables.get(\"pdsUpdateResponse\");\r",
															"\r",
															"        let billingAddress = response.address.filter(function (add) {\r",
															"            return add.use == 'billing';\r",
															"        });\r",
															"\r",
															"        pm.test('Patient record contains a billing address', () => {\r",
															"            pm.expect(billingAddress).to.have.lengthOf(1);\r",
															"        })\r",
															"\r",
															"        pm.variables.set('address.id', billingAddress[0].id);        \r",
															"    }, 2000);\r",
															"}, 12000);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"patches\": [\r\n    {\r\n      \"op\": \"replace\",\r\n      \"path\": \"/address/1\",\r\n      \"value\":                 {\r\n          \"id\": \"{{address.id}}\",            \r\n            \"line\": [\r\n                \"17\",\r\n                \"My new address\",\r\n                \"Just patched\",\r\n                \"Bradford\",\r\n                \"WEST YORKSHIRE\"\r\n            ],\r\n            \"period\": {\r\n                \"start\": \"2020-06-10\",\r\n                \"end\":   \"2021-05-10\"\r\n            },\r\n            \"postalCode\": \"BD1 2PY\",\r\n            \"use\": \"billing\"\r\n        }\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"id": "1244deb6-a4f0-4fb7-9b92-814eb242ce3a",
															"key": "nhs_id",
															"value": "{{nhsID}}",
															"type": "string"
														}
													]
												},
												"description": "Add 'billing' address without business effective to date is not permitted, results in error."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Emergency Contact",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Add Emergency Contact - Phone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "11e07551-4f38-46e8-8e67-bb7cadf02547",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f468f45a-2a1b-43fd-9735-fb56869f1fe7",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response contains the update",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\") ",
															"",
															"    pm.test('Check PDS Update Response Contact is correct', () => {      ",
															"        pm.expect(response.contact[0].period).to.eql({\"start\": \"2020-02-27\",\"end\": \"2020-07-27\"});",
															"        pm.expect(response.contact[0].relationship[0]).to.eql({\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]});",
															"        pm.expect(response.contact[0].telecom[0]).to.eql({\"system\":\"phone\",\"value\":\"0900000001\"});",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2020-07-27\"\n            },\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"phone\",\n                    \"value\": \"0900000001\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact - Phone is permitted"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact - email",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "02cae4a3-eb0d-4538-8e0d-586c6aa1b4e9",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7e0e9531-b6b7-4397-926f-046275ab2153",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response contains the update",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\") ",
															"",
															"    pm.test('Check PDS Update Response Contact is correct', () => {      ",
															"        pm.expect(response.contact[0].period).to.eql({\"start\": \"2020-02-27\"});",
															"        pm.expect(response.contact[0].relationship[0]).to.eql({\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]});",
															"        pm.expect(response.contact[0].telecom[0]).to.eql({\"system\":\"email\",\"value\":\"a@hotmail.com\"});",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\"\n            },\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"email\",\n                    \"value\": \"a@hotmail.com\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact - Phone is permitted"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact - other",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3b2422f3-7ea0-40c0-9084-e14721a73abe",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();",
															"",
															"var d = new Date();",
															"var todaysDate = d.toISOString().substr(0, 10);",
															"console.log(todaysDate)",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c0a1986-ed74-4d88-b0b3-9af2ab9f8ea0",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response contains the update",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\") ",
															"",
															"    var d = new Date();",
															"    pm.variables.set('todaysDate', d.toISOString().substr(0, 10));",
															"    console.log(pm.variables.get('todaysDate'))",
															"    ",
															"    pm.test('Check PDS Update Response Contact is correct', () => {      ",
															"        pm.expect(response.contact[0].period).to.eql({\"start\": pm.variables.get('todaysDate')",
															"            });",
															"        pm.expect(response.contact[0].relationship[0]).to.eql({\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]});",
															"        pm.expect(response.contact[0].telecom[0]).to.eql({\"extension\":[{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\",\"valueCoding\":{\"code\":\"textphone\",\"display\":\"Minicom (Textphone)\",\"system\":\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\"}}],\"system\":\"other\",\"value\":\"01234565656\"});",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"other\",\n                    \"value\": \"01234565656\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact - other is permitted"
											},
											"response": []
										},
										{
											"name": "Replace Emergency Contact",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6b68bbe4-55fe-44b6-b7bf-b5ed762b1b82",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();",
															"",
															"// Add a contact to the patients record",
															"setTimeout(function () {",
															"    var Header = require('postman-collection').Header;",
															"    let asidHeader = pm.environment.get(\"asidHeader\");",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"    let authorization = pm.environment.get(\"authorizationHeader\");",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
															"",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
															"        method: 'PATCH',",
															"        header: {",
															"            authorization,",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            correlationIdHeader,",
															"            contentType,",
															"            ifMatch",
															"        },",
															"        body: '{\"patches\":[{\"op\":\"add\",\"path\":\"/contact/-\",\"value\":{\"relationship\":[{\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]}],\"telecom\":[{\"system\":\"other\",\"value\":\"01234565656\"}]}}]}'",
															"    }, function (err, response) {",
															"        resp = response;",
															"    });",
															"}, 5000);",
															"",
															"setTimeout(function () {",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"    POLLER.retrieveMessage(resp, false);",
															"",
															"    // make sure the patients record now contains the billing address and store the billing addresses id",
															"    setTimeout(function () {",
															"        let response = pm.variables.get(\"pdsUpdateResponse\");",
															"",
															"        let contact = response.contact.filter(function (add) {",
															"            return add.telecom[0].system == 'other';",
															"        });",
															"",
															"        pm.test('Patient record contains a contact', () => {",
															"            pm.expect(contact).to.have.lengthOf(1);",
															"",
															"        pm.variables.set('contact.id', contact[0].id);    ",
															"        })",
															"    ",
															"    }, 2000);",
															"}, 12000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5e7fbdb1-5e9c-44e7-a6ab-d0bb789abf76",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response contains the update",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\") ",
															"",
															"    pm.test('Check PDS Update Response Contact is correct', () => {      ",
															"        pm.expect(response.contact[0].period).to.eql({\"start\": \"2020-02-27\"});",
															"        pm.expect(response.contact[0].relationship[0]).to.eql({\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]});",
															"        pm.expect(response.contact[0].telecom[0]).to.eql({\"system\":\"email\",\"value\":\"a@hotmail.com\"});",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/contact/0\",\n      \"value\":                 {\n            \"id\": \"{{contact.id}}\",\n            \"period\": {\n                \"start\": \"2020-02-27\"\n            }, \n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"email\",\n                    \"value\": \"a@hotmail.com\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Replace Emergency Contact is permitted"
											},
											"response": []
										},
										{
											"name": "Remove Emergency Contact",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b354901-5728-42e4-9ce3-c4b4bf416861",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();",
															"",
															"// Add a contact to the patients record",
															"setTimeout(function () {",
															"    var Header = require('postman-collection').Header;",
															"    let asidHeader = pm.environment.get(\"asidHeader\");",
															"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"    let authorization = pm.environment.get(\"authorizationHeader\");",
															"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
															"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
															"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
															"",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
															"        method: 'PATCH',",
															"        header: {",
															"            authorization,",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            correlationIdHeader,",
															"            contentType,",
															"            ifMatch",
															"        },",
															"        body: '{\"patches\":[{\"op\":\"add\",\"path\":\"/contact/-\",\"value\":{\"relationship\":[{\"coding\":[{\"code\":\"C\",\"display\":\"Emergency Contact\",\"system\":\"http://terminology.hl7.org/CodeSystem/v2-0131\"}]}],\"telecom\":[{\"system\":\"other\",\"value\":\"01234565656\"}]}}]}'",
															"    }, function (err, response) {",
															"        resp = response;",
															"    });",
															"}, 5000);",
															"",
															"setTimeout(function () {",
															"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"    POLLER.retrieveMessage(resp, false);",
															"",
															"    // make sure the patients record now contains the billing address and store the billing addresses id",
															"    setTimeout(function () {",
															"        let response = pm.variables.get(\"pdsUpdateResponse\");",
															"",
															"        let contact = response.contact.filter(function (add) {",
															"            return add.telecom[0].system == 'other';",
															"        });",
															"",
															"        pm.test('Patient record contains a contact', () => {",
															"            pm.expect(contact).to.have.lengthOf(1);",
															"",
															"        pm.variables.set('contact.id', contact[0].id);    ",
															"        })",
															"    ",
															"    }, 2000);",
															"}, 12000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "607bc0f3-a237-45bf-85a5-4dd3c41e7f4a",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, false);",
															"",
															"",
															"//Check that the Update Response contains the update",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateResponse\") ",
															"",
															"    pm.test('Check PDS Update Response Contact has been removed', () => {      ",
															"        pm.expect(response.contact).to.eql(undefined);",
															"    })",
															"}, 6000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/contact/0/id\",\n      \"value\": \"{{contact.id}}\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/contact/0\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact is permitted"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "**APMSPII-338** Add Emergency Contact - Code Not \"C\" is not permitted",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9d9cedb5-b29c-4755-964c-60d46b2cfa3e",
														"exec": [
															"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
															"======================================================================================================*/",
															"",
															"// /*Build a HL7 xml Request with random Patient Data*/",
															"eval(pm.globals.get(\"BuildHL7Patient\"))();",
															"",
															"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
															"eval(pm.globals.get(\"SendHL7Patient\"))();",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSSearch\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2838facd-acdf-4599-b58d-246cc9716254",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2020-07-27\"\n            },\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"E\",\n                            \"display\": \"Employer\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"phone\",\n                    \"value\": \"0900000001\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact - Code Not \"C\" is not permitted"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where Telecom is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "36af29ef-a74e-4068-b5d6-99ff4620515d",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bdab73f3-c29a-4d0a-a389-cdfad9ab5809",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'contact/0/telecom'\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2020-07-27\"\n            },\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where Telecom is missing results in error"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where period.start date is in the future",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ffb14bd4-bb8b-4a46-8cd2-345333353ceb",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();",
															"",
															"/*set a date to be in the future*/",
															"var d = new Date();",
															"d.setDate(d.getDate() + 1);",
															"var newDate = d.toISOString().substr(0, 10);",
															"pm.globals.set(\"tomorrowsDate\", newDate)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "04accd58-ac25-4a05-b042-21ab4d517993",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - contact business effective start date cannot be in the future\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"{{tomorrowsDate}}\"\n            },\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"phone\",\n                    \"value\": \"0900000001\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where period.start date is in the future results in error"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where Telecom.value is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "728ad8b0-c92d-4e41-9241-78415d00bb01",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8b5c29a9-a749-42df-abb3-ef16305ed3d6",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'contact/0/telecom/0/value'\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"other\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where Telecom.value is missing results in error"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where Telecom.system is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5b9536af-9c26-4d9d-98f3-9e9d11ab1a5e",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e5d37f46-bf44-429b-8995-aaee75732d1d",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'contact/0/telecom/0/system'\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"value\": \"0123456789\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where Telecom.system is missing results in error"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where Period date are transposed",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5cb42319-8b8c-4ad4-b339-2aff38085ea7",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "80063874-a4dc-4374-8775-8c7a5736854c",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - business effective start date is after the end date\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"end\": \"2020-02-27\",\n                \"start\": \"2020-07-27\"},\n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"other\",\n                    \"value\": \"0123456789\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where Period date are transposed results in error"
											},
											"response": []
										},
										{
											"name": "Add Emergency Contact where Relationship is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "77e4b5ed-7878-4738-ba51-68794ef01daf",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "162cc0f5-7ad5-4222-9dbd-d3cc60fa8a24",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"MISSING_VALUE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Missing value - 'contact/0/relationship'\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/contact/-\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2020-07-27\"},\n            \"telecom\": [\n                {\n                    \"system\": \"other\",\n                    \"value\": \"0123456789\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Add Emergency Contact where Relationship is missing - results in error"
											},
											"response": []
										},
										{
											"name": "Replace Emergency Contact where object id is incorrect",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e3b4a429-0aa9-482d-9513-dd911cd1c528",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e48ae20d-4335-4d95-90cb-1f6a4e82b99a",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Object ID does not match supplied index for path='/contact/0' with resource id='611DCC78' and patch id='611DCC79'\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/contact/0\",\n      \"value\":                 {\n            \"id\": \"611DCC79\",\n            \"period\": {\n                \"start\": \"2020-02-27\"\n            }, \n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"email\",\n                    \"value\": \"ab@hotmail.com\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Replace Emergency Contact where object id is incorrect results in error"
											},
											"response": []
										},
										{
											"name": "Replace Emergency Contact where object id is not provided",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "23763eb2-0a76-4334-9216-b5c3f2aa190f",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "90afbfe6-3c8e-4fa4-98c8-3543251bce70",
														"exec": [
															"var updateErrorResponse = pm.response.json();",
															"",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.response.to.have.status(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - no id or url found for path with root /contact/0\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/contact/0\",\n      \"value\":                 {\n            \"period\": {\n                \"start\": \"2020-02-27\"\n            }, \n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"email\",\n                    \"value\": \"ab@hotmail.com\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Replace Emergency Contact where object id is not provided results in error"
											},
											"response": []
										},
										{
											"name": "Replace Emergency Contact where no Emergency Contact exists",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1cde05a0-a515-4998-b9ab-c6cb5e00458a",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900029824\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d97a3574-77b5-4c9f-b896-3fc9ea516f26",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - list assignment index out of range\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/contact/0\",\n      \"value\":                 {\n            \"id\": \"611DCC79\",\n            \"period\": {\n                \"start\": \"2020-02-27\"\n            }, \n            \"relationship\": [\n                {\n                    \"coding\": [\n                        {\n                            \"code\": \"C\",\n                            \"display\": \"Emergency Contact\",\n                            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0131\"\n                        }\n                    ]\n                }\n            ],\n            \"telecom\": [\n                {\n                    \"system\": \"email\",\n                    \"value\": \"ab@hotmail.com\"\n                }\n            ]\n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Replace Emergency Contact where no Emergency Contact exists results in error"
											},
											"response": []
										},
										{
											"name": "Remove Emergency Contact where Test operation id is incorrect",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2f7ced89-9b4e-4dd9-a73b-094b456073f9",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b488471a-90f3-492f-9ec3-86cccfaa2d3b",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - 611DCC78 (<type 'str'>) is not equal to tested value 611DCC79 (<type 'unicode'>)\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/contact/0/id\",\n      \"value\": \"611DCC79\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/contact/0\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact where Test operation id is incorrect results in error"
											},
											"response": []
										},
										{
											"name": "**APMSPII-341** Remove Emergency Contact where Test operation value is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fa4985c3-eea8-4685-a952-e33cdb00f0a8",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6bed0d6f-ff48-4092-bf97-5100eea2f8ee",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/contact/0/id\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/contact/0\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact where Test operation value is missing results in error"
											},
											"response": []
										},
										{
											"name": "Remove Emergency Contact where Test operation path is incorrect",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8581a7f9-6c87-4c4a-bd88-0a2092dd3993",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d6a5095e-f932-4238-8e63-eae2d4c4145b",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - index '1' is out of bounds\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/contact/1/id\",\n      \"value\": \"611DCC78\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/contact/1\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact where Test operation path is incorrect results in error"
											},
											"response": []
										},
										{
											"name": "Remove Emergency Contact where Test operation is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ecc9d9f5-3849-410a-bdae-c588299456c8",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "39124bbc-064a-4116-82a5-ecfce0698478",
														"exec": [
															"var updateErrorResponse = pm.response.json();",
															"",
															"pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.response.to.have.status(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - removal '/contact/0' is not immediately preceded by equivalent test - instead it is the first item\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n        {\n      \"op\": \"remove\",\n      \"path\": \"/contact/0\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact where Test operation is missing results in error"
											},
											"response": []
										},
										{
											"name": "Remove Emergency Contact where Remove Operation is missing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5dc82e4b-d4ca-4c09-9605-c26bcb390776",
														"exec": [
															"/*set nhsID as the patient id to be used for the test*/",
															"pm.globals.set(\"nhsID\", \"5900027368\")",
															"",
															"/*Send a PDS Search request to obtain the version id of the patient record*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7f229c0b-62a9-44ed-a783-30b1f6179f97",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let updateErrorResponse = pm.variables.get(\"pdsUpdateErrorResponse\")",
															"    let UpdateErrorResponseCode = pm.variables.get(\"pdsUpdateErrorResponseCode\")",
															"    console.log(updateErrorResponse)",
															"    pm.test(\"The correct error response has been returned for the Patch\" , () => {",
															"        pm.expect(UpdateErrorResponseCode).to.equal(400);",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].code).to.eql(\"INVALID_UPDATE\");",
															"        pm.expect(updateErrorResponse.issue[0].details.coding[0].display).to.eql(\"Invalid update with error - Invalid patch - Provided patch made no changes to the resource\")",
															"         pm.expect(updateErrorResponse.issue[0].severity).to.equal(\"error\");",
															"        });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/contact/0/id\",\n      \"value\": \"611DCC78\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/{{nhsID}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"{{nhsID}}"
													]
												},
												"description": "Remove Emergency Contact where Remove Operation is missing results in error"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Telecom",
							"item": [
								{
									"name": "Happy Path",
									"item": [
										{
											"name": "Add",
											"item": [
												{
													"name": "Add telecom type of work",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "afb5ed25-80cd-4ba4-a04e-30a320a4486c",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "7c3506ca-41fb-484f-b4cd-ee5293bc7115",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    pm.test('Response contains valid telecom', () => {        ",
																	"        pm.expect(response.telecom[0].period.start).to.equal('2020-02-27', 'invalid start date');",
																	"        pm.expect(response.telecom[0].system).to.equal('phone', 'invalid phone');",
																	"        pm.expect(response.telecom[0].use).to.equal('work', 'invalid work');",
																	"        pm.expect(response.telecom[0].value).to.equal('01111111', 'invalid value');",
																	"    });",
																	"",
																	"    pm.test('Telecom contains a Spine generated id', () => {",
																	"        pm.expect(response.telecom[0].id).to.not.be.undefined;",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/telecom/-\",\n      \"value\":                 {            \n            \"period\": {\n                \"start\": \"2020-02-27\"\n            },\n            \"system\": \"phone\",\n            \"use\": \"work\",\n            \"value\": \"01111111\"            \n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch request to add a telecom type of work"
													},
													"response": []
												},
												{
													"name": "Telecom start date is added automatically by Spine",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "fc45eb81-bd1c-4292-92eb-589eadac1792",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "889166dd-60a8-464b-b418-01b203fa5ecc",
																"exec": [
																	"const moment = require('moment');",
																	"let todaysDate = moment().format(\"YYYY-MM-DD\");",
																	"",
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    pm.test('Response contains valid telecom', () => {            ",
																	"        pm.expect(response.telecom[0].system).to.equal('phone', 'invalid phone');",
																	"        pm.expect(response.telecom[0].use).to.equal('work', 'invalid work');",
																	"        pm.expect(response.telecom[0].value).to.equal('01111111', 'invalid value');",
																	"    });",
																	"",
																	"    pm.test('Telecom contains todays start date', () => {",
																	"        pm.expect(response.telecom[0].period.start).to.equal(todaysDate, 'invalid start date');",
																	"    });",
																	"",
																	"    pm.test('Telecom contains a Spine generated id', () => {",
																	"        pm.expect(response.telecom[0].id).to.not.be.undefined;",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/telecom/-\",\n      \"value\":                 {            \n            \"system\": \"phone\",\n            \"use\": \"work\",\n            \"value\": \"01111111\"            \n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Check Telecom start date is added automatically by Spine"
													},
													"response": []
												},
												{
													"name": "Add telecom type of email",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b134c5dc-9e5e-45e3-a58f-1bcd8431bdd8",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c1807609-7366-4499-9899-c9fb607d61ea",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    pm.test('Response contains valid telecom', () => {        ",
																	"        pm.expect(response.telecom[0].period.start).to.equal('2020-02-27', 'invalid start date');",
																	"        pm.expect(response.telecom[0].system).to.equal('email', 'invalid system');",
																	"        pm.expect(response.telecom[0].use).to.equal('work', 'invalid use');",
																	"        pm.expect(response.telecom[0].value).to.equal('test@test.com', 'invalid value');",
																	"    });",
																	"",
																	"    pm.test('Telecom contains a Spine generated id', () => {",
																	"        pm.expect(response.telecom[0].id).to.not.be.undefined;",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/telecom/-\",\n      \"value\":                 {            \n            \"period\": {\n                \"start\": \"2020-02-27\"\n            },\n            \"system\": \"email\",\n            \"use\": \"work\",\n            \"value\": \"test@test.com\"            \n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Patch request to add telecom type of email"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Replace",
											"item": [
												{
													"name": "Replace telecom",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "fd8937ec-a135-400c-b663-636322752b03",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"let resp;",
																	"",
																	"// Add a billing address to the patients record",
																	"setTimeout(function () {",
																	"    var Header = require('postman-collection').Header;",
																	"    let asidHeader = pm.environment.get(\"asidHeader\");",
																	"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
																	"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
																	"    let authorization = pm.environment.get(\"authorizationHeader\");",
																	"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
																	"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
																	"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
																	"",
																	"    pm.sendRequest({",
																	"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
																	"        method: 'PATCH',",
																	"        header: {",
																	"            authorization,",
																	"            asidHeader,",
																	"            sessionURIDHeader,",
																	"            identityUUIDHeader,",
																	"            contentType,",
																	"            correlationIdHeader,",
																	"            ifMatch",
																	"        },",
																	"        body: '{\"patches\": [{\"op\": \"add\",\"path\": \"/telecom/-\",\"value\":{\"period\": {\"start\": \"2020-02-27\"},\"system\": \"phone\",\"use\": \"mobile\",\"value\": \"07777777777\"}}]}'",
																	"    }, function (err, response) {",
																	"        resp = response;",
																	"    });",
																	"}, 5000);",
																	"",
																	"",
																	"setTimeout(function () {",
																	"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"    POLLER.retrieveMessage(resp, false);",
																	"",
																	"    // make sure the patients record now contains the billing address and store the billing addresses id",
																	"    setTimeout(function () {",
																	"        let response = pm.variables.get(\"pdsUpdateResponse\");",
																	"       ",
																	"        pm.test('Patient record contains telecom details ', () => {",
																	"            pm.expect(response.telecom[0]).to.not.be.undefined;",
																	"        })",
																	"",
																	"        pm.variables.set('telecom.id', response.telecom[0].id);",
																	"        console.log('telecom.id', response.telecom[0].id)",
																	"    }, 2000);",
																	"}, 12000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5fcf74cc-6470-4e21-b177-d32d4170562d",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    pm.test('Response contains valid telecom', () => {",
																	"        pm.expect(response.telecom[0].id).to.not.be.undefined;",
																	"        pm.expect(response.telecom[0].period.start).to.equal('2020-02-27', 'invalid start date');",
																	"        pm.expect(response.telecom[0].period.end).to.equal('2025-01-01', 'invalid end date');",
																	"        pm.expect(response.telecom[0].system).to.equal('phone', 'invalid system');",
																	"        pm.expect(response.telecom[0].use).to.equal('mobile', 'invalid use');",
																	"        pm.expect(response.telecom[0].value).to.equal('01777221101', 'invalid value');",
																	"    });",
																	"",
																	"    pm.test('Telecom contains a Spine generated id', () => {",
																	"        pm.expect(response.telecom[0].id).to.not.be.undefined;",
																	"    })",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"replace\",\n      \"path\": \"/telecom/0\",\n      \"value\":                 {\n            \"id\": \"{{telecom.id}}\",\n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2025-01-01\"\n            },\n            \"system\": \"phone\",\n            \"use\": \"mobile\",\n            \"value\": \"01777221101\"            \n        }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Replace a telecom"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Remove",
											"item": [
												{
													"name": "Remove telecom",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8da817bd-fd42-4d3f-9fcc-e2336e25917a",
																"exec": [
																	"/*Generic pre-requisites - Create me a Patient and obtain the latest Patient record meta version id order to perform the update",
																	"======================================================================================================*/",
																	"",
																	"// /*Build a HL7 xml Request with random Patient Data*/",
																	"eval(pm.globals.get(\"BuildHL7Patient\"))();",
																	"",
																	"// /*Send a HL7 xml Create Patient Request to DSA and check an acknowledgment response is returned*/",
																	"eval(pm.globals.get(\"SendHL7Patient\"))();",
																	"",
																	"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
																	"eval(pm.globals.get(\"SendPDSSearch\"))();",
																	"",
																	"let resp;",
																	"",
																	"// Add a billing address to the patients record",
																	"setTimeout(function () {",
																	"    var Header = require('postman-collection').Header;",
																	"    let asidHeader = pm.environment.get(\"asidHeader\");",
																	"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
																	"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
																	"    let authorization = pm.environment.get(\"authorizationHeader\");",
																	"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });",
																	"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });",
																	"    let correlationIdHeader = pm.environment.get('correlationIdHeader');",
																	"",
																	"    pm.sendRequest({",
																	"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),",
																	"        method: 'PATCH',",
																	"        header: {",
																	"            authorization,",
																	"            asidHeader,",
																	"            sessionURIDHeader,",
																	"            identityUUIDHeader,",
																	"            contentType,",
																	"            correlationIdHeader,",
																	"            ifMatch",
																	"        },",
																	"        body: '{\"patches\": [{\"op\": \"add\",\"path\": \"/telecom/-\",\"value\":{\"period\": {\"start\": \"2020-02-27\"},\"system\": \"phone\",\"use\": \"mobile\",\"value\": \"07777777777\"}}]}'",
																	"    }, function (err, response) {",
																	"        resp = response;",
																	"    });",
																	"}, 5000);",
																	"",
																	"",
																	"setTimeout(function () {",
																	"    const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"    POLLER.retrieveMessage(resp, false);",
																	"",
																	"    // make sure the patients record now contains the billing address and store the billing addresses id",
																	"    setTimeout(function () {",
																	"        let response = pm.variables.get(\"pdsUpdateResponse\");",
																	"       ",
																	"        pm.test('Patient record contains telecom details ', () => {",
																	"            pm.expect(response.telecom[0]).to.not.be.undefined;",
																	"        })",
																	"",
																	"        pm.variables.set('telecom.id', response.telecom[0].id);",
																	"        console.log('telecom.id', response.telecom[0].id)",
																	"    }, 2000);",
																	"}, 12000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d3e405b7-fbe0-4738-b9b4-a7d3e711cf92",
																"exec": [
																	"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
																	"",
																	"pm.test('Patch Response returned 202', () => {",
																	"    pm.expect(pm.response.code).to.eql(202);",
																	"})",
																	"",
																	"// Calling the Polling endpoint",
																	"POLLER.retrieveMessage(pm.response, false);",
																	"",
																	"setTimeout(function () {",
																	"    let response = pm.variables.get(\"pdsUpdateResponse\")",
																	"    pm.test('Response does not contain telecom details', () => {",
																	"        pm.expect(response.telecom).to.be.undefined;        ",
																	"    });    ",
																	"}, 3000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "If-Match",
																"type": "text",
																"value": "{{metaVersionId}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"test\",\n      \"path\": \"/telecom/0/id\",\n      \"value\": \"{{telecom.id}}\"\n    },\n    {\n      \"op\": \"remove\",\n      \"path\": \"/telecom/0\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/{{nhsID}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																"{{nhsID}}"
															]
														},
														"description": "Remove a telecom"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Responses",
									"item": [
										{
											"name": "Add telecom with an end date that is before start date returns INVALID_UPDATE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d33d8d64-1f25-424a-9529-df9370488058",
														"exec": [
															"pm.globals.set('nhsID', '5900036138');",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "065d7ef0-e131-4a69-8a76-ee80bae8d9a8",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")    ",
															"    pm.test('Response contains INVALID_UPDATE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal('INVALID_UPDATE', 'invalid code')",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal('Invalid update with error - business effective start date is after the end date', 'invalid display')",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system')",
															"        pm.expect(response.issue[0].details.coding[0].version).to.equal('1', 'invalid version')",
															"        pm.expect(response.issue[0].severity).to.equal('error', 'invalid error')",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/telecom/-\",\n      \"value\":                 {            \n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2019-01-01\"\n            },\n            \"system\": \"phone\",\n            \"use\": \"work\",\n            \"value\": \"01111111\"            \n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900036138",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900036138"
													]
												},
												"description": "Add telecom with an end date that is before start date. This should return an error response"
											},
											"response": []
										},
										{
											"name": "Add telecom witn an invalid use type returns INVALID_VALUE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "281af1e4-50d5-4f19-a4b8-9dcc3327cd41",
														"exec": [
															"pm.globals.set('nhsID', '5900036138');",
															"",
															"// /*Send a PDS Search request to obtain the Patient nhs Id & Patient record version id*/",
															"eval(pm.globals.get(\"SendPDSRetrieve\"))();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ebb31eac-c7a6-4ab0-b28d-43ebc955120d",
														"exec": [
															"const POLLER = eval(pm.globals.get(\"PDSUpdateMessageRetrieve\"));",
															"",
															"pm.test('Patch Response returned 202', () => {",
															"    pm.expect(pm.response.code).to.eql(202);",
															"})",
															"",
															"// Calling the Polling endpoint",
															"POLLER.retrieveMessage(pm.response, true);",
															"",
															"setTimeout(function () {",
															"    let response = pm.variables.get(\"pdsUpdateErrorResponse\")    ",
															"    pm.test('Response contains INVALID_VALUE error', () => {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.equal('INVALID_VALUE', 'invalid code')",
															"        pm.expect(response.issue[0].details.coding[0].display).to.equal('Invalid value - \\'quackquack\\' in field \\'telecom/1/use\\'')",
															"        pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system')",
															"        pm.expect(response.issue[0].details.coding[0].version).to.equal('1', 'invalid version')",
															"        pm.expect(response.issue[0].severity).to.equal('error', 'invalid error')",
															"    });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "If-Match",
														"type": "text",
														"value": "{{metaVersionId}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"patches\": [\n    {\n      \"op\": \"add\",\n      \"path\": \"/telecom/-\",\n      \"value\":                 {            \n            \"period\": {\n                \"start\": \"2020-02-27\",\n                \"end\": \"2019-01-01\"\n            },\n            \"system\": \"phone\",\n            \"use\": \"quackquack\",\n            \"value\": \"01111111\"            \n        }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/5900036138",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900036138"
													]
												},
												"description": "Add telecom with an invalid use type. This should return an error response"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Related Person",
					"item": [
						{
							"name": "Related Person 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c12691c2-d7d1-4316-baa3-84c684c0290d",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d3f28b0-e718-406c-b40d-bd484493c8b2",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"surname\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"first\",\"second\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dame\");",
											"pm.variables.set(\"relatedPersonSuffix\", [\"MBA\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"brother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipNOKCode\", \"N\");",
											"pm.variables.set(\"relatedPersonRelationshipNOKDisplay\", \"Next-of-Kin\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"09000000009\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"12\",\"weetwood\",\"somewhere\",\"somewhere town\",\"a county\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2LQ\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"email\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"12:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Large print\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"yes\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "96ffa876-610a-4982-ba3b-5a99d41ee672",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"yes\"\n* Related Person PreferredContactMethod Extension - where it is set to \"email\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Large Print\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to brother\n* Related Person RelationshipClass - when class has been set to Agent\n* Related Person Next of Kin - when next of kin has been set to \"yes\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4ffc44f-27be-47df-ba5a-5ecf30692f17",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b6e1376-9f54-4263-ae13-944435b9e33e",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dr\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"child\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Guardian\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"work\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"fax\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"letter\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"14:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Braille\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"no\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", false);",
											"",
											"pm.variables.set(\"relatedPersonRank1\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "55cadfba-b707-447b-8310-880c9523d3ad",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"letter\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Braille\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"no\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"child\"\n* Related Person RelationshipClass - when class has been set to \"Guardian of patient\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61328682-19a6-4e15-a20e-b8f586049388",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2be6fe6c-c084-42c7-8d54-ee425c05443a",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"partner\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Personal relationship\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"pager\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"textphone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"minicom\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Audio tape\");",
											"//pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"undefined\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"Null\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Unknown\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "a8718a29-e495-42b0-9ed0-793dbad203a9",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Minicom (Textphone)\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Audio tape\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"domestic partner\"\n* Related Person RelationshipClass - when class has been set to \"Personal\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6eddd8d-c714-4c1e-b2d8-ad5e620ef35a",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2319ae0f-3623-4613-8f55-ac71b6e8bb64",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900019241\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"relative\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"email\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"a.s@mail.com\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"not telephone contact\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "d2dc1eaa-b13d-4461-b1e6-51ff385a2d01",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"No Telephone contact\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"family member\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c47c2ee6-bc98-4bcc-b51f-efda852641a9",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6dc9a9d-27da-4fe4-a7dc-f40fea8278bd",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"father\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"answering machine\"); ",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"sign language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "b901174b-63f2-45ba-9ba1-bd0ac20db5b2",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Sign Language\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"father\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03b0f88f-b0f8-45bd-b6be-c513636011f6",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae70fb46-7a1b-42b4-9840-0044d688af6e",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"mother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"emergency\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "8af3a09f-059a-4466-9ce6-4b47a7a1bbcc",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Telephone\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"mother\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ded044f-0ca6-451e-8e5e-6d30bb7f5037",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7de701cc-d110-4464-b428-429fa39d4c8d",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"next of kin\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"mobile\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone via proxy\");",
											"pm.variables.set(\"relatedPersonPatientID\", \"5900005798\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "fb4e235f-2e3a-4362-af53-a6a5a9b1f8da",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has not been set\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"Next-of-Kin\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 8 multiple related persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99cc2f1e-e5b0-4979-b987-61e1ac47c1ae",
										"exec": [
											"var response = pm.response.json(); ",
											"eval(pm.globals.get(\"patient\"));",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											"",
											"",
											"//Checks performed on Subsequent Related people for the given Patient",
											"let rank = pm.variables.get('rank');",
											"rank.forEach(r => {",
											"    var relatedPerson = getRelatedPerson(r);",
											"        pm.test(\"Subsequent related person family name has been mapped correctly\", function () {",
											"            pm.expect(relatedPerson.resource.name[0].family).to.eql(r.relatedPersonFamily);",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person rank has been mapped correctly and in the correct order\", function () {",
											"        let entryInstance = (r.relatedPersonRank- 1)",
											"        if (!r.relatedPersonRank) {",
											"            pm.expect(relatedPerson.resource.extension).to.eql(undefined)",
											"            pm.expect(response.entry[16].resource.name[0].family).to.eql(r.relatedPersonFamily)",
											"        }",
											"        else {",
											"              pm.expect(response.entry[entryInstance].resource.extension[0].valuePositiveInt).to.eql(r.relatedPersonRank);",
											"        }",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person relationshipType has been mapped correctly\", function () {",
											"            ",
											"            if (r.relatedPersonRelationshipType == \"self\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ONESELF\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"self\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"foster parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PRNFOST\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"foster parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"sister\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SIS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"sister\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"spouse\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SPS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"spouse\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"step parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"STPPRN\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"step parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not known\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"U\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Unknown\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"guardian\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Guardian\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Guardian of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"polygamous partner\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PolygamousPartner\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Polygamous Partner of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"dependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Dependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"nondependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NonDependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Non Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContact\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContactCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact and Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"carer\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Carer\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Carer of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not specified\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NotSpecified\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Not Specified\");",
											"            }",
											"            else pm.expect.fail(\"relationshipType not been mapped correctly\");",
											"        });",
											"});",
											"",
											"//Ensure that the total number of related persons returned is 17",
											"pm.test(\"Returned number of Related Persons is 17\", () =>{",
											"    pm.expect(patient().getTotalNumberOfPatients()).to.eql(17);",
											"});",
											"",
											"response.entry[16].resource.name[0].family",
											"//getRelatdPerson function",
											"function getRelatedPerson(r) {",
											"    for (let person of response.entry) {",
											"        try {",
											"\t\t\tif (person.resource.name[0].family == r.relatedPersonFamily) {",
											"\t\t\t    console.log(person);",
											"\t\t\t\treturn person;",
											"\t\t\t}",
											"            } catch(err) {",
											"                }",
											"        }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e48ec0e-c82c-4d86-b8a0-24c07a02995b",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"",
											"//Related Person 1",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"Rank1\",\"Rank1\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"RANK1\");",
											"pm.variables.set(\"relatedPersonFamily\", \"Rank1\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"parent\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"temporary\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"visit\");",
											"pm.variables.set(\"relatedPersonRank1\", 1);",
											"",
											"",
											"//Subsequent Related people for this patient",
											"let rank = [",
											"    {relatedPersonRank: 2,",
											"     relatedPersonRelationshipType: \"self\",",
											"     relatedPersonFamily: \"Rank2\"},",
											"     ",
											"    {relatedPersonRank: 3,",
											"     relatedPersonRelationshipType: \"foster parent\",",
											"     relatedPersonFamily: \"Rank3\"},",
											"     ",
											"    {relatedPersonRank: 4,",
											"     relatedPersonRelationshipType: \"sister\",",
											"     relatedPersonFamily: \"Rank4\"},",
											"     ",
											"    {relatedPersonRank: 5,",
											"     relatedPersonRelationshipType: \"spouse\",",
											"     relatedPersonFamily: \"Rank5\"},  ",
											"",
											"    {relatedPersonRank: 6,",
											"     relatedPersonRelationshipType: \"step parent\",",
											"     relatedPersonFamily: \"Rank6\"},  ",
											"     ",
											"    {relatedPersonRank: 7,",
											"     relatedPersonRelationshipType: \"not known\",",
											"     relatedPersonFamily: \"Rank7\"},  ",
											"    ",
											"    {relatedPersonRank: 8,",
											"     relatedPersonRelationshipType: \"guardian\",",
											"     relatedPersonFamily: \"Rank8\"},",
											"     ",
											"    {relatedPersonRank: 9,",
											"     relatedPersonRelationshipType: \"polygamous partner\",",
											"     relatedPersonFamily: \"Rank9\"},",
											"     ",
											"    {relatedPersonRank: 10,",
											"     relatedPersonRelationshipType: \"dependant\",",
											"     relatedPersonFamily: \"Rank10\"},",
											"",
											"    {relatedPersonRank: 11,",
											"     relatedPersonRelationshipType: \"nondependant\",",
											"     relatedPersonFamily: \"Rank11\"},",
											"     ",
											"    {relatedPersonRank: 12,",
											"     relatedPersonRelationshipType: \"proxy contact\",",
											"     relatedPersonFamily: \"Rank12\"},",
											"     ",
											"    {relatedPersonRank: 13,",
											"    relatedPersonRelationshipType: \"proxy communication\",",
											"    relatedPersonFamily: \"Rank13\"},",
											"     ",
											"    {relatedPersonRank: 14,",
											"    relatedPersonRelationshipType: \"proxy contact communication\",",
											"    relatedPersonFamily: \"Rank14\"},",
											"     ",
											"    {relatedPersonRank: 15,",
											"    relatedPersonRelationshipType: \"carer\",",
											"    relatedPersonFamily: \"Rank15\"},",
											" ",
											"    {relatedPersonRank: 16,",
											"    relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"Rank16\"},",
											"    ",
											"    {relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"No Rank\"},",
											"];",
											"pm.variables.set('rank', rank);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "e43fe085-05d6-497e-8c79-86c34b50d134",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has been set to \"Visit\"\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"parent\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom\n\nThis also tests:\n\n* where there are mora than 1 related persons for the Patient, all the related persons are returned\n* the remainder of the Relationship types; self, foster parent, sister, spouse, step parent, not known\n* where get related person by (related person) object id is triggered, then only that related person is returned for the given patient"
							},
							"response": []
						},
						{
							"name": "Related Person Error Responses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ee402d4-c848-4976-94ee-f0f9050bb1e4",
										"exec": [
											"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
											"\r",
											"let scenario = pm.variables.get('scenario');\r",
											"let asidHeader = pm.variables.get(\"asidHeader\");\r",
											"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
											"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
											"let authorization = pm.environment.get(\"authorizationHeader\");\r",
											"\r",
											"/*for each scenario dataSet loop the Related People Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
											"\r",
											"  scenario.forEach(s => {\r",
											"    console.log(\"scenario under test is: \" + s.desc);\r",
											"\r",
											"   pm.sendRequest({\r",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id + \"/RelatedPerson\",\r",
											"        method: 'GET',\r",
											"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        let response = res.json();\r",
											"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
											"            pm.expect(res.code).to.equal(s.responseStatus);\r",
											"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
											"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
											"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
											"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
											"            \r",
											"        })\r",
											"    })\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31d2eac3-7335-45de-953e-fb306f177f5b",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900006360\"); ",
											"",
											"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ ",
											"  ",
											"   let scenario = [",
											"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\", ",
											"        nhs_id: \"9000000000\", ",
											"        responseStatus: 400, ",
											"        responseIssueCode: \"value\", ",
											"        responseSeverity: \"error\", ",
											"        responseCode: \"INVALID_RESOURCE_ID\", ",
											"        responseDisplay: \"Resource Id is invalid\"}",
											"        ",
											"        // This is a bug and has been raised",
											"      //  {desc: \"Patient has no Related Persons associated\", ",
											"      //   nhs_id: \"5900006360\", ",
											"      //   responseStatus: 404, ",
											"      //   responseIssueCode: \"not-found\", ",
											"      //   responseSeverity: \"information\", ",
											"      //   responseCode: \"RESOURCE_NOT_FOUND\", ",
											"      //   responseDisplay: \"Resource not found\"}",
											"       ]",
											"       ",
											"    pm.variables.set('scenario', scenario); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"id": "888a088e-5bb0-4dde-b7f0-100570ea6a7a",
											"key": "nhs_id",
											"value": "{{patientId}}",
											"type": "string"
										}
									]
								},
								"description": "This test validates that where a Patient does not have a Related person and appropriate error response is returned."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "943bfee0-d321-40d0-ad42-758c1f038f10",
				"type": "text/javascript",
				"exec": [
					"console.log('Running against environment ' + pm.environment.get('environment'));",
					"",
					"// These are the headers for the pm.sendRequest calls",
					"var Header = require('postman-collection').Header;",
					"",
					"pm.environment.set(\"asidHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-asid-header\"),",
					"    value: pm.environment.get(\"from_asid\")",
					"}));",
					"",
					"pm.environment.set(\"sessionURIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-session-urid-header\"),",
					"    value: '1234567890'",
					"}));",
					"",
					"pm.environment.set(\"identityUUIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-identity-uuid-header\"),",
					"    value: pm.environment.get(\"user_id\")",
					"}));",
					"",
					"pm.environment.set(\"authorizationHeader\", new Header({",
					"    key: 'Authorization',",
					"    value: 'Bearer ' + pm.globals.get(\"token\")",
					"}));",
					"",
					"",
					"// Need to add the header NHSD-Correlation-ID to all requests",
					"pm.environment.set(\"correlationIdHeader\", new Header({",
					"    key: 'NHSD-Correlation-ID',",
					"    value: pm.variables.replaceIn('{{$guid}}')",
					"}));",
					"",
					"pm.request.headers.add({",
					"    key: 'NHSD-Correlation-ID',",
					"    value: pm.variables.replaceIn('{{$guid}}')",
					"})",
					"",
					"// When running against apigee, there are a set of headers which we don't want to pass in.",
					"if (pm.environment.get('environment').toLowerCase().includes('api.service.nhs.uk')) {",
					"    console.log(\"Removing headers when running via apigee\");",
					"    pm.request.headers.remove('{{nhsd-asid-header}}');",
					"    pm.request.headers.remove('{{nhsd-identity-uuid-header}}');",
					"    pm.request.headers.remove('NHSD-Identity-JWT');",
					"",
					"    pm.environment.set(\"asidHeader\", undefined);",
					"    pm.environment.set(\"identityUUIDHeader\", undefined);",
					"",
					"    console.log(\"Adding Authorization header\");",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.globals.get(\"token\")",
					"    });",
					"",
					"    pm.environment.set('skipTest', true);",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "079cf26d-496e-41a8-bd66-43f6f8af4999",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "05b24683-12e0-48ee-b7f3-b577f0953f34",
			"key": "metaVersion",
			"value": "173"
		}
	],
	"protocolProfileBehavior": {}
}