{
	"info": {
		"_postman_id": "2a0d247c-5cad-4048-af96-83b8c62f9449",
		"name": "Personal Demographics Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Framwork Setup",
			"item": [
				{
					"name": "checkSearchMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf49ccb2-71c5-4477-9f89-9793362f63e9",
								"exec": [
									"/*functions*/\r",
									"var checkSearchMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Meta version id mapping function\r",
									"pm.test(\"Meta 'versionId' has been mapped correctly\", function () {\r",
									"    console.log(\"expected metaVersionId = \" + (pm.variables.get(\"metaVersionId\")));\r",
									"    console.log(\"returned metaVersionId = \" + (response.entry[0].resource.meta.versionId));\r",
									"    pm.expect(response.entry[0].resource.meta.versionId).to.eql(pm.variables.get(\"metaVersionId\"));\r",
									"    }\r",
									");*/\r",
									"\r",
									"/*Check Name Related items*/\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"suffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"    pm.variables.unset(\"suffix\");\r",
									"}\r",
									"\r",
									");\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.entry[0].resource.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"/*Check Address Related items*/\r",
									"\r",
									"/*address line mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('Address is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"addressLine\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*addressPeriodStart mapping function*/\r",
									"    pm.test(\"Address 'periodStart' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].period.start).to.eql((pm.variables.get(\"addressPeriodStart\")));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*addressPostCode mapping function*/\r",
									"    pm.test(\"Address 'PostCode' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*address.use mapping function*/\r",
									"    pm.test(\"Address 'Use' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"    }\r",
									"    );\r",
									"}\r",
									"\r",
									"/*telecom.system mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom is not displayed for Sensitive Patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.telecom).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"Telecom 'System' has been mapped correctly\", function () {\r",
									"        console.log(\"expected telecomType = \" + (pm.variables.get(\"telecomType\")) + \" and should = \" + (response.entry[0].resource.telecom[0].system));\r",
									"        console.log(\"returned telecomSystem = \" + (response.entry[0].resource.telecom[0].system));\r",
									"        if (pm.variables.get(\"telecomType\") == \"telephone\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"phone\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"fax\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"fax\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"textphone\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"pager\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"email\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"email\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"\r",
									"    });\r",
									"\r",
									"    /*telecom.use mapping function*/\r",
									"\r",
									"    pm.test(\"Telecom 'Use' has been mapped correctly\", function () {\r",
									"\r",
									"        if (pm.variables.get(\"telecomUse\") == \"home\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"work\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"work\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"pager\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"mobile\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"mobile\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"mobile\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"temporary\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"temp\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"Answering Machine\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"Emergency\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*telecomPeriodStart mapping function*/\r",
									"    pm.test(\"Telecom 'periodStart' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*telecomValue mapping function*/\r",
									"    pm.test(\"Telecom 'Value' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"    }\r",
									"    );\r",
									"}\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"        console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"        console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"        var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"        if (!generalPractitionerValueExists) {\r",
									"            console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"        }\r",
									"        else if (generalPractitionerValueExists) {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://digital.nhs.uk/services/organisation-data-service\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"        }\r",
									"        pm.variables.unset(\"generalPractitionerValue\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"/*extention items*/\r",
									"\r",
									"/*DeathNotification Items*/\r",
									"\r",
									"/*DeathNotification ValueDateTime mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"DeathNotification is not displayed for a Sensitive patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.extension).to.equal(undefined);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"DeathNotification has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"deathNotificationValueDateTime\") !== \"\") {\r",
									"            pm.expect((response.entry[0].resource.extension[0].extension[1].valueDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deathNotificationValueDateTime\")));\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"deathNotificationValueDateTime\") === \"\") {\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.extension)).to.eql(undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"meta security object has been mapped correctly\", () => {\r",
									"    if (pm.variables.get('security.code')) {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal(pm.variables.get('security.code'));\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset('security.code');\r",
									"});\r",
									"\r",
									"};\r",
									"\r",
									"pm.globals.set(\"checkSearchMappings\", checkSearchMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1e2a4f1-cabf-41a2-a6bf-c08692a63edb",
								"exec": [
									"/*CreatePatient Function*/",
									"",
									"var createPatient = () => {",
									"",
									"function createPatient() {",
									"    ",
									"    /*create a random firstname*/",
									"    let given = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"    pm.variables.set(\"given\", given);",
									"    console.log(\"Random 'Given' name created is: \" + pm.variables.get(\"given\"));",
									"    ",
									"    /*create a random lastname*/",
									"    let family = pm.variables.replaceIn(\"{{$randomLastName}}\");",
									"    pm.variables.set(\"family\", family);",
									"    console.log(\"Random 'family' name created is: \" + pm.variables.get(\"family\"));",
									"    ",
									"    /*create a random houseNumber*/",
									"    let addressHouseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"    pm.variables.set(\"addressHouseNumber\", addressHouseNumber);",
									"    console.log(\"Random 'houseNumber' created is: \" + pm.variables.get(\"addressHouseNumber\"));",
									"    ",
									"    /*create a random Street*/",
									"    let addressStreet = pm.variables.replaceIn(\"{{$randomStreetName}}\");",
									"    pm.variables.set(\"addressStreet\", addressStreet);",
									"    console.log(\"Random 'addressStreet' created is: \" + pm.variables.get(\"addressStreet\"));",
									"    ",
									"    /*create a random District*/",
									"    let addressDistrict = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" District\";",
									"    pm.variables.set(\"addressDistrict\", addressDistrict);",
									"    console.log(\"Random 'addressDistrict' created is: \" + pm.variables.get(\"addressDistrict\"));",
									"    ",
									"    /*create a random City*/",
									"    let addressCity = pm.variables.replaceIn(\"{{$randomCity}}\");",
									"    pm.variables.set(\"addressCity\", addressCity);",
									"    console.log(\"Random 'addressCity' created is: \" + pm.variables.get(\"addressCity\"));",
									"    ",
									"    /*create a random County*/",
									"    let addressCounty = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" County\";",
									"    pm.variables.set(\"addressCounty\", addressCounty);",
									"    console.log(\"Random 'addressCounty' created is: \" + pm.variables.get(\"addressCounty\"));",
									"    ",
									"    /*create a random postCode*/",
									"    pm.variables.set(\"postCode\", \"PD12\" + _.random(1,9) + \"PD\");",
									"    console.log(\"Random 'postCode' created is: \" + pm.variables.get(\"postCode\"));",
									"    ",
									"    /*create a random gender*/",
									"    pm.variables.set(\"gender\", _.random(1,2));",
									"    console.log(\"Random 'gender' created is: \" + pm.variables.get(\"gender\"));",
									"    ",
									"    /*create a random birthDate*/",
									"    var moment = require('moment');",
									"    let randomYears = _.random(10,50);",
									"    pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));",
									"    pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));",
									"    console.log(\"Random 'birthTime' created is: \" + pm.variables.get(\"birthTime\"));",
									"    console.log(\"Random 'birthDate' created is: \" + pm.variables.get(\"birthDate\"));",
									"}",
									"};",
									"pm.globals.set(\"createPatient\", createPatient.toString());",
									"",
									"  ",
									"  ",
									"  ",
									"  ",
									"  ",
									"  ",
									" ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "This function creates a patient made up of randomised variables, consiting of: \n\n- given name\n- family name\n- address lines (5 lines in total)\n- postcode\n- gender\n- birthdate\n\nit can be used to create a Patient using the Personal Demographics service - HL7 V3 API"
					},
					"response": []
				},
				{
					"name": "FHIR Error Reponse Validator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8519afe6-10fe-47ce-9488-c1aac4d612b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d16440ed-a3e5-455e-8ab4-82a26bd91428",
								"exec": [
									"// Error Message Validation: Provides tests to assert against FHIR error response",
									"",
									"pm.globals.set('errorMessage', function errorMessage() {",
									"    let response = pm.response.json();",
									"    let message = {};",
									"",
									"    message.assertCodeIs = (code) => {",
									"        pm.test(\"Returns the code \" + code, () => {",
									"            pm.expect(response.issue[0].details.coding[0].code).to.eql(code);",
									"        });",
									"    }",
									"",
									"    message.assertDisplayIs = (display) => {",
									"        pm.test(\"Returns the display message \" + display, () => {",
									"            pm.expect(response.issue[0].details.coding[0].display).to.eql(display);",
									"        });",
									"    }",
									"",
									"    message.assertSeverityIs = (severity) => {",
									"        pm.test(\"Returns the severity \" + severity, () => {",
									"            pm.expect(response.issue[0].severity).to.eql(severity);",
									"        });",
									"    }",
									"",
									"    message.assertSystemIs = (system) => {",
									"        pm.test(\"Returns the system message \" + system, () => {",
									"            pm.expect(response.issue[0].details.coding[0].system).to.eql(system);",
									"        });",
									"    }",
									"",
									"    return message;",
									"} + '; errorMessage();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "# Function: FHIR Error Response Validator\n___\n### Description\nThis function provides the capability to assert aspects of the generic FHIR based error response matches expectation.\n \n##### Example FHIR Error Response\n```\n{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}\n```\n\n### Usage\nUse eval to evaluate the function, which is stored as the global variable _errorMessage_\n```\neval(pm.globals.get(\"errorMessage\"));\n```\nCall the various different internal 'methods' to assert against key parts of the error message\n```\nerrorMessage().assertCodeIs(\"EXTRA_VALUE\");\nerrorMessage().assertDisplayIs(\"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\");\nerrorMessage().assertSeverityIs(\"error\");\nerrorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\n```\n\n### Output\n- PASS Returns the code EXTRA_VALUE\n- PASS Returns the display message Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\n- PASS Returns the severity error\n- PASS Returns the system message https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode"
					},
					"response": []
				},
				{
					"name": "Patient Validator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4023e9a-078b-494c-a941-cefaced5defb",
								"exec": [
									"// Patient Utility: Provides key patient response related functions",
									"pm.globals.set('patient', function patient() {",
									"    let response = pm.response.json();",
									"    let calls = {};",
									"",
									"    calls.getScores = () => {",
									"        var scores = [];",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            scores.push(response.entry[i].search.score);",
									"        }",
									"",
									"        return scores;",
									"    };",
									"",
									"    calls.getTotalNumberOfPatients = () => {",
									"        let response = JSON.parse(responseBody);",
									"        return response.total;",
									"    };",
									"    ",
									"    calls.containsPatientWithNhsNumber = function(nhsNumber) {",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            if(response.entry[i].resource.id === nhsNumber) {",
									"                return true;",
									"            }",
									"        }",
									"",
									"        return false;",
									"    };",
									"    ",
									"    calls.getScoreByNhsNumber = function(resp, nhsNumber) {",
									"        console.log(\"HERE: \" + resp);",
									"        for (i = 0; i < resp.entry.length; i++) {",
									"            if (resp.entry[i].resource.id === nhsNumber) {",
									"                return resp.entry[i].search.score;",
									"            }",
									"        }",
									"",
									"        return null;",
									"    };",
									"",
									"    return calls;",
									"} + '; patient();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Assertions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4023e9a-078b-494c-a941-cefaced5defb",
								"exec": [
									"// Assert utility: Tests for key aspects of the response",
									"pm.globals.set(\"assertThatUtil\", function assertThatUtil() {",
									"    let response = pm.response.json();",
									"    let util = {};",
									"",
									"    util.statusCodeIs = (code) => {",
									"        pm.test(\"Returns status code \" + code, () => {                    ",
									"            pm.response.to.have.status(code);            ",
									"        });",
									"",
									"    };",
									"",
									"    util.responseContainsHeader = (headerName, headerValue) => {",
									"        pm.test(\"Response contains header \" + headerName + \" with value \" + headerValue, () =>{",
									"            pm.response.to.have.header(headerName);",
									"            pm.expect(postman.getResponseHeader(headerName)).to.equal(headerValue);",
									"        });",
									"    };",
									"",
									"    return util;",
									"} + '; assertThatUtil();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkRetrieveMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb4562d3-e6c0-4c41-a842-ab6c17467b4a",
								"exec": [
									"var checkRetrieveMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    pm.expect(response.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    \r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"prefix\") === undefined) {\r",
									"        pm.expect(response.name[0].prefix).to.eql(undefined);\r",
									"    } else {\r",
									"        pm.expect(response.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"prefix\");\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"suffix\")) {\r",
									"        pm.expect(response.name[0].suffix).to.equal(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"// Check Meta.Security object is displayed for Sensitive Patients\r",
									"pm.test(\"Security object has been mapped correctly\", () => {\r",
									"    let securityCode = pm.variables.get(\"securityCode\");\r",
									"\r",
									"    if (securityCode) {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('R');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check deathNotificationExtension\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"deathNotificationStatus extension has been mapped correctly -  Only checked for a Sensitive Patient\", () => {\r",
									"        pm.expect(response.extension[0].extension[0].url).to.equal('deathNotificationStatus');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.equal('1', 'invalid code');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.equal(pm.variables.get(\"deathNotificationStatus.display\"));\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.equal('https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus', 'invalid system');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.equal('1.0.0', 'invalid version');\r",
									"    });\r",
									"}\r",
									"\r",
									"/*Check Address Related items*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Address for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        let expectedValue;\r",
									"        switch (pm.variables.get(\"addressType\")) {\r",
									"            case 'usual':\r",
									"                expectedValue = 'home';\r",
									"                break;\r",
									"            case 'work':\r",
									"                expectedValue = 'work';\r",
									"                break;\r",
									"            case 'correspondence':\r",
									"                expectedValue = 'billing';\r",
									"                break;\r",
									"            case 'temporary':\r",
									"                expectedValue = 'temp';\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"addressType mapped incorrectly\");\r",
									"        }\r",
									"\r",
									"        pm.expect(response.address[0].use).to.eql(expectedValue, \"invalid addressType\");\r",
									"        pm.expect(JSON.stringify(response.address[0].line)).to.eql(pm.variables.get(\"addressLine\"), \"invalud addressLine\");\r",
									"        pm.expect(response.address[0].period.start).to.eql(pm.variables.get(\"addressPeriodStart\"), \"invalid addressPeriodStart\");\r",
									"        pm.expect(response.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"), \"invalid postalCode\");\r",
									"\r",
									"        let addressPeriodEnd = pm.variables.get(\"addressPeriodEnd\") === undefined ? undefined : pm.variables.get(\"addressPeriodEnd\");\r",
									"        pm.expect(response.address[0].period.end).to.eql(addressPeriodEnd, \"invalid addressPeriodEnd\");\r",
									"    });\r",
									"    \r",
									"    pm.variables.unset(\"addressPeriodEnd\");\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.telecom).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Telecom has been mapped correctly\", function () {\r",
									"        let telecomType;\r",
									"        if (pm.variables.get(\"telecomType\")) {\r",
									"            switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                case 'telephone':\r",
									"                    telecomType = \"phone\";\r",
									"                    break;\r",
									"                case 'fax':\r",
									"                case 'email':\r",
									"                    telecomType = pm.variables.get(\"telecomType\");\r",
									"                    break;\r",
									"                case 'textphone':\r",
									"                    telecomType = \"pager\";\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect.fail(\"telecomType mapping failure\");\r",
									"                    break;\r",
									"            }\r",
									"            pm.expect(response.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                case 'emergency':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"            }\r",
									"\r",
									"            pm.expect(response.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"            pm.expect(response.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"            pm.expect(response.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"        }\r",
									"        else {\r",
									"            pm.expect(response.telecom).to.eql(undefined);\r",
									"        }\r",
									"    })\r",
									"\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"};\r",
									"\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"    if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"        console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"        pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"    } else {\r",
									"        console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://digital.nhs.uk/services/organisation-data-service\");\r",
									"        pm.expect(response.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"generalPractitionerValue\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"});\r",
									"\r",
									"/*nominatedPharmacy mapping function*/\r",
									"pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"    let nominatedPharmacyExists = (pm.variables.get(\"nominatedPharmacy\"));\r",
									"    let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"    if (!nominatedPharmacyExists) {\r",
									"        pm.expect(nominatedPharmacyExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"nominatedPharmacy has been set for the patient so nominatedPharmacy should be returned\");\r",
									"        pm.expect(nominatedPharmacyExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/ExtensionUKCore-NominatedPharmacy\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.period.start).to.eql(pm.variables.get(\"nominatedPharmacyPeriodStart\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.period.end).to.eql(pm.variables.get(\"nominatedPharmacyPeriodEnd\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"nominatedPharmacy\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"nominatedPharmacy\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"nominatedPharmacy\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodStart\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodEnd\");\r",
									"});\r",
									"\r",
									"\r",
									"/*dispensingDoctor mapping function*/\r",
									"pm.test(\"dispensingDoctor has been mapped correctly\", function () {\r",
									"    let dispensingDoctorExtension = response.extension === undefined ? undefined : getDispensingDoctor(response.extension);\r",
									"    let dispensingDoctorExists = pm.variables.get(\"dispensingDoctor\");\r",
									"\r",
									"    if (!dispensingDoctorExists) {\r",
									"        pm.expect(dispensingDoctorExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"dispensingDoctor has been set for the patient so dispensingDoctor should be returned\");\r",
									"        pm.expect(dispensingDoctorExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.period.start).to.eql(pm.variables.get(\"dispensingDoctorPeriodStart\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"dispensingDoctor\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"dispensingDoctor\")));\r",
									"    }\r",
									"    pm.variables.unset(\"dispensingDoctor\");\r",
									"    pm.variables.unset(\"dispensingDoctorPeriodStart\");\r",
									"});\r",
									"\r",
									"/*medicalApplianceSupplier mapping function*/\r",
									"pm.test(\"medicalApplianceSupplier has been mapped correctly\", function () {\r",
									"    let medicalApplianceSupplierExtension = response.extension === undefined ? undefined : getMedicalApplianceSupplier(response.extension);\r",
									"    let medicalApplianceSupplierExists = pm.variables.get(\"medicalApplianceSupplier\");\r",
									"\r",
									"    if (!medicalApplianceSupplierExists) {\r",
									"        pm.expect(medicalApplianceSupplierExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"medicalApplianceSupplier has been set for the patient so medicalApplianceSupplier should be returned\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.period.start).to.eql(pm.variables.get(\"medicalApplianceSupplierPeriodStart\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"medicalApplianceSupplier\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"medicalApplianceSupplier\")));\r",
									"    }\r",
									"    pm.variables.unset(\"medicalApplianceSupplier\");\r",
									"    pm.variables.unset(\"medicalApplianceSupplierPeriodStart\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"language Extention has been mapped correctly\", () => {\r",
									"    let languageExtension = response.extension === undefined ? undefined : getLanguageExtention(response.extension);\r",
									"    let language = pm.variables.get(\"language\");\r",
									"\r",
									"    if (!language) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"language\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"languageDisplay\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"interpreter\"));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"language\");\r",
									"    pm.variables.unset(\"languageDisplay\");\r",
									"    pm.variables.unset(\"interpreter\");\r",
									"\r",
									"});\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    for (let extensions of response.extension) {\r",
									"        try {\r",
									"                for (let e of extensions.extension) {\r",
									"                    if (e.url == \"language\") {\r",
									"                    console.log(e);\r",
									"                    return extensions;\r",
									"                    }       \r",
									"                 }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"}\r",
									"\r",
									"\r",
									"function getNominatedPharmacy(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/ExtensionUKCore-NominatedPharmacy\") {\r",
									"\t\t\t\t\t\tconsole.log(\"nominatedPharmacyExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"function getDispensingDoctor(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"\t\t\t\t\t\tconsole.log(\"dispensingDoctorExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"function getMedicalApplianceSupplier(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"\t\t\t\t\t\tconsole.log(\"medicalApplianceSupplierExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"};       \r",
									"\r",
									"pm.variables.set(\"s-flagged\",false);\r",
									"pm.globals.set(\"checkRetrieveMappings\", checkRetrieveMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Simple Search",
							"item": [
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Sensitive Patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"pm.variables.set(\"s-flagged\", true);",
													"",
													"pm.variables.set(\"family\", \"Middleton\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2000-01-01\");",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"pm.variables.set(\"prefix\", \"Baroness\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Cynthia\",\"Cindy\"]);",
													"pm.variables.set(\"suffix\", [\"Brnss\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-31\");",
													"pm.variables.set(\"patientId\", \"5900018512\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"deceasedDateTime\", \"2009-05-01\");",
													"pm.variables.set(\"security.code\", \"R\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"pm.variables.set(\"s-flagged\", false);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e2221d-db2e-4e98-a510-b18b78820f52",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Alias\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"1990-10-10\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Dr\");",
													"pm.variables.set(\"nameType\", \"alias\");",
													"pm.variables.set(\"addressType\", \"work\");",
													"pm.variables.set(\"telecomType\", \"fax\");",
													"pm.variables.set(\"telecomUse\", \"work\");",
													"pm.variables.set(\"given\", [\"John\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"bt Global services\",\"1 sovereign Street\",\"\",\"leeds\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"postalCode\", \"LS14BT\");",
													"pm.variables.set(\"patientId\", \"5900007820\");",
													"pm.variables.set(\"metaVersionId\", \"21\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"2342424234\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f45d509a-3d7a-48a5-8bd2-8c8cced401eb",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e2221d-db2e-4e98-a510-b18b78820f52",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Unknown\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2001-02-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lady\");",
													"pm.variables.set(\"nameType\", \"preferred\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"textphone\");",
													"pm.variables.set(\"telecomUse\", \"pager\");",
													"pm.variables.set(\"given\", [\"person\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 westwood\",\"\",\"bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"postalCode\", undefined);",
													"pm.variables.set(\"patientId\", \"5900007073\");",
													"pm.variables.set(\"metaVersionId\", \"4\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0f9db16-d23e-465e-a016-a9b7e91581de",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e2221d-db2e-4e98-a510-b18b78820f52",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"previous\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2008-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lord\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"email\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"someone\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"15 westwood ave\",\"eccleshill\",\"Bradford\",\"west yorkshire\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900019241\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e2221d-db2e-4e98-a510-b18b78820f52",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"temporary\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2004-03-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Miss\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"mobile\");",
													"pm.variables.set(\"given\", [\"ned\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900008290\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09000000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e2221d-db2e-4e98-a510-b18b78820f52",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mister\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"2009-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mr\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"temporary\");",
													"",
													"pm.variables.set(\"given\", [\"Any\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900005798\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & DOD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family, DOD & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Historic Search",
							"item": [
								{
									"name": "Historic Search - search with wildcarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\",  undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'family' name will return the patient with current name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{family}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{family}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given and historic name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' and 'family' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'family' name will return the patient with current 'family' name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&given={{historicGiven}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "given",
													"value": "{{historicGiven}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildcarded Historic given and family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Advanced Search",
							"item": [
								{
									"name": "Invalid Wildcards",
									"item": [
										{
											"name": "Search - Invalid Leading Wildcard - given1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"pm.variables.set(\"givenq\", \"S\\*\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenq}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenq}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										},
										{
											"name": "Search - Invalid Leading Wildcard - given2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"pm.variables.set(\"givenq\", \"\\*earch\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenq}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenq}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										},
										{
											"name": "Search - Invalid Leading Wildcard - family1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"M\\*\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										},
										{
											"name": "Search - Invalid Leading Wildcard - family2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"\\*issing\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										},
										{
											"name": "Search - Invalid Leading Wildcard - postCode1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Missing\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"address-postcode\", \"L\\*\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{address-postcode}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{address-postcode}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										},
										{
											"name": "Search - Invalid Leading Wildcard - postCode2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Missing\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"address-postcode\", \"\\*2AA\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_LEADING_WILDCARD\");",
															"errorMessage().assertDisplayIs(\"Illegal leading wildcard\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{address-postcode}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{address-postcode}}"
														}
													]
												},
												"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "date range tests",
									"item": [
										{
											"name": "DOD Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOD between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOD falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-02&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-03&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "DOB Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOB between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2010-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-02&birthdate=le2011-01-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2009-12-31\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "exact-match",
									"item": [
										{
											"name": "All patients are returned when search query matches many patients all with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns all patients with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    scores.forEach(score => {",
															"        pm.expect(score).to.equal(1);        ",
															"    });",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2020-02-11&family=length&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns all patients from a search which matched multiple patients all with a score =1"
											},
											"response": []
										},
										{
											"name": "Only patients with a score of 1 are returned when search query matches many patients",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "02a77542-f342-44b5-9609-c9a77ebd7cfe",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 1 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    pm.expect(scores).to.have.lengthOf(1);",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to true returns only those patients with a score of 1 from a search which matched multiple patients with scores >0 and <=1"
											},
											"response": []
										},
										{
											"name": "0 patients are returned when search query matches 0 patients with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "02a77542-f342-44b5-9609-c9a77ebd7cfe",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 0 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "len*"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns 0 patients from a search which matched multiple patients all with a score <1"
											},
											"response": [
												{
													"name": "0 patients returned respose",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_exact-match",
																	"value": "true"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "len*"
																},
																{
																	"key": "gender",
																	"value": "male"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:01:42 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "123"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"484cd9e73bb551f9156572bd7c3379a45d286549\""
														}
													],
													"cookie": [],
													"body": "{\n    \"entry\": [],\n    \"resourceType\": \"Bundle\",\n    \"timestamp\": 1582794102,\n    \"total\": 0,\n    \"type\": \"searchset\"\n}"
												}
											]
										},
										{
											"name": "Exact match as false returns all matched patients regardless of score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"var scores = util.getScores();    ",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 3 patients in total\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(3);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score < 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1062c549-dccc-489f-a369-c16da00a1232",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to false returns all patients from a search matching multiple patients with scores > 0 and <=1"
											},
											"response": []
										}
									],
									"description": "Every result includes a score from 0 to 1.\n\nScores less than 1 can happen when parameters supplied do not exactly match the values on the patient record. Results are sorted best-first. You can request to only return exact matches (score = 1) using the _exact-match parameter.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67f97a66-b476-4b07-a989-a8ec489882c4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "49c982ec-16a1-4e94-9191-4ab47b83cd5b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "max-results",
									"item": [
										{
											"name": "Search query resulting in >50 patients being matched returns TOO_MANY_MATCHES",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
															"error.assertDisplayIs(\"Too Many Matches\");",
															"error.assertSeverityIs(\"information\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
											},
											"response": [
												{
													"name": "TOO_MANY_MATCHES error message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2019-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Wed, 26 Feb 2020 15:52:24 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "538"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Search query resulting in more matched patients then max-results value returns TOO_MANY_MATCHES",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = pm.response.json();",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThat.statusCodeIs(200);",
															"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
															"error.assertDisplayIs(\"Too Many Matches\");",
															"error.assertSeverityIs(\"information\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-01-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-01-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Search query which matches more patients then the max-results value returns a *TOO_MANY_MATCHES* error"
											},
											"response": []
										},
										{
											"name": "Empty max_results value returns INVALID_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "61099e06-453f-4b5a-8e82-3f134f1d7ebf",
														"exec": [
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
															"errorMessage().assertDisplayIs(\"Invalid value - \\'\\' in field \\'_max-results\\'\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": ""
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Empty (\\' \\') *max-results* value returns a *INVALID_VALUE* error"
											},
											"response": [
												{
													"name": "INVALID_VALUE error response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610",
																"type": "text"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890",
																"type": "text"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": ""
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Wed, 26 Feb 2020 15:52:00 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "544"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - '' in field '_max-results'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Over 50 max_results value returns INVALID_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "61099e06-453f-4b5a-8e82-3f134f1d7ebf",
														"exec": [
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
															"errorMessage().assertDisplayIs(\"Invalid value - 51 in field \\'_max-results\\'\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=51&gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "51"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "*Max-results* value of 51 returns an *INVALID_VALUE* error"
											},
											"response": [
												{
													"name": "INVALID_VALUE error response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610",
																"type": "text"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890",
																"type": "text"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": ""
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Wed, 26 Feb 2020 15:52:00 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "544"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - '' in field '_max-results'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										}
									],
									"description": "By default, the endpoint will return a maximum of 50 results.\n\nIf there are more than 50 matching patient records, the endpoint will return no results and the error response TOO_MANY_MATCHES. You can choose to limit the number of results returned using the _max-results parameter.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fuzzy-match",
									"item": [
										{
											"name": "Mismatching General Practitioner reduces match score against search without General Practitioner",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900002365\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900002365');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy&general-practitioner=A200",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														},
														{
															"key": "general-practitioner",
															"value": "A200"
														}
													]
												},
												"description": "Validates a mismatching General Practitioner reduces the amtch score against the same search without General Practitioner"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles transposed family names",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															"// Send request with _fuzzy-match=false to make sure no patients are returned",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
															"    method: 'GET',",
															"    header: {",
															"            'NHSD-ASID': pm.environment.get(\"from_asid\"),",
															"            'NHSD-Session-URID': pm.environment.get(\"role_id\"),",
															"            'NHSD-Identity-UUID': pm.environment.get(\"user_id\"),",
															"            'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
															"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
															"        pm.expect(res.json().total).to.equal(0);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"var response = pm.response.json().entry[0];",
															"",
															"pm.test('@Ater: fuzzy-match set to true returns status code 200', () =>{",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Returns 1 patient', () => {",
															"    pm.expect(pm.response.json().total).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900004171\", () =>{",
															"   pm.expect(response.resource.id).to.equal('5900004171');",
															"});",
															"",
															"pm.test(\"Returns patient with family name 'David'\", () => {",
															"    pm.expect(response.resource.name[0].family).to.equal(\"David\");",
															"});",
															"",
															"pm.test(\"Returns patient with given name 'James'\", () => {",
															"    pm.expect(response.resource.name[0].given).to.contain('James');",
															"});",
															"",
															"pm.test(\"Returns patient with birthdate=2000-01-01\", () =>{",
															"    pm.expect(response.resource.birthDate).to.equal('2000-01-01');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "James"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "If no patients are matched, using fuzzy-match a check is performed for transposed names such as Adam Thomas and Thomas Adam (family and given names). This test asserts that when doing a fuzzy-match search, patients with transposed names are successfully matched"
											},
											"response": []
										},
										{
											"name": "Fuzzy search  returns FUZZY_CRITERIA_NOT_MET when querying using invalid parameter combinations",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															"pm.variables.set('params', params = [",
															"   ",
															"    // Requests missing mandatory parameters required for a fuzzy search",
															"    { parameter: \"DOB & Family\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=le', expected: 400 },",
															"    { parameter: \"DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng*&address-postcode=DN16*', expected: 400 },",
															"    { parameter: \"Gender, DOB & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&&given=Selena', expected: 400 },",
															"",
															"    // Requests using just mandatory parameters required for a fuzzy search",
															"    { parameter: \"DOB, Family & Given\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&family=leng&address-postcode=DN16 6BB', expected: 200 },",
															"    { parameter: \"Gender, DOB, Given & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena', expected: 200 },",
															"",
															"    // Requests using bpth mandatory and extra valid parameters for a fuzzy search",
															"    { parameter: \"DOB, Family, Given & Postcode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=len&address-postcode=DN16&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family, PostCode & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena&family=len', expected: 200 }",
															"]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"var response = pm.response.json();",
															"",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let params = pm.variables.get('params');",
															"",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"        }",
															"    }, function (err, res) {",
															"        console.log(\"Response for \" + p.parameter, res.json());",
															"",
															"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
															"            pm.expect(res.code).to.equal(p.expected);",
															"        });",
															"",
															"        if (p.expected === 400) {",
															"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
															"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('FUZZY_CRITERIA_NOT_MET', 'invalid code');",
															"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal('A fuzzy search was requested however the data given did not meet the fuzzy search criteria', 'invalid display message');",
															"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
															"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
															"            });",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "FuzzyYYYYYY"
														}
													]
												},
												"description": "Validates search parameter combinations for a fuzzy search\n- Minimum parameters combinations return a 200 response\n-- given name, family name and date of birth\n-- family name, date of birth, gender and postcode\n-- given name date of birth, gender and postcode\n- Invalid combinations return a 400 response\n-- DOB & Family\n-- DOB, Family & PostCode\n-- Gender, DOB & Given\n- Mandatory plus non-mandatory parameter combinations return a 200 response\n-- DOB, Family, Given & Postcode\n-- Gender, DOB, Family, PostCode & Given\n"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search attempt using 1 character family name returns FUZZY_CRITERIA_NOT_MET error",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(400);",
															"error.assertCodeIs(\"FUZZY_CRITERIA_NOT_MET\");",
															"error.assertDisplayIs(\"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\");",
															"error.assertSeverityIs(\"error\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Attempt a _fuzzy_match_ using a family name of 1 character returns _FUZZY_CRITERIA_NOT_MET error"
											},
											"response": [
												{
													"name": "FUZZY_CRITERIA_NOT_MET error message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_fuzzy-match",
																	"value": "true"
																},
																{
																	"key": "family",
																	"value": "S*"
																},
																{
																	"key": "birthdate",
																	"value": "2015-12-15"
																},
																{
																	"key": "given",
																	"value": "Fuzzy"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 15:59:27 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "605"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"FUZZY_CRITERIA_NOT_MET\",\n                        \"display\": \"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												},
												{
													"name": "Fuzzy Search invalid search criteria",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_fuzzy-match",
																	"value": "true"
																},
																{
																	"key": "family",
																	"value": "S*"
																},
																{
																	"key": "birthdate",
																	"value": "2015-12-15"
																},
																{
																	"key": "given",
																	"value": "Fuzzy"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:05:44 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "599"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"NO_SEARCHES_PERFORMED\",\n                        \"display\": \"No searches were performed as the search criteria did not meet the minimum requirements\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Invalid value in fuzzy_match parameter returns INVALID_VALUE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(400);",
															"",
															"error.assertCodeIs(\"INVALID_VALUE\");",
															"error.assertDisplayIs(\"Invalid value - 'test' in field '_fuzzy-match'\");",
															"error.assertSeverityIs(\"error\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "test"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting the _fuzzy-match_ value to `test` returns a *INVALID_VALUE* error message "
											},
											"response": [
												{
													"name": "fuzzy-match INVALID_VALUE response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_fuzzy-match",
																	"value": "test"
																},
																{
																	"key": "family",
																	"value": "Stephen"
																},
																{
																	"key": "birthdate",
																	"value": "2015-12-15"
																},
																{
																	"key": "given",
																	"value": "Fuzzy"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:10:09 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "548"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - 'test' in field '_fuzzy-match'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Mismatching Date of Death reduces match score against same search without Date of Death",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let initialScore = pm.variables.get(\"initialScore\");",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(initialScore).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&death-date=2020-02-01&family=length&birthdate=2020-02-11&given=Selena",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "death-date",
															"value": "2020-02-01"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "given",
															"value": "Selena"
														}
													]
												},
												"description": "Validate that a fuzzy-search using a mismatching date of death reduces the match score against the same search without a date of death"
											},
											"response": []
										},
										{
											"name": "Using wildcard characters for a fuzzy search returns FUZZY_CRITERIA_NOT_MET",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThat.statusCodeIs(400)",
															"error.assertCodeIs(\"FUZZY_CRITERIA_NOT_MET\");",
															"error.assertDisplayIs(\"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\");",
															"error.assertSeverityIs(\"error\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Ja*&birthdate=2000-01-01&given=David&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Ja*"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Validates wildcards are not allowed when performing a fuzzy-search"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles family name homophone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns 3 patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.eql(3);",
															"});",
															"",
															"pm.test(\"Returns both patient Steven and Stephen\", () => {",
															"    let names = getFamilyNameOfAllPatients();",
															"    pm.expect(names).to.contain(\"Steven\");",
															"    pm.expect(names).to.contain(\"Stephen\");",
															"    ",
															"});",
															"",
															"",
															"",
															"// Retrieves the family name of all patients",
															"function getFamilyNameOfAllPatients() {",
															"    var names = [];",
															"",
															"    for(i = 0; i < response.entry.length; i++) {",
															"        names.push(response.entry[i].resource.name[0].family);",
															"    }",
															"",
															"    return names;",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "The search will perform phonetic matching on names using soundex, transpose names, and score the results. If the fields death-date or general-practitioner are provided they will be ignored in this search. This search is performed using a combination of parameters. If an invalid combination is supplied _INVALID_COMBINATION_ will be returned.\n\n- Matching common homophones, such as ‘Smith’ and ‘Smythe’\n- Checking for transposed names, such as ‘Adam Thomas’ and ‘Thomas Adam’\n- Phonetic matching using soundex\n\n",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "result scoring",
									"item": [
										{
											"name": "Search matching criteria exactly returns Patient with score = 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"let response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns 1 patient\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
															"});",
															"",
															"pm.test(\"Returns patient with Nhs Number 5900016528\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900016528');",
															"})",
															"",
															"pm.test(\"Returns score which is a number\", () => {",
															"    pm.expect(response.entry[0].search.score).to.be.a('number');",
															"});",
															"",
															"pm.test(\"Returns patient with score = 1\", () => {",
															"    pm.expect(response.entry[0].search.score).to.equal(1);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Toe&given=Mary&gender=male&birthdate=2001-10-10",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Toe"
														},
														{
															"key": "given",
															"value": "Mary"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2001-10-10"
														}
													]
												},
												"description": "Validate search which matches criteria exactly returns Patient with score of 1"
											},
											"response": []
										},
										{
											"name": "Simple Patient retrieval does not return a matched score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns patient without a scoring\", () =>{",
															"    pm.expect(response).to.not.have.property('search');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient/5900016528",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016528"
													]
												},
												"description": "Validate a patient retrieve does not return a matched score"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score between 0 and 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns patients each with a score between 0 and 1\", () =>{",
															"    let scores = patient().getScores();",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.at.least(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "For a wildcard based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Matching score increases when being more specific with Search query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"var response = pm.response.json();",
															"let globalNhsNumber = response.entry[0].resource.id;",
															"let globalScore = response.entry[0].search.score;",
															"let highestScore = globalScore;",
															"",
															"let params = [",
															"    { parameter: \"Post Code\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16 3*'},",
															"    { parameter: \"Family Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16*'},",
															"    { parameter: \"Given Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&given=Selena'},",
															"    { parameter: \"PostCode, Family and Given name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3*&given=Selena'}",
															"]",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            'NHSD-ASID': pm.environment.get(\"from_asid\"),",
															"            'NHSD-Session-URID': pm.environment.get(\"role_id\"),",
															"            'NHSD-Identity-UUID': pm.environment.get(\"user_id\")",
															"        }",
															"    }, function (err, res) {",
															"        let newScore = res.json().entry[0].search.score;",
															"        ",
															"        pm.test(\"Matching score increases when being more specific with \" + p.parameter + \" query parameter(s)\", () => {",
															"            console.log(\"Response for \" + p.parameter + \": \" + JSON.stringify(res.json()));",
															"            pm.expect(globalNhsNumber).to.be.equal(res.json().entry[0].resource.id, 'not the same patient as nhs numbers are different');",
															"            pm.expect(globalScore).to.be.below(newScore);",
															"        });",
															"        ",
															"        if(p.parameter != 'PostCode, Family and Given name') {",
															"            highestScore = newScore > highestScore ? newScore : highestScore;",
															"        } else {",
															"            pm.test(\"Matching score is at it's highest when being more specific with multiple query parameters (PostCode, Family and Given name)\", () => {",
															"                pm.expect(newScore).to.be.above(highestScore);",
															"            })",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														}
													]
												},
												"description": "Validates that the returned patients score increases when being more specific with the following search query parameters\n- Post Code\n- Family Name\n- Given Name\n- Multiple (Post Code, Family name and Given name)"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner increases match score against the same search without General Practitioner",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691184087\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691184087');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.environment.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};",
															"",
															"pm.environment.unset(\"initialScore\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.environment.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=le*&address-postcode=DN16*&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching general-practitioner increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death increases match score against the same search without Date of Death",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching death-date increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has remained at 1\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber, \"invalid patient data\");",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.expect(initialScore).to.equal(1, \"invalid patient data\")",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN16 3BB"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct death-date does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183986\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183986');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															"const nhsNumber = '9691183986';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "88888"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN18 5DG"
														},
														{
															"key": "_fuzzy-match",
															"value": "true",
															"disabled": true
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct general-practitioner does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Fuzzy search returns multiple patients each with a matched score between 0 and 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"let scores = patient().getScores();",
															"let numberOfPatients = patient().getTotalNumberOfPatients();",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(numberOfPatients).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Each patient has a score\", () =>{",
															"    pm.expect(numberOfPatients).to.equal(scores.length)",
															"});",
															"",
															"pm.test(\"Each score is a number\", () => {",
															"   scores.forEach(score => {",
															"       pm.expect(score).to.be.a('number');",
															"   }) ",
															"});",
															"",
															"pm.test(\"Each score is between 0 and 1\", () => {",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.above(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For a fuzzy-search based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score sorted by score best-first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fffa160e-e723-4537-8282-3831893f5852",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "93e28be6-475d-48b0-891e-fb16474ff575",
														"exec": [
															"var chai = require(\"chai\");",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.be.above(1);",
															"});",
															"",
															"pm.test(\"Returns result scoring sorted best-first\", () => {",
															"    let scores = patientUtil.getScores();",
															"    ",
															"    for (i = 1; i < scores.length; i++) {",
															"        let previous = parseFloat(scores[i-1]);",
															"        let current = parseFloat(scores[i]);",
															"        pm.expect(current).to.be.at.most(previous);        ",
															"      }",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For alphanumeric searching, every result includes a score from 0 to 1. \n\nThis test is to validate that\n- Results are sorted best-first i.e. 1 to 0"
											},
											"response": []
										}
									],
									"description": "Every matched patient in the results list includes a score to indicate how closely the patient matched the search parameters. A score of 1.0 indicates an exact match. A score of less than 1.0 indicates a partial match. The result list is sorted in descending score order - best match first.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "other tests",
									"item": [
										{
											"name": "Unrecognised search query parameter returns EXTRA_VALUE error",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ae75faaa-4f73-4912-b1a8-f673aad43a4c",
														"exec": [
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"eval(pm.globals.get(\"errorMessage\"));",
															"const query = '/Patient?gender=male&birthdate=1925-02-11&family=smith&address-postcode=DN153PP&given=john&death-date=2020-02-11&general-practitioner=V0007'",
															"",
															"let params = [",
															"    { parameter: \"family\", queryParam: 'faamily' },",
															"    { parameter: \"given\", queryParam: 'giveeen' },",
															"    { parameter: \"gender\", queryParam: 'gendr' },",
															"    { parameter: \"birthdate\", queryParam: 'birthdat' },",
															"    { parameter: \"death-date\", queryParam: 'deathdate' },",
															"    { parameter: \"address-postcode\", queryParam: 'address-PostCod' },",
															"    { parameter: \"general-practitioner\", queryParam: 'general-practiner' },            ",
															"]",
															"",
															"params.forEach(p => {",
															"    let query = getQuery(p.parameter, p.queryParam);",
															"    console.log(\"Request url: \" + query);",
															"",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"        }",
															"    }, function (err, res) {",
															"        let response = res.json();",
															"        console.log(\"Response: \" + response);",
															"        ",
															"        pm.test('Returns valid error response when misspelling parameter ' + p.parameter, () => {",
															"            pm.expect(response.issue[0].details.coding[0].display).to.equal(getExpectedErrorMessage(p.queryParam));",
															"            pm.expect(response.issue[0].details.coding[0].code).to.equal('EXTRA_VALUE');",
															"            pm.expect(response.issue[0].severity).to.equal('error');",
															"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
															"            ",
															"        })",
															"    })",
															"});",
															"",
															"",
															"function getExpectedErrorMessage(param) {",
															"    return 'Extra value - Additional properties are not allowed (\\'' + param + '\\' was unexpected)';",
															"}",
															"",
															"function getQuery(parameter, replaceWith) {",
															"    console.log('Replacing ' + parameter + ' with ' + replaceWith);",
															"    return query.replace(parameter, replaceWith);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=length",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														}
													]
												},
												"description": "Passing in unrecognised search query parameters returns an _EXTRA-VALUE_ error message which highlights which values were unrecognized"
											},
											"response": [
												{
													"name": "EXTRA_VALUE error response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_max-resultsA=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-matchB=false&_fuzzy-matchC=true",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-resultsA",
																	"value": "50"
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																},
																{
																	"key": "_exact-matchB",
																	"value": "false"
																},
																{
																	"key": "_fuzzy-matchC",
																	"value": "true"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 13:31:38 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "625"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('_exact-matchB', '_fuzzy-matchC', '_max-resultsA' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												},
												{
													"name": "Unrecognised search query parameter returns EXTRA_VALUE error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-match=false&_fuzzy-match=true&invalidHeader=true&anotherInvalidHeader=false",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50"
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																},
																{
																	"key": "_exact-match",
																	"value": "false"
																},
																{
																	"key": "_fuzzy-match",
																	"value": "true"
																},
																{
																	"key": "invalidHeader",
																	"value": "true"
																},
																{
																	"key": "anotherInvalidHeader",
																	"value": "false"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 15:37:53 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "615"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Multiple Wildcards permitted - family",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "general-practitioner",
															"value": "Y0001",
															"disabled": true
														}
													]
												},
												"description": "Multiple wildcards are permitted in family name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in given name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in postCode"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - family, given & postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "422c870a-83c0-4429-af6b-8146a086a5b2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b3213c-4712-4604-bbf8-8d3cb038e756",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in family, given & postCode"
											},
											"response": []
										},
										{
											"name": "Search query containing special characters returns valid error messages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
														"exec": [
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"",
															"",
															"pm.variables.get('testData').forEach(scenario => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + scenario.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            'Authorization': 'Bearer ' + pm.globals.get(\"token\")",
															"        }",
															"    }, function (err, response) {",
															"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
															"            pm.expect(response.code).to.equal(400);",
															"        });        ",
															"",
															"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
															"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.errorMessage.code, 'invalid code');",
															"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.errorMessage.display, 'invalid display');",
															"            pm.expect(response.json().issue[0].severity).to.eql(\"error\", 'invalid severity');",
															"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
														"exec": [
															"let scenario1 = { code: \"INVALID_SEARCH_DATA\", display: \"Invalid search data provided - name.family\" };",
															"let scenario2 = { code: \"INVALID_VALUE\", display: \"Invalid value - 'male$' in field 'gender'\" };",
															"let scenario3 = { code: \"EXTRA_VALUE\", display: \"Extra value - Additional properties are not allowed ('somethingnew' was unexpected)\" };",
															"",
															"pm.variables.set('testData', data = [",
															"    { name: \"Special characters in query parameter values such as family\", ",
															"      errorMessage: scenario1, ",
															"      query: '/Patient?_fuzzy-match=true&family=%$£James&birthdate=2000-01-01&given=David&gender=male'},",
															"      ",
															"    { name: \"Special characters in option based values such as gender\", ",
															"      errorMessage: scenario2, ",
															"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$'},",
															"      ",
															"    { name: \"Special characters in ‘new unsupported fields’\", ",
															"      errorMessage: scenario3, ",
															"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&somethingnew=fda'}",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "James"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male$"
														}
													]
												},
												"description": "##### Scenarios Tested\n- Special characters in option based values such as gender\n- Special characters in query parameter values such as family\n- Special characters in ‘new unsupported fields’\n\n\n\n\n> GIVEN I have a Search query containing special characters  \nWHEN I perform a Search  \nTHEN I should get the correct FHIR based error response\n"
											},
											"response": []
										},
										{
											"name": "Search by Postcode ignores whitespacing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
														"exec": [
															"let testScenarios = pm.variables.get('testData');",
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"",
															"testScenarios.forEach(scenario => {",
															"    scenario.tests.forEach(testScript => {",
															"        console.log(\"Test Script: \" + testScript.name);",
															"        ",
															"        testScript.tests.forEach(t => {",
															"            let patientDetails;    ",
															"            let needToSetValues = true;",
															"            console.log(\"Query Type: \" + t.searchType);",
															"            ",
															"            pm.sendRequest({",
															"                url: pm.environment.get(\"environment\") + t.query,",
															"                method: 'GET',",
															"                header: {",
															"                    asidHeader,",
															"                    sessionURIDHeader,",
															"                    identityUUIDHeader",
															"                }",
															"            }, function (err, res) {            ",
															"                if (needToSetValues) {",
															"                    patientDetails = getNhsNumberAndInitialScore(res.json());                ",
															"                    needToSetValues = false;",
															"                }",
															"                pm.expect(res.code).to.equal(200, 'invalid response returned');",
															"                validateScoreRemainsTheSame(testScript.name + \" - \" + t.searchType, res.json(), patientDetails);",
															"            });",
															"        })",
															"    });",
															"});",
															"",
															"",
															"",
															"function getNhsNumberAndInitialScore(response) {",
															"    return {",
															"        nhsNumber: response.entry[0].resource.id,",
															"        score: response.entry[0].search.score",
															"    };",
															"}",
															"",
															"function validateScoreRemainsTheSame(testName, response, patientDetails) {",
															"    let newScore = response.entry[0].search.score;",
															"    pm.test(testName + ' returns patient ' + patientDetails.nhsNumber + ' with matching score of ' + newScore, () => {",
															"        pm.expect(response.entry[0].resource.id).to.equal(patientDetails.nhsNumber, \"unexpected patient record returned\");",
															"        console.log(testName + ' NHS Number ' + patientDetails.nhsNumber + ' with Score: ' + newScore);",
															"        pm.expect(patientDetails.score).to.equal(newScore);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "555cfeec-5c14-4d76-a330-a5d011ab8ee9",
														"exec": [
															"let simple = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN16 3BB' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN163BB'}",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M32 8EX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M32 8XX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let algorithmic = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=length&given=Selena&address-postcode=DN16 3BB' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&family=length&birthdate=2020-02-11&&given=Selena&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M32 8EX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M32 8XX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let alphanumeric = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3BB' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M32 8EX' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8XX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=speake*&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spaci*&gender=female&address-postcode=DN112EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"",
															"pm.variables.set('testData', testScenarios = [",
															"    { tests: simple },",
															"    { tests: alphanumeric },",
															"    { tests: algorithmic }",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}",
													"host": [
														"{{environment}}"
													]
												},
												"description": "Validates white spaces in postcodes do not affect Searching i.e. you can search for a patient with the;\n- postcode DN163BB using both DN163BB and DN16 3BB\n- postcode DN16 3BB using both DN16 3BB and DN163BB"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Alphanumeric",
									"item": [
										{
											"name": "By General Practitioner",
											"item": [
												{
													"name": "Search using invalid General Practitioner returns INVALID_VALUE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"errorMessage\"));",
																	"",
																	"assertThatUtil().statusCodeIs(400);",
																	"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
																	"errorMessage().assertDisplayIs(\"Invalid value - '.' in field 'general-practitioner'\");",
																	"errorMessage().assertSeverityIs(\"error\");",
																	"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=.",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "."
																}
															]
														},
														"description": "Validate searching for a patient using an invalid general-practitioner value such as `.` returns an INVALID_VALUE error response"
													},
													"response": []
												},
												{
													"name": "Search using  General Practitioner returns no Patient record when no match is found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns 0 patients\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&family=Practitioner&general-practitioner=Y995894&birthdate=ge2000-01-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y995894"
																},
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "birthdate",
																	"value": "ge2000-01-01"
																}
															]
														},
														"description": "Validate no patient record is returned when performing a search using criteria including general-practitioner that does not match any patient."
													},
													"response": []
												},
												{
													"name": "Search using valid General Practitioner returns Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns one patient\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
																	"})",
																	"",
																	"pm.test(\"Returns patient with NHS Number 5900014061\", () => {",
																	"    pm.expect(pm.response.json().entry[0].resource.id).to.equal('5900014061');",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=Y00002",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y00002"
																}
															]
														},
														"description": "Validate patients record is returned when searching by general-practitioner"
													},
													"response": []
												}
											],
											"description": "Patient should be searchable by GP Provider using the query parameter *general-practitioner*.\n",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Search specifying GP of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
												"exec": [
													"eval(pm.globals.get(\"patient\"));",
													"",
													"",
													"pm.test(\"Returns status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a8c311c-bd46-4c7b-b3dc-a3098486c8c4",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?gender=male&birthdate=2000-01-01&family=Ukraine',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Ukraine&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												},
												{
													"key": "_max-results",
													"value": "50",
													"disabled": true
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying GP which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32e4c0d7-5d97-43da-b210-934154a02436",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02a77542-f342-44b5-9609-c9a77ebd7cfe",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1d16a93-1692-4692-997e-c5718c7e89bd",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Ukraine&gender=male&address-postcode=B4 3PP",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "address-postcode",
													"value": "B4 3PP"
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c2feaaf3-ce38-4f1e-84f9-ab336a968a85",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&address-postcode=B4*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "address-postcode",
													"value": "B4*"
												}
											]
										},
										"description": "NHS Numbers: 5900013553, 5900005194\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including sensitive patient does not return sensitive details for sensitive patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fa4ad97-ff41-4e08-9c3d-cb842614c3c5",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 2 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(2);",
													"})",
													"",
													"pm.test(\"Returns sensitive patient\", () => {",
													"    pm.expect(response.entry[1].resource.id).to.equal('5900013553');",
													"});",
													"",
													"pm.test(\"Sensitive patients address is not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.address).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients telecome details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.telecom).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients GP details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.generalPractitioner).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the following sensitive details are not returned for the sensitive patient (gp, death-notification extension, address and telecom)"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including invalid patient does not return invalid patients record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fa4ad97-ff41-4e08-9c3d-cb842614c3c5",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900006107')).to.be.false;",
													"});",
													"",
													"pm.test(\"Does return non-invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900003876')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "560ca350-73e4-45a8-a92f-20114ad4154e",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=ge2000-01-01&family=invalidated",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "invalidated"
												}
											]
										},
										"description": "Invalidated NHS Patient number : 5900006107\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients record is not returned"
									},
									"response": []
								},
								{
									"name": "Search matching sensitive patient returns security object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fa4ad97-ff41-4e08-9c3d-cb842614c3c5",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Returns Sensitive patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900004430')).to.be.true;",
													"});",
													"",
													"pm.test(\"Returns Security object\", () => {",
													"    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('R', 'invalid code');",
													"    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted', 'invalid display');",
													"    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html', 'invalid system');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "560ca350-73e4-45a8-a92f-20114ad4154e",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=2001-02-01&family=sensitive",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2001-02-01"
												},
												{
													"key": "family",
													"value": "sensitive"
												}
											]
										},
										"description": "> GIVEN I perform a Search\nAND that matches a Sensitive patient\nWHEN I get the response  \nTHEN the Patients record includes the meta.security array  \nAND the array includes the **R** *restricted level*"
									},
									"response": []
								},
								{
									"name": "Search matching invalid patient only, results in patients data not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02a77542-f342-44b5-9609-c9a77ebd7cfe",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1d16a93-1692-4692-997e-c5718c7e89bd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Invalidated&gender=female&given=Patient",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Invalidated"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "given",
													"value": "Patient"
												}
											]
										},
										"description": "**NHS Number: 5900006107**\n\n> GIVEN I perform a Search  \nAND that matches one patient\nAND that patient is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients details are not returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Retrieve sensitive patient marked as invalid returns INVALIDATED_NHS_NUMBER error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThatUtil().statusCodeIs(404);",
													"errorMessage().assertCodeIs(\"INVALIDATED_NHS_NUMBER\");",
													"errorMessage().assertDisplayIs(\"NHS Number as been invalidated\");",
													"errorMessage().assertSeverityIs(\"error\");",
													"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/5900006107",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												"5900006107"
											]
										},
										"description": "> GIVEN I perform a Retrieve on a Sensitive patient marked as invalid\nWHEN I get the response  \nTHEN the INVALIDATED_NHS_NUMBER error message is returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Retrieve Patient - Error Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
												"exec": [
													"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
													"\r",
													"let scenario = pm.variables.get('scenario');\r",
													"let asidHeader = pm.variables.get(\"asidHeader\");\r",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
													"\r",
													"/*for each scenario dataSet loop the Retrieve Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
													"\r",
													"  scenario.forEach(s => {\r",
													"    console.log(\"scenario under test is: \" + s.desc);\r",
													"\r",
													"   pm.sendRequest({\r",
													"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id,\r",
													"        method: 'GET',\r",
													"        header: { \r",
													"            asidHeader, \r",
													"            sessionURIDHeader, \r",
													"            identityUUIDHeader, \r",
													"            'Authorization': 'Bearer ' + pm.globals.get(\"token\") \r",
													"            \r",
													"        }\r",
													"        \r",
													"    }, function (err, res) {\r",
													"        let response = res.json();\r",
													"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
													"            pm.expect(res.code).to.equal(s.responseStatus);\r",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
													"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
													"            \r",
													"        })\r",
													"    })\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
												"exec": [
													"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ \r",
													"  \r",
													"   let scenario = [\r",
													"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\", \r",
													"        nhs_id: \"9000000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_NHS_NUMBER\", \r",
													"        responseDisplay: \"NHS Number Invalid\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - too short\", \r",
													"        nhs_id: \"900000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_NHS_NUMBER\", \r",
													"        responseDisplay: \"NHS Number Invalid\"},\r",
													"        \r",
													"       {desc: \"PATIENT_NOT_FOUND - NHS Number Does Not Exist\", \r",
													"        nhs_id: \"9111231130\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"not-found\", \r",
													"        responseSeverity: \"information\", \r",
													"        responseCode: \"PATIENT_NOT_FOUND\", \r",
													"        responseDisplay: \"No patient found\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - not passed in\", \r",
													"        nhs_id: \"\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"RETRIEVAL_UNSUPPORTED\", \r",
													"        nhs_id: \"9111231130/nationality\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"RETRIEVAL_UNSUPPORTED\", \r",
													"        responseDisplay: \"Retrieval unsupported for resource - 'nationality'\"},\r",
													"        \r",
													"       {desc: \"INVALIDATED_NHS_NUMBER\", nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_NHS_NUMBER\", \r",
													"        responseDisplay: \"NHS Number as been invalidated\"}\r",
													"       ]\r",
													"       \r",
													"    pm.variables.set('scenario', scenario); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/:nhs_id",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												":nhs_id"
											],
											"variable": [
												{
													"key": "nhs_id",
													"value": "{{nshID}}"
												}
											]
										},
										"description": "Invalid Retrieve Patient calls shall result in a valid Error Response"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Patient - Happy path 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
											"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
											"pm.variables.set(\"family\", \"Mapping\");",
											"pm.variables.set(\"prefix\", \"Dame\");",
											"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2010-01-01\");",
											"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"telecomValue\", \"07900000000\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", false);",
											"pm.variables.set(\"patientId\", \"5900009068\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"alias\");",
											"pm.variables.set(\"family\", \"Alias\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"1990-10-10\");",
											"pm.variables.set(\"prefix\", \"Dr\");",
											"pm.variables.set(\"addressType\", \"work\");",
											"pm.variables.set(\"telecomType\", \"fax\");",
											"pm.variables.set(\"telecomUse\", \"work\");",
											"pm.variables.set(\"given\", [\"John\"]);",
											"pm.variables.set(\"suffix\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"130 Greenhouse Lane\",\"Work Road\",\"Roundhay\",\"Leeds\",\"WEST YORKSHIRE\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2019-01-10\");",
											"pm.variables.set(\"addressPeriodEnd\", \"2020-11-10\");",
											"pm.variables.set(\"postalCode\", \"LS18 4AD\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"metaVersionId\", \"21\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"2342424234\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"language\", \"en\");",
											"pm.variables.set(\"languageDisplay\", \"English\");",
											"pm.variables.set(\"interpreter\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"",
											"",
											"pm.variables.set(\"nameType\", \"preferred\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"person\"]);",
											"pm.variables.set(\"family\", \"Unknown\");",
											"pm.variables.set(\"prefix\", \"Lady\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 westwood\",\"\",\"bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-01-02\");",
											"pm.variables.set(\"postalCode\", undefined);",
											"pm.variables.set(\"addressType\", \"correspondence\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"telecomType\", \"textphone\");",
											"pm.variables.set(\"telecomUse\", \"pager\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", true);",
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"previous\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"someone\"]);",
											"pm.variables.set(\"family\", \"previous\");",
											"pm.variables.set(\"prefix\", \"Lord\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2008-01-01\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"1 Temporary Ave\",\"Temporary Place\",\"Temporary Town\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
											"pm.variables.set(\"postalCode\", \"BD2 7NT\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
											"pm.variables.set(\"telecomType\", \"email\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"patientId\", \"5900019241\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"family\", \"temporary\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2004-03-01\");",
											"pm.variables.set(\"prefix\", \"Miss\");",
											"pm.variables.set(\"nameType\", \"birth\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"mobile\");",
											"pm.variables.set(\"given\", [\"ned\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 Westwood\",\"Eccleshill\",\"Bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09000000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mr\");",
											"pm.variables.set(\"nameType\", \"bachelor\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"temporary\");",
											"pm.variables.set(\"family\", \"Mister\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2009-01-01\");",
											"pm.variables.set(\"given\", [\"Any\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 9 - Superceded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6774f4-6032-467f-84b4-1043f7c14a69",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1789ffbf-aaf8-4c8e-9d56-806fd5b9d829",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"supercededPatientId\", \"5900006360\");",
											"",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"Retained\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2006-04-01\");",
											"pm.variables.set(\"given\", [\"Jon\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"15 Retained Road\",\"\",\"Retained\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LK\");",
											"pm.variables.set(\"patientId\", \"5900011143\");",
											"pm.variables.set(\"resourceType\", \"Patient\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{supercededPatientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* If the Patient record is marked as Superceded, the response shall return the Retained record for the Patient\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* nameFamily\r\n* nameGiven\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* resourseType\r\n* patientId\r\n* identifierExtention"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "309bd3d4-7bfe-413f-99c6-dc84086bdd05",
										"exec": [
											"var response = pm.response.json();",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"pm.variables.set(\"s-flagged\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a614f542-0c5f-42d0-8190-abce4b8b506a",
										"exec": [
											"pm.variables.set(\"s-flagged\", true);",
											"",
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"sensitive\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"given\", [\"\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"patientId\", \"5900004430\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"deceasedDateTime\", \"2009-03-01\");",
											"pm.variables.set(\"securityCode\", \"R\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationStatus.display\", \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "200000000610"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "1234567890"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "1234567890"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900004430",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900004430"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Death Notification",
							"item": [
								{
									"name": "Informal Death Notification Update permitted",
									"item": [
										{
											"name": "Retrieve Patient - get current metaData Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															"var response = pm.response.json();",
															"",
															"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
															"console.log(pm.collectionVariables.get(\"metaVersion\"));",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"200\"));",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900007782"
														}
													]
												},
												"description": "Retrieved patient with an informal Death Notification has the correct extension with a code 1 and the correct display."
											},
											"response": []
										},
										{
											"name": "Patch Patient - Add Informal Death Notification Permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															"var response = pm.response.json();",
															"",
															"var valueDateTime = (response.extension[0].extension[1].valueDateTime);",
															"var responseValueDateTime = valueDateTime.substring(0,16);",
															"pm.variables.set(\"responseValueDateTime\", responseValueDateTime);",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"200\"));",
															"    });",
															"    ",
															"    //Check that deceasedDateTime has been populated correctly",
															"  pm.test(\"Response deceasedDateTime has been populated correctly\", function () {",
															"        pm.expect(response.deceasedDateTime).to.eql(\"2020-02-18T17:06:00+00:00\");",
															"  });",
															"     ",
															"//Check that extension[0].url has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
															"  });",
															"",
															"//Check that extension.url has been populated correctly",
															"  pm.test(\"Response extension.url has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.code has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.code has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");",
															"  });",
															"      ",
															"//Check that extension.valueCodeableConcept.coding.disply has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.system has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.version has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
															"  });",
															"  ",
															"  //Check that extension[1].url has been populated correctly",
															"  pm.test(\"Response extension.url has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
															"  });",
															"",
															"    //Check that extension[0].valueDateTime has been populated correctly",
															"  pm.test(\"Response extension[0].valueDateTime has been populated correctly\", function () {",
															"        pm.expect(pm.variables.get(\"todaysDate\")).to.eql(pm.variables.get(\"responseValueDateTime\"));",
															"  });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
															"validated against the valueDateTime\r",
															"========================================================================================================================*/\r",
															"\r",
															"//create a date to be used in the valueDateTime field of the request  \r",
															"var date = new Date().toISOString().substr(0, 19);\r",
															"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));\r",
															"\r",
															"\r",
															"//create a date variable truncated so that it can be used to check against the returned valueDateTime in the Patch response\r",
															"var todayDate = date.substring(0,16);\r",
															"pm.variables.set(\"todaysDate\", todayDate);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"{{metaVersion}}\""
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": { \r\n            \t\"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"1\",\r\n                                \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"{{patch_valueDateTime}}\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900007782"
														}
													]
												},
												"description": "Updating a patient with an Informal Death Notification will succeed."
											},
											"response": []
										}
									],
									"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible).\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26a78478-336a-41bd-89b5-e3cd96ad5a1e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f6a370b5-d7bc-425c-bb7a-32f07ce19929",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update Patient with Death Notification Removed flag",
									"item": [
										{
											"name": "Retrieve Patient - get current metaData Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															"var response = pm.response.json();",
															"",
															"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
															"console.log(pm.collectionVariables.get(\"metaVersion\"));",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"200\"));",
															"    });",
															"    ",
															"    //Check that deceasedDateTime has been populated correctly",
															"  pm.test(\"Response deceasedDateTime has been populated correctly\", function () {",
															"        pm.expect(response.deceasedDateTime).to.eql(\"2010-01-01T00:00:00+00:00\");",
															"  });",
															"     ",
															"//Check that extension[0].url has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
															"  });",
															"",
															"//Check that extension.url has been populated correctly",
															"  pm.test(\"Response extension.url has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.code has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.code has been populated correctly - 1 indicates an Informal notification\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"U\");",
															"  });",
															"      ",
															"//Check that extension.valueCodeableConcept.coding.disply has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Removed\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.system has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
															"  });",
															"  ",
															"//Check that extension.valueCodeableConcept.coding.version has been populated correctly",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
															"  });",
															"  ",
															"  //Check that extension[1].url has been populated correctly",
															"  pm.test(\"Response extension.url has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
															"  });",
															"",
															"    //Check that extension[0].valueDateTime has been populated correctly",
															"  pm.test(\"Response extension.url has been populated correctly\", function () {",
															"        pm.expect(response.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-19T12:51:25+00:00\");",
															"  });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900003108"
														}
													]
												},
												"description": "Retrieved patient with a Removed Death Notification has the correct extension with a code U and the correct display."
											},
											"response": []
										},
										{
											"name": "Search Patient - Removed Notification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
														"exec": [
															" var response = pm.response.json();\r",
															"\r",
															"//Check that deceasedDateTime has been populated correctly\r",
															"  pm.test(\"Response deceasedDateTime has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(\"2010-01-01T00:00:00+00:00\");\r",
															"  });\r",
															"     \r",
															"//Check that extension[0].url has been populated correctly\r",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");\r",
															"  });\r",
															"\r",
															"//Check that extension.url has been populated correctly\r",
															"  pm.test(\"Response extension[0].extension[0].url has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
															"  });\r",
															"  \r",
															"//Check that extension.valueCodeableConcept.coding.code has been populated correctly\r",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.code has been populated correctly - 1 indicates an Informal notification\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"U\");\r",
															"  });\r",
															"      \r",
															"//Check that extension.valueCodeableConcept.coding.disply has been populated correctly\r",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Removed\");\r",
															"  });\r",
															"  \r",
															"//Check that extension.valueCodeableConcept.coding.system has been populated correctly\r",
															"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");\r",
															"  });\r",
															"  \r",
															"//Check that extension.valueCodeableConcept.coding.version has been populated correctly\r",
															"  pm.test(\"Response extension[0].extension[0].valueCodeableConcept.coding[0].version has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
															"  });\r",
															"  \r",
															"  //Check that extension[1].url has been populated correctly\r",
															"  pm.test(\"Response extension[0].extension[1].url has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
															"  });\r",
															"\r",
															"    //Check that extension[0].valueDateTime has been populated correctly\r",
															"  pm.test(\"Response extension[0].extension[1].valueDateTime has been populated correctly\", function () {\r",
															"        pm.expect(response.entry[0].resource.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-19T12:51:25+00:00\");\r",
															"  });\r",
															"  \r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Removed&given=deathNotification&gender=female&birthdate=2000-01-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Removed"
														},
														{
															"key": "given",
															"value": "deathNotification"
														},
														{
															"key": "gender",
															"value": "female"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														}
													]
												},
												"description": "Search patient with a Removed Death Notification has the correct extension with a code U and the correct display."
											},
											"response": []
										},
										{
											"name": "Patch Patient - Patient has Removed Notification - Update (remove) Formal not permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															" var response = pm.response.json();",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"401\"));",
															"    });",
															"    ",
															"    // Check that the response Issue Code has been populated correctly  ",
															"    pm.test(\"Response issue code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
															"    });",
															"    ",
															"    // Check that the response Error Severity has been populated correctly  ",
															"    pm.test(\"Response error severity has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Display Message has been populated correctly",
															"    pm.test(\"Response display message has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to make requested update for Death Notification\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Error Code has been populated correctly ",
															"    pm.test(\"Response error code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_DEATH_NOTIFICATION\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response System URL has been populated correctly ",
															"    pm.test(\"Response system url has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"    });",
															"\t",
															"\t    // Check that the response coding system version has been populated correctly ",
															"    pm.test(\"Response coding system version has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
															"validated against the valueDateTime\r",
															"========================================================================================================================*/\r",
															"\r",
															"//create a date to be used in the valueDateTime field of the request  \r",
															"var date = new Date().toISOString().substr(0, 19);\r",
															"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));\r",
															"\r",
															"\r",
															"//create a date variable truncated so that it can be used to checked against the returned valueDateTime in the Patch response\r",
															"var todayDate = date.substring(0,16);\r",
															"pm.variables.set(\"todaysDate\", todayDate);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"{{metaVersion}}\""
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "",
														"type": "text",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"add\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": {\r\n            \"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"2\",\r\n                                \"display\": \"Formal - death notice received from Registrar of Deaths\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"2020-02-17T13:32:49+00:00\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900003108"
														}
													]
												},
												"description": "Updating a patient with a Removed Death Notification will fail as this is a legacy code (ensuring Operation Outcome is sensible)."
											},
											"response": []
										},
										{
											"name": "Patch Patient - Patient has Removed Notification - Update Formal (ADD) not permitted Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															" var response = pm.response.json();",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"401\"));",
															"    });",
															"    ",
															"    // Check that the response Issue Code has been populated correctly  ",
															"    pm.test(\"Response issue code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
															"    });",
															"    ",
															"    // Check that the response Error Severity has been populated correctly  ",
															"    pm.test(\"Response error severity has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Display Message has been populated correctly",
															"    pm.test(\"Response display message has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to make requested update for Death Notification\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Error Code has been populated correctly ",
															"    pm.test(\"Response error code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_DEATH_NOTIFICATION\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response System URL has been populated correctly ",
															"    pm.test(\"Response system url has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"    });",
															"\t",
															"\t    // Check that the response coding system version has been populated correctly ",
															"    pm.test(\"Response coding system version has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
															"validated against the valueDateTime\r",
															"========================================================================================================================*/\r",
															"\r",
															"//create a date to be used in the valueDateTime field of the request  \r",
															"var date = new Date().toISOString().substr(0, 19);\r",
															"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));\r",
															"\r",
															"\r",
															"//create a date variable truncated so that it can be used to checked against the returned valueDateTime in the Patch response\r",
															"var todayDate = date.substring(0,16);\r",
															"pm.variables.set(\"todaysDate\", todayDate);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"{{metaVersion}}\""
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "",
														"type": "text",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"add\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": {\r\n            \"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"2\",\r\n                                \"display\": \"Formal - death notice received from Registrar of Deaths\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"2020-02-17T13:32:49+00:00\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900003108"
														}
													]
												},
												"description": "Updating a patient with a Removed Death Notification will fail as this is a legacy code (ensuring Operation Outcome is sensible)."
											},
											"response": []
										},
										{
											"name": "Patch Patient - Patient has Removed Notification - Update Removed not Permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															" var response = pm.response.json();",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"400\"));",
															"    });",
															"    ",
															"    // Check that the response Issue Code has been populated correctly  ",
															"    pm.test(\"Response issue code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].code).to.eql(\"value\");",
															"    });",
															"    ",
															"    // Check that the response Error Severity has been populated correctly  ",
															"    pm.test(\"Response error severity has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Display Message has been populated correctly",
															"    pm.test(\"Response display message has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Schema valid but unsupported value - U in field 'code'\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Error Code has been populated correctly ",
															"    pm.test(\"Response error code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"UNSUPPORTED_VALUE\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response System URL has been populated correctly ",
															"    pm.test(\"Response system url has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"    });",
															"\t",
															"\t    // Check that the response coding system version has been populated correctly ",
															"    pm.test(\"Response coding system version has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
															"validated against the valueDateTime\r",
															"========================================================================================================================*/\r",
															"\r",
															"//create a date to be used in the valueDateTime field of the request  \r",
															"var date = new Date().toISOString().substr(0, 19);\r",
															"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));\r",
															"\r",
															"\r",
															"//create a date variable truncated so that it can be used to checked against the returned valueDateTime in the Patch response\r",
															"var todayDate = date.substring(0,16);\r",
															"pm.variables.set(\"todaysDate\", todayDate);\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"{{metaVersion}}\""
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "",
														"type": "text",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": {\r\n            \"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"U\",\r\n\t\t\t\t\t\t\t    \"display\": \"Removed\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"2020-02-17T13:32:49+00:00\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900003108"
														}
													]
												},
												"description": "Updating a patient with a Removed Death Notification will fail as this is a legacy code (ensuring Operation Outcome is sensible)."
											},
											"response": []
										}
									],
									"description": "Updating a patient with a Removed Death Notification will fail as this is a legacy code (ensuring Operation Outcome is sensible).\r\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df5c05dd-f973-47d7-b528-ef9ab75e47bb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "224b9474-a3a3-44c3-845c-da4313f73921",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Remove Death Notification Not Permitted",
									"item": [
										{
											"name": "Retrieve Patient - get current metaData Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															"var response = pm.response.json();",
															"",
															"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
															"console.log(pm.collectionVariables.get(\"metaVersion\"));",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"200\"));",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900007782"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Patch Patient - Remove Death Notification Not Permitted",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
														"exec": [
															" var response = pm.response.json();",
															"",
															"     // Check that the response status has been populated correctly ",
															"    pm.test(\"Response Status code is correct\", function () {",
															"        pm.response.to.have.status(parseInt(\"401\"));",
															"    });",
															"    ",
															"    // Check that the response Issue Code has been populated correctly  ",
															"    pm.test(\"Response issue code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
															"    });",
															"    ",
															"    // Check that the response Error Severity has been populated correctly  ",
															"    pm.test(\"Response error severity has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Display Message has been populated correctly",
															"    pm.test(\"Response display message has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to remove Date of Death\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response Error Code has been populated correctly ",
															"    pm.test(\"Response error code has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_REMOVE_DATE_OF_DEATH\");",
															"    });",
															"    ",
															"    ",
															"    // Check that the response System URL has been populated correctly ",
															"    pm.test(\"Response system url has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															"    });",
															"\t",
															"\t    // Check that the response coding system version has been populated correctly ",
															"    pm.test(\"Response coding system version has been populated correctly\", function () {",
															"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
														"exec": [
															"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
															"validated against the valueDateTime\r",
															"========================================================================================================================*/\r",
															"\r",
															"//create a date to be used in the valueDateTime field of the request  \r",
															"var date = new Date().toISOString().substr(0, 19);\r",
															"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "If-Match",
														"type": "text",
														"value": "W/\"{{metaVersion}}\""
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json-patch+json"
													},
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"remove\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": { \r\n            \t\"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"1\",\r\n                                \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"{{patch_valueDateTime}}\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{environment}}/Patient/:nhs_id",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														":nhs_id"
													],
													"variable": [
														{
															"key": "nhs_id",
															"value": "5900007782"
														}
													]
												},
												"description": "Removal of a Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible)."
											},
											"response": []
										}
									],
									"description": "Removal of a Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible).",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12fd70a7-87d8-4929-953f-4e6d9443f6b1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f2c245a-cca4-4094-8ed4-0c4ceb427247",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update Patient with Formal Death Notification Not permitted",
									"item": [
										{
											"name": "Patient has an Informal Notification and trying to update with a Formal Notification",
											"item": [
												{
													"name": "Retrieve Patient - Has an Informal Death Notification - get current metaData Version",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
																	"console.log(pm.collectionVariables.get(\"metaVersion\"));",
																	"",
																	"// Check that the response status has been populated correctly ",
																	"  pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"200\"));",
																	"  });",
																	"    ",
																	"//Check that deceasedDateTime has been populated correctly",
																	"  pm.test(\"Response deceasedDateTime has been populated correctly\", function () {",
																	"        pm.expect(response.deceasedDateTime).to.eql(\"2020-02-14T00:00:00+00:00\");",
																	"  });",
																	"     ",
																	"//Check that extension[0].url has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
																	"  });",
																	"",
																	"//Check that extension.url has been populated correctly",
																	"  pm.test(\"Response extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.code has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.code has been populated correctly - 1 indicates an Informal notification\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");",
																	"  });",
																	"      ",
																	"//Check that extension.valueCodeableConcept.coding.disply has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.system has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.version has been populated correctly",
																	"  pm.test(\"Response extension[0].extension[0].valueCodeableConcept.coding[0].version has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
																	"  });",
																	"  ",
																	"  //Check that extension[1].url has been populated correctly",
																	"  pm.test(\"Response extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
																	"  });",
																	"",
																	"     //Check that entry[0].resource.extension[0].valueDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-20T10:04:21+00:00\");",
																	"  });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900018768"
																}
															]
														},
														"description": "Retrieved patient with an informal Death Notification has the correct extension with a code 1 and the correct display."
													},
													"response": []
												},
												{
													"name": "Search Patient - Informal Notification",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
																"exec": [
																	" var response = pm.response.json();",
																	"",
																	"//Check that deceasedDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.deceasedDateTime has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(\"2020-02-14T00:00:00+00:00\");",
																	"  });",
																	"     ",
																	"//Check that entry[0].resource.extension[0].url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
																	"  });",
																	"",
																	"//Check that entry[0].resource.extension.url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.code has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.code has been populated correctly - 1 indicates an Informal notification\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");",
																	"  });",
																	"      ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.disply has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.version has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.version has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
																	"  });",
																	"  ",
																	"  //Check that entry[0].resource.extension[1].url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
																	"  });",
																	"",
																	"    //Check that entry[0].resource.extension[0].valueDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].extension[1].valueDateTime\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-20T10:04:21+00:00\");",
																	"  });",
																	"  ",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family=Gone&given=John&gender=male&birthdate=1989-12-10",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "Gone"
																},
																{
																	"key": "given",
																	"value": "John"
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "1989-12-10"
																}
															]
														},
														"description": "Search patient with an informal Death Notification has the correct extension with a code 1 and the correct display."
													},
													"response": []
												},
												{
													"name": "Patch Patient - Patient already has Informal Notification - Add Formal Death Notification Not Permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	" var response = pm.response.json();",
																	"",
																	"     // Check that the response status has been populated correctly ",
																	"    pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"401\"));",
																	"    });",
																	"    ",
																	"    // Check that the response Issue Code has been populated correctly  ",
																	"    pm.test(\"Response issue code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
																	"    });",
																	"    ",
																	"    // Check that the response Error Severity has been populated correctly  ",
																	"    pm.test(\"Response error severity has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Display Message has been populated correctly",
																	"    pm.test(\"Response display message has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to make requested update for Death Notification\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Error Code has been populated correctly ",
																	"    pm.test(\"Response error code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_DEATH_NOTIFICATION\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response System URL has been populated correctly ",
																	"    pm.test(\"Response system url has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"    });",
																	"\t",
																	"\t    // Check that the response coding system version has been populated correctly ",
																	"    pm.test(\"Response coding system version has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
																	"validated against the valueDateTime\r",
																	"========================================================================================================================*/\r",
																	"\r",
																	"//create a date to be used in the valueDateTime field of the request  \r",
																	"var date = new Date().toISOString().substr(0, 19);\r",
																	"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "If-Match",
																"type": "text",
																"value": "W/\"{{metaVersion}}\""
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "",
																"type": "text",
																"value": ""
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"replace\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": { \r\n            \t\"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n\t\t\t\t\t\t\t\t\"code\": \"2\",\r\n                                \"display\": \"Formal - death notice received from Registrar of Deaths\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"{{patch_valueDateTime}}\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900018768"
																}
															]
														},
														"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible)."
													},
													"response": []
												}
											],
											"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible).\r\n",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "49ed89d3-f702-4893-9379-5eec5975dacf",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "94558a9f-7046-4a79-a12b-4f1df4dceed8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Patient has No Notification and trying to update with a Formal Notification",
											"item": [
												{
													"name": "Retrieve Patient - Has no Death Notification - get current metaData",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
																	"console.log(pm.collectionVariables.get(\"metaVersion\"));",
																	"",
																	"     // Check that the response status has been populated correctly ",
																	"    pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"200\"));",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900012506"
																}
															]
														},
														"description": "Retrieved patient with no Death Notification has no death notification extension."
													},
													"response": []
												},
												{
													"name": "Patch Patient - Patient has no Death Notification - Add Formal Death Notification Not Permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	" var response = pm.response.json();",
																	"",
																	"     // Check that the response status has been populated correctly ",
																	"    pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"401\"));",
																	"    });",
																	"    ",
																	"    // Check that the response Issue Code has been populated correctly  ",
																	"    pm.test(\"Response issue code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
																	"    });",
																	"    ",
																	"    // Check that the response Error Severity has been populated correctly  ",
																	"    pm.test(\"Response error severity has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Display Message has been populated correctly",
																	"    pm.test(\"Response display message has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to make requested update for Death Notification\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Error Code has been populated correctly ",
																	"    pm.test(\"Response error code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_DEATH_NOTIFICATION\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response System URL has been populated correctly ",
																	"    pm.test(\"Response system url has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"    });",
																	"\t",
																	"\t    // Check that the response coding system version has been populated correctly ",
																	"    pm.test(\"Response coding system version has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
																	"validated against the valueDateTime\r",
																	"========================================================================================================================*/\r",
																	"\r",
																	"//create a date to be used in the valueDateTime field of the request  \r",
																	"var date = new Date().toISOString().substr(0, 19);\r",
																	"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "If-Match",
																"type": "text",
																"value": "W/\"{{metaVersion}}\""
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "",
																"type": "text",
																"value": ""
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"add\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": { \r\n            \t\"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n\t\t\t\t\t\t\t\t\"code\": \"2\",\r\n                                \"display\": \"Formal - death notice received from Registrar of Deaths\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"{{patch_valueDateTime}}\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900012506"
																}
															]
														},
														"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible)."
													},
													"response": []
												}
											],
											"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible).\r\n",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aed4fe51-2648-430f-9ed1-1603ff7b74ee",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "42465519-2a21-4268-adc8-1407421de891",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Patient has Formal Notification and trying to update with an Informal Notification",
											"item": [
												{
													"name": "Retrieve Patient - Has an Formal Death Notification - get current metaData Version",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.collectionVariables.set(\"metaVersion\",response.meta.versionId);",
																	"console.log(pm.collectionVariables.get(\"metaVersion\"));",
																	"",
																	"// Check that the response status has been populated correctly ",
																	"  pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"200\"));",
																	"  });",
																	"    ",
																	"//Check that deceasedDateTime has been populated correctly",
																	"  pm.test(\"Response deceasedDateTime has been populated correctly\", function () {",
																	"        pm.expect(response.deceasedDateTime).to.eql(\"2020-01-01T00:00:00+00:00\");",
																	"  });",
																	"     ",
																	"//Check that extension[0].url has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
																	"  });",
																	"",
																	"//Check that extension.url has been populated correctly",
																	"  pm.test(\"Response extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.code has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.code has been populated correctly - 1 indicates an Informal notification\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"2\");",
																	"  });",
																	"      ",
																	"//Check that extension.valueCodeableConcept.coding.disply has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Formal - death notice received from Registrar of Deaths\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.system has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that extension.valueCodeableConcept.coding.version has been populated correctly",
																	"  pm.test(\"Response extension.valueCodeableConcept.coding.system has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
																	"  });",
																	"  ",
																	"  //Check that extension[1].url has been populated correctly",
																	"  pm.test(\"Response extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
																	"  });",
																	"",
																	"     //Check that entry[0].resource.extension[0].valueDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.url has been populated correctly\", function () {",
																	"        pm.expect(response.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-17T13:32:49+00:00\");",
																	"  });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900001210"
																}
															]
														},
														"description": "Retrieved patient with a Formal Death Notification has the correct extension with a code 2 and the correct display."
													},
													"response": []
												},
												{
													"name": "Search Patient - Formal Notification",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e57f793c-3c38-4919-be4e-2392110ef8a1",
																"exec": [
																	" var response = pm.response.json();",
																	"",
																	"//Check that deceasedDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.deceasedDateTime has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(\"2020-01-01T00:00:00+00:00\");",
																	"  });",
																	"     ",
																	"//Check that entry[0].resource.extension[0].url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].url).to.eql(\"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\");",
																	"  });",
																	"",
																	"//Check that entry[0].resource.extension.url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].extension[0].url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.code has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.code has been populated correctly - 2 indicates an Formal notification\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"2\");",
																	"  });",
																	"      ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.disply has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.display has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Formal - death notice received from Registrar of Deaths\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\");",
																	"  });",
																	"  ",
																	"//Check that entry[0].resource.extension.valueCodeableConcept.coding.version has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension.valueCodeableConcept.coding.version has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");",
																	"  });",
																	"  ",
																	"  //Check that entry[0].resource.extension[1].url has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].extension[1].url has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");",
																	"  });",
																	"",
																	"    //Check that entry[0].resource.extension[0].valueDateTime has been populated correctly",
																	"  pm.test(\"Response entry[0].resource.extension[0].valueDateTime has been populated correctly\", function () {",
																	"        pm.expect(response.entry[0].resource.extension[0].extension[1].valueDateTime).to.eql(\"2020-02-17T13:32:49+00:00\");",
																	"  });",
																	"  ",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family=Death&given=Formal&gender=male&birthdate=2000-02-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "Death"
																},
																{
																	"key": "given",
																	"value": "Formal"
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-02-01"
																}
															]
														},
														"description": "Retrieved patient with a Formal Death Notification has the correct extension with a code 2 and the correct display."
													},
													"response": []
												},
												{
													"name": "Patch Patient - Patient already has Formal Notification - Add Informal Death Notification Not Permitted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ed522c04-c945-43c2-ba6e-ba9a270f2b06",
																"exec": [
																	" var response = pm.response.json();",
																	"",
																	"     // Check that the response status has been populated correctly ",
																	"    pm.test(\"Response Status code is correct\", function () {",
																	"        pm.response.to.have.status(parseInt(\"401\"));",
																	"    });",
																	"    ",
																	"    // Check that the response Issue Code has been populated correctly  ",
																	"    pm.test(\"Response issue code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].code).to.eql(\"forbidden\");",
																	"    });",
																	"    ",
																	"    // Check that the response Error Severity has been populated correctly  ",
																	"    pm.test(\"Response error severity has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].severity).to.eql(\"error\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Display Message has been populated correctly",
																	"    pm.test(\"Response display message has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].display).to.eql(\"Not permitted to update Death Data when Death Notification Status is Formal\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response Error Code has been populated correctly ",
																	"    pm.test(\"Response error code has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].code).to.eql(\"PERMISSION_FORMAL_DEATH\");",
																	"    });",
																	"    ",
																	"    ",
																	"    // Check that the response System URL has been populated correctly ",
																	"    pm.test(\"Response system url has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"    });",
																	"\t",
																	"\t    // Check that the response coding system version has been populated correctly ",
																	"    pm.test(\"Response coding system version has been populated correctly\", function () {",
																	"        pm.expect(response.issue[0].details.coding[0].version).to.eql(\"1\");",
																	"    });"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f6a3368-60dc-4dd0-91d5-cdcd7bf0ed20",
																"exec": [
																	"/*create a Date and time variable for TODAY, so that it can be used to set the valueDateTime in the Patch Request and also \r",
																	"validated against the valueDateTime\r",
																	"========================================================================================================================*/\r",
																	"\r",
																	"//create a date to be used in the valueDateTime field of the request  \r",
																	"var date = new Date().toISOString().substr(0, 19);\r",
																	"pm.variables.set(\"patch_valueDateTime\", (date + \"+00:00\"));\r",
																	"\r",
																	"\r",
																	"//create a date variable truncated so that it can be used to check against the returned valueDateTime in the Patch response\r",
																	"var todayDate = date.substring(0,16);\r",
																	"pm.variables.set(\"todaysDate\", todayDate);\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "If-Match",
																"type": "text",
																"value": "W/\"{{metaVersion}}\""
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json-patch+json"
															},
															{
																"key": "",
																"type": "text",
																"value": ""
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"patches\": [\r\n        {\r\n            \"op\": \"add\",\r\n            \"path\": \"/extension/0\",\r\n            \"value\": { \r\n            \t\"extension\": [\r\n                {\r\n                    \"url\": \"deathNotificationStatus\",\r\n                    \"valueCodeableConcept\": {\r\n                        \"coding\": [\r\n                            {\r\n                                \"code\": \"1\",\r\n                                \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\",\r\n                                \"system\": \"https://simplifier.net/UKCore/CodeSystem-UKCore-DeathNotificationStatus\",\r\n                                \"version\": \"1.0.0\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"url\": \"systemEffectiveDate\",\r\n                    \"valueDateTime\": \"{{patch_valueDateTime}}\"\r\n                }\r\n            ],\r\n            \"url\": \"https://simplifier.net/guide/UKCoreDecember2019/ExtensionUKCore-DeathNotificationStatus\"\r\n        }\r\n        }\r\n    ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{environment}}/Patient/:nhs_id",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient",
																":nhs_id"
															],
															"variable": [
																{
																	"key": "nhs_id",
																	"value": "5900001210"
																}
															]
														},
														"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible)."
													},
													"response": []
												}
											],
											"description": "Updating a patient with a Formal Death Notification will fail as user is non-DSA/ONS/Maternity site (ensuring Operation Outcome is sensible).\r\n",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fe04aff3-adc3-4383-accd-5843c909f3a3",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "61f545aa-fd74-46d8-9e2f-2e31574e5be6",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c6ba7d4d-8d9f-4ed2-aab1-59d952f6d928",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b8892a69-fbec-4c23-bc53-cb4d33b68d6c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9a507f42-ebdc-4300-b916-8c0ab96ee000",
				"type": "text/javascript",
				"exec": [
					"// Set Headers for pm.sendRequest",
					"var Header = require('postman-collection').Header;",
					"",
					"pm.environment.set(\"asidHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-asid-header\"),",
					"    value: pm.environment.get(\"from_asid\")",
					"}));",
					"",
					"pm.environment.set(\"sessionURIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-session-urid-header\"),",
					"    value: pm.environment.get(\"role_id\")",
					"}));",
					"",
					"pm.environment.set(\"identityUUIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-identity-uuid-header\"),",
					"    value: pm.environment.get(\"user_id\")",
					"}));",
					"",
					"pm.request.headers.add({key: 'NHSD-Identity-JWT', value: pm.globals.get(\"jwt\")});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f5640239-c903-4595-bac7-e9e41a913759",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "1132a62b-03c2-4c56-bdc1-2387c6f6fd82",
			"key": "metaVersion",
			"value": "3",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}