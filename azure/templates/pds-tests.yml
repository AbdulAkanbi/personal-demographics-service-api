parameters:
  - name: test_pack_path
  - name: test_type

steps:
  - task: DownloadSecureFile@1
    displayName: 'Download internal-dev postman environment'
    name: postman_environment
    inputs:
      secureFile: 'internal-dev.postman_environment.json'

  - bash: |
      if [ -d $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests ]; then
        cp $(postman_environment.secureFilePath) $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/e2e/environments/deploy.postman-environment.json;
      fi
    displayName: 'Copy environment file to tests'

  - bash: |
      echo "##vso[task.setvariable variable=IDP_URL]https://nhsd-apim-testing-$(ENVIRONMENT).herokuapp.com"
      echo "##vso[task.setvariable variable=API_URL]https://$(ENVIRONMENT).api.service.nhs.uk/$(SERVICE_BASE_PATH)"
    displayName: Set test urls

  - bash: |
      set -euo pipefail

      if [ -d $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests ]; then
        echo "Running ${{ parameters.test_type }} tests"

        # Go to tests folder
        cd $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests

        # Install node
        curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -

        # Install dependencies
        npm install

        # Run tests
        echo "node_modules/.bin/node --unhandled-rejections=strict e2e/test-runner.js $(IDP_URL) $(API_URL) ${{ parameters.test_pack_path }}  ./e2e/environments/deploy.postman-environment.json"
        node_modules/.bin/node --unhandled-rejections=strict e2e/test-runner.js $(IDP_URL) $(API_URL) ${{ parameters.test_pack_path }}  ./e2e/environments/deploy.postman-environment.json;
      fi
    displayName: 'Run ${{ parameters.test_type }} tests'

  - task: PublishTestResults@2
    displayName: 'Publish ${{ parameters.test_type }} Test Results'
    inputs:
      testResultsFiles: |
        $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml
        $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/*.xml
      failTaskOnFailedTests: true

  - bash: poetry install
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup application restricted tests
  
  - bash: |
      export APPLICATION_RESTRICTED_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_PRIVATE_KEY)"
      export APPLICATION_RESTRICTED_WITH_ASID_SIGNING_KEY_PATH="$(Pipeline.Workspace)/secrets/$(JWT_TESTING_WITH_ASID_PRIVATE_KEY)"
      export APPLICATION_RESTRICTED_API_KEY="$(JWT_TESTING_API_KEY)"
      export APPLICATION_RESTRICTED_WITH_ASID_API_KEY="$(JWT_TESTING_WITH_ASID_API_KEY)"
      export PDS_BASE_PATH="$(SERVICE_BASE_PATH)"
      export APIGEE_ENVIRONMENT="$(ENVIRONMENT)"
      export KEY_ID="test-1"

      poetry run pytest -v tests/functional/test_application_restricted.py --junitxml=tests/functional-test-report.xml
    displayName: Run application restricted tests
    workingDirectory: "$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)"
  
  - task: PublishTestResults@2
    displayName: 'Publish application restricted test results'
    inputs:
      testResultsFiles: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/functional-test-report.xml
      failTaskOnFailedTests: true
